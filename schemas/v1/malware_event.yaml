title: malware_event
fields:

  - name: agent
    description: 'The agent fields contain the data about the software entity, if
      any, that collects, detects, or observes events on a host, or takes measurements
      on a host.

      Examples include Beats. Agents may also run on observers. ECS agent.* fields
      shall be populated with details of the agent running on the host or observer
      where the event happened or the measurement was taken.'
    fields:

      - name: ephemeral_id
        type: keyword
        description: 'Ephemeral identifier of this agent (if one exists).

          This id normally changes across restarts, but `agent.id` does not.'
        example: 8a4f500f

      - name: id
        type: keyword
        description: 'Unique identifier of this agent (if one exists).

          Example: For Beats this would be beat.id.'
        example: 8a4f500d

      - name: name
        type: keyword
        description: 'Custom name of the agent.

          This is a name that can be given to an agent. This can be helpful if for
          example two Filebeat instances are running on the same host but a human
          readable separation is needed on which Filebeat instance data is coming
          from.

          If no name is given, the name is often left empty.'
        example: foo

      - name: type
        type: keyword
        description: 'Type of the agent.

          The agent type stays always the same and should be given by the agent used.
          In case of Filebeat the agent would always be Filebeat also if two Filebeat
          instances are run on the same machine.'
        example: filebeat

      - name: version
        type: keyword
        description: Version of the agent.
        example: 6.0.0-rc2

  - name: '@timestamp'
    type: date
    description: 'Date/time when the event originated.

      This is the date/time extracted from the event, typically representing when
      the event was generated by the source.

      If the event source has no original timestamp, this value is typically populated
      by the first time the event was received by the pipeline.

      Required field for all events.'
    example: '2016-05-23T08:05:34.853Z'

  - name: dll
    description: 'These fields contain information about code libraries dynamically
      loaded into processes.


      Many operating systems refer to "shared code libraries" with different names,
      but this field set refers to all of the following:

      * Dynamic-link library (`.dll`) commonly used on Windows

      * Shared Object (`.so`) commonly used on Unix-like operating systems

      * Dynamic library (`.dylib`) commonly used on macOS'
    fields:

      - name: code_signature
        description: These fields contain information about binary code signatures.
        fields:

          - name: exists
            type: boolean
            description: Boolean to capture if a signature is present.
            example: 'true'

          - name: status
            type: keyword
            description: 'Additional information about the certificate status.

              This is useful for logging cryptographic errors with the certificate
              validity or trust status. Leave unpopulated if the validity or trust
              of the certificate was unchecked.'
            example: ERROR_UNTRUSTED_ROOT

          - name: subject_name
            type: keyword
            description: Subject name of the code signer
            example: Microsoft Corporation

          - name: trusted
            type: boolean
            description: 'Stores the trust status of the certificate chain.

              Validating the trust of the certificate chain may be complicated, and
              this field should only be populated by tools that actively check the
              status.'
            example: 'true'

          - name: valid
            type: boolean
            description: 'Boolean to capture if the digital signature is verified
              against the binary content.

              Leave unpopulated if a certificate was unchecked.'
            example: 'true'

      - name: compile_time
        type: date
        description: Timestamp from when the module was compiled.

      - name: hash
        description: 'The hash fields represent different hash algorithms and their
          values.

          Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
          for other hashes by lowercasing the hash algorithm name and using underscore
          separators as appropriate (snake case, e.g. sha3_512).'
        fields:

          - name: md5
            type: keyword
            description: MD5 hash.

          - name: sha1
            type: keyword
            description: SHA1 hash.

          - name: sha256
            type: keyword
            description: SHA256 hash.

          - name: sha512
            type: keyword
            description: SHA512 hash.

      - name: malware_classification
        description: These fields contain the malware classification.
        fields:

          - name: features
            description: TODO
            fields:

              - name: data
                description: TODO
                fields:

                  - name: buffer
                    type: keyword
                    description: The features extracted from this file and evaluated
                      by the model.  Usually an array of floats.  Likely zlib-encoded.

                  - name: decompressed_size
                    type: integer
                    description: The decompressed size of buffer.

                  - name: encoding
                    type: keyword
                    description: The encoding of buffer (e.g. zlib).

          - name: identifier
            type: keyword
            description: The model's unique identifier.

          - name: score
            type: double
            description: The score produced by the classification model.

          - name: threshold
            type: double
            description: The score threshold for the model.  Files that score above
              this threshold are considered malicious.

          - name: upx_packed
            type: boolean
            description: Whether UPX packing was detected.

          - name: version
            type: keyword
            description: The version of the model used.

      - name: mapped_address
        type: keyword
        description: The base address where this module is loaded.

      - name: mapped_size
        type: long
        description: The size of this module's memory mapping, in bytes.

      - name: name
        type: keyword
        description: 'Name of the library.

          This generally maps to the name of the file on disk.'
        example: kernel32.dll

      - name: path
        type: keyword
        description: Full file path of the library.
        example: C:\Windows\System32\kernel32.dll

      - name: pe
        description: These fields contain Windows Portable Executable (PE) metadata.
        fields:

          - name: company
            type: keyword
            description: Internal company name of the file, provided at compile-time.
            example: Microsoft Corporation

          - name: description
            type: keyword
            description: Internal description of the file, provided at compile-time.
            example: Paint

          - name: file_version
            type: keyword
            description: Internal version of the file, provided at compile-time.
            example: 6.3.9600.17415

          - name: original_file_name
            type: keyword
            description: Internal name of the file, provided at compile-time.
            example: MSPAINT.EXE

          - name: product
            type: keyword
            description: Internal product name of the file, provided at compile-time.
            example: "Microsoft\xAE Windows\xAE Operating System"

  - name: ecs
    description: Meta-information specific to ECS.
    fields:

      - name: version
        type: keyword
        description: 'ECS version this event conforms to. `ecs.version` is a required
          field and must exist in all events.

          When querying across multiple indices -- which may conform to slightly different
          ECS versions -- this field lets integrations adjust to the schema version
          of the events.'
        example: 1.0.0

  - name: endpoint
    description: Fields describing the state of the Elastic Endpoint when an event
      occurs.
    fields:

      - name: artifact
        description: TODO
        fields:

          - name: hash
            type: keyword
            description: Hash of artifact in use by endpoint when event was created.

          - name: name
            type: keyword
            description: Name of artifact in use by endpoint when event was created.

          - name: version
            type: keyword
            description: Version of artifact in use by endpoint when event was created.

      - name: dll
        description: 'These fields contain information about code libraries dynamically
          loaded into processes.


          Many operating systems refer to "shared code libraries" with different names,
          but this field set refers to all of the following:

          * Dynamic-link library (`.dll`) commonly used on Windows

          * Shared Object (`.so`) commonly used on Unix-like operating systems

          * Dynamic library (`.dylib`) commonly used on macOS'
        fields:

          - name: code_signature
            description: Nested version of ECS code_signature fieldset.
            fields:

              - name: exists
                type: boolean
                description: Boolean to capture if a signature is present.
                example: 'true'

              - name: status
                type: keyword
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT

              - name: subject_name
                type: keyword
                description: Subject name of the code signer
                example: Microsoft Corporation

              - name: trusted
                type: boolean
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'

              - name: valid
                type: boolean
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'

      - name: event
        description: Custom fields relating to event information
        fields:

          - name: process
            description: Custom process information relating to the event
            fields:

              - name: ancestry
                type: keyword
                description: An array of entity_ids indicating the ancestors for this
                  event

      - name: file
        description: Extended "file" field set
        fields:

          - name: code_signature
            description: Nested version of ECS code_signature fieldset.
            fields:

              - name: exists
                type: boolean
                description: Boolean to capture if a signature is present.
                example: 'true'

              - name: status
                type: keyword
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT

              - name: subject_name
                type: keyword
                description: Subject name of the code signer
                example: Microsoft Corporation

              - name: trusted
                type: boolean
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'

              - name: valid
                type: boolean
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'

      - name: policy
        description: The policy fields are used to hold information about applied
          policy.
        fields:

          - name: applied
            description: information about the policy that is applied
            fields:

              - name: id
                type: keyword
                description: the id of the applied policy

              - name: name
                type: keyword
                description: the name of this applied policy

              - name: status
                type: keyword
                description: the status of the applied policy

      - name: process
        description: Extended "process" field set
        fields:

          - name: code_signature
            description: Nested version of ECS code_signature fieldset.
            fields:

              - name: exists
                type: boolean
                description: Boolean to capture if a signature is present.
                example: 'true'

              - name: status
                type: keyword
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT

              - name: subject_name
                type: keyword
                description: Subject name of the code signer
                example: Microsoft Corporation

              - name: trusted
                type: boolean
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'

              - name: valid
                type: boolean
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'

          - name: parent
            description: Extended "process.parent" field set.
            fields:

              - name: code_signature
                description: Nested version of ECS code_signature fieldset.
                fields:

                  - name: exists
                    type: boolean
                    description: Boolean to capture if a signature is present.
                    example: 'true'

                  - name: status
                    type: keyword
                    description: 'Additional information about the certificate status.

                      This is useful for logging cryptographic errors with the certificate
                      validity or trust status. Leave unpopulated if the validity
                      or trust of the certificate was unchecked.'
                    example: ERROR_UNTRUSTED_ROOT

                  - name: subject_name
                    type: keyword
                    description: Subject name of the code signer
                    example: Microsoft Corporation

                  - name: trusted
                    type: boolean
                    description: 'Stores the trust status of the certificate chain.

                      Validating the trust of the certificate chain may be complicated,
                      and this field should only be populated by tools that actively
                      check the status.'
                    example: 'true'

                  - name: valid
                    type: boolean
                    description: 'Boolean to capture if the digital signature is verified
                      against the binary content.

                      Leave unpopulated if a certificate was unchecked.'
                    example: 'true'

  - name: event
    description: 'The event fields are used for context information about the log
      or metric event itself.

      A log is defined as an event containing details of something that happened.
      Log events must include the time at which the thing happened. Examples of log
      events include a process starting on a host, a network packet being sent from
      a source to a destination, or a network connection between a client and a server
      being initiated or closed. A metric is defined as an event containing one or
      more numerical measurements and the time at which the measurement was taken.
      Examples of metric events include memory pressure measured on a host and device
      temperature. See the `event.kind` definition in this section for additional
      details about metric and state events.'
    fields:

      - name: action
        type: keyword
        description: 'The action captured by the event.

          This describes the information in the event. It is more specific than `event.category`.
          Examples are `group-add`, `process-started`, `file-created`. The value is
          normally defined by the implementer.'
        example: user-password-change

      - name: category
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the second level in the ECS category hierarchy.

          `event.category` represents the "big buckets" of ECS categories. For example,
          filtering on `event.category:process` yields all events relating to process
          activity. This field is closely related to `event.type`, which is used as
          a subcategory.

          This field is an array. This will allow proper categorization of some events
          that fall in multiple categories.'
        example: authentication
        allowed_values:

          - name: authentication
            description: 'Events in this category are related to the challenge and
              response process in which credentials are supplied and verified to allow
              the creation of a session. Common sources for these logs are Windows
              event logs and ssh logs. Visualize and analyze events in this category
              to look for failed logins, and other authentication-related activity.

              '
            expected_event_types:
              - start
              - end
              - info

          - name: database
            description: 'The database category denotes events and metrics relating
              to a data storage and retrieval system. Note that use of this category
              is not limited to relational database systems. Examples include event
              logs from MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category
              to visualize and analyze database activity such as accesses and changes.

              '
            expected_event_types:
              - access
              - change
              - info
              - error

          - name: driver
            description: 'Events in the driver category have to do with operating
              system device drivers and similar software entities such as Windows
              drivers, kernel extensions, kernel modules, etc.

              Use events and metrics in this category to visualize and analyze driver-related
              activity and status on hosts.

              '
            expected_event_types:
              - change
              - end
              - info
              - start

          - name: file
            description: 'Relating to a set of information that has been created on,
              or has existed on a filesystem. Use this category of events to visualize
              and analyze the creation, access, and deletions of files. Events in
              this category can come from both host-based and network-based sources.
              An example source of a network-based detection of a file transfer would
              be the Zeek file.log.

              '
            expected_event_types:
              - change
              - creation
              - deletion
              - info

          - name: host
            description: 'Use this category to visualize and analyze information such
              as host inventory or host lifecycle events.

              Most of the events in this category can usually be observed from the
              outside, such as from a hypervisor or a control plane''s point of view.
              Some can also be seen from within, such as "start" or "end".

              Note that this category is for information about hosts themselves; it
              is not meant to capture activity "happening on a host".

              '
            expected_event_types:
              - access
              - change
              - end
              - info
              - start

          - name: iam
            description: 'Identity and access management (IAM) events relating to
              users, groups, and administration. Use this category to visualize and
              analyze IAM-related logs and data from active directory, LDAP, Okta,
              Duo, and other IAM systems.

              '
            expected_event_types:
              - admin
              - change
              - creation
              - deletion
              - group
              - info
              - user

          - name: intrusion_detection
            description: 'Relating to intrusion detections from IDS/IPS systems and
              functions, both network and host-based. Use this category to visualize
              and analyze intrusion detection alerts from systems such as Snort, Suricata,
              and Palo Alto threat detections.

              '
            expected_event_types:
              - allowed
              - denied
              - info

          - name: malware
            description: 'Malware detection events and alerts. Use this category to
              visualize and analyze malware detections from EDR/EPP systems such as
              Elastic Endpoint Security, Symantec Endpoint Protection, Crowdstrike,
              and network IDS/IPS systems such as Suricata, or other sources of malware-related
              events such as Palo Alto Networks threat logs and Wildfire logs.

              '
            expected_event_types:
              - info

          - name: network
            description: 'Relating to all network activity, including network connection
              lifecycle, network traffic, and essentially any event that includes
              an IP address. Many events containing decoded network protocol transactions
              fit into this category. Use events in this category to visualize or
              analyze counts of network ports, protocols, addresses, geolocation information,
              etc.

              '
            expected_event_types:
              - access
              - allowed
              - connection
              - denied
              - end
              - info
              - protocol
              - start

          - name: package
            description: 'Relating to software packages installed on hosts. Use this
              category to visualize and analyze inventory of software installed on
              various hosts, or to determine host vulnerability in the absence of
              vulnerability scan data.

              '
            expected_event_types:
              - access
              - change
              - deletion
              - info
              - installation
              - start

          - name: process
            description: 'Use this category of events to visualize and analyze process-specific
              information such as lifecycle events or process ancestry.

              '
            expected_event_types:
              - access
              - change
              - end
              - info
              - start

          - name: web
            description: 'Relating to web server access. Use this category to create
              a dashboard of web server/proxy activity from apache, IIS, nginx web
              servers, etc. Note: events from network observers such as Zeek http
              log may also be included in this category.

              '
            expected_event_types:
              - access
              - error
              - info

      - name: created
        type: date
        description: 'event.created contains the date/time when the event was first
          read by an agent, or by your pipeline.

          This field is distinct from @timestamp in that @timestamp typically contain
          the time extracted from the original event.

          In most situations, these two timestamps will be slightly different. The
          difference can be used to calculate the delay between your source generating
          an event, and the time when your agent first processed it. This can be used
          to monitor your agent''s or pipeline''s ability to keep up with your event
          source.

          In case the two timestamps are identical, @timestamp should be used.'
        example: '2016-05-23T08:05:34.857Z'

      - name: dataset
        type: keyword
        description: 'Name of the dataset.

          If an event source publishes more than one type of log or events (e.g. access
          log, error log), the dataset is used to specify which one the event comes
          from.

          It''s recommended but not required to start the dataset name with the module
          name, followed by a dot, then the dataset name.'
        example: apache.access

      - name: hash
        type: keyword
        description: Hash (perhaps logstash fingerprint) of raw field to be able to
          demonstrate log integrity.
        example: 123456789012345678901234567890ABCD

      - name: id
        type: keyword
        description: Unique ID to describe the event.
        example: 8a4f500d

      - name: ingested
        type: date
        description: 'Timestamp when an event arrived in the central data store.

          This is different from `@timestamp`, which is when the event originally
          occurred.  It''s also different from `event.created`, which is meant to
          capture the first time an agent saw the event.

          In normal conditions, assuming no tampering, the timestamps should chronologically
          look like this: `@timestamp` < `event.created` < `event.ingested`.'
        example: '2016-05-23T08:05:35.101Z'

      - name: kind
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the highest level in the ECS category hierarchy.

          `event.kind` gives high-level information about what type of information
          the event contains, without being specific to the contents of the event.
          For example, values of this field distinguish alert events from metric events.

          The value of this field can be used to inform how these kinds of events
          should be handled. They may warrant different retention, different access
          control, it may also help understand whether the data coming in at a regular
          interval or not.'
        example: alert
        allowed_values:

          - name: alert
            description: 'This value indicates an event that describes an alert or
              notable event, triggered by a detection rule.

              `event.kind:alert` is often populated for events coming from firewalls,
              intrusion detection systems, endpoint detection and response systems,
              and so on.

              '

          - name: event
            description: 'This value is the most general and most common value for
              this field. It is used to represent events that indicate that something
              happened.

              '

          - name: metric
            description: 'This value is used to indicate that this event describes
              a numeric measurement taken at given point in time.

              Examples include CPU utilization, memory usage, or device temperature.

              Metric events are often collected on a predictable frequency, such as
              once every few seconds, or once a minute, but can also be used to describe
              ad-hoc numeric metric queries.

              '

          - name: state
            description: 'The state value is similar to metric, indicating that this
              event describes a measurement taken at given point in time, except that
              the measurement does not result in a numeric value, but rather one of
              a fixed set of categorical values that represent conditions or states.

              Examples include periodic events reporting Elasticsearch cluster state
              (green/yellow/red), the state of a TCP connection (open, closed, fin_wait,
              etc.), the state of a host with respect to a software vulnerability
              (vulnerable, not vulnerable), and the state of a system regarding compliance
              with a regulatory standard (compliant, not compliant).

              Note that an event that describes a change of state would not use `event.kind:state`,
              but instead would use ''event.kind:event'' since a state change fits
              the more general event definition of something that happened.

              State events are often collected on a predictable frequency, such as
              once every few seconds, once a minute, once an hour, or once a day,
              but can also be used to describe ad-hoc state queries.

              '

          - name: pipeline_error
            description: 'This value indicates that an error occurred during the ingestion
              of this event, and that event data may be missing, inconsistent, or
              incorrect. `event.kind:pipeline_error` is often associated with parsing
              errors.

              '

          - name: signal
            description: 'This value is used by the Elastic SIEM app to denote an
              Elasticsearch document that was created by a SIEM detection engine rule.

              A signal will typically trigger a notification that something meaningful
              happened and should be investigated.

              Usage of this value is reserved, and pipelines should not populate `event.kind`
              with the value "signal".

              '

      - name: module
        type: keyword
        description: 'Name of the module this data is coming from.

          If your monitoring agent supports the concept of modules or plugins to process
          events of a given source (e.g. Apache logs), `event.module` should contain
          the name of this module.'
        example: apache

      - name: outcome
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the lowest level in the ECS category hierarchy.

          `event.outcome` simply denotes whether the event represents a success or
          a failure from the perspective of the entity that produced the event.

          Note that when a single transaction is described in multiple events, each
          event may populate different values of `event.outcome`, according to their
          perspective.

          Also note that in the case of a compound event (a single event that contains
          multiple logical events), this field should be populated with the value
          that best captures the overall success or failure from the perspective of
          the event producer.

          Further note that not all events will have an associated outcome. For example,
          this field is generally not populated for metric events, events with `event.type:info`,
          or any events for which an outcome does not make logical sense.'
        example: success
        allowed_values:

          - name: failure
            description: 'Indicates that this event describes a failed result. A common
              example is `event.category:file AND event.type:access AND event.outcome:failure`
              to indicate that a file access was attempted, but was not successful.

              '

          - name: success
            description: 'Indicates that this event describes a successful result.
              A common example is `event.category:file AND event.type:create AND event.outcome:success`
              to indicate that a file was successfully created.

              '

          - name: unknown
            description: 'Indicates that this event describes only an attempt for
              which the result is unknown from the perspective of the event producer.
              For example, if the event contains information only about the request
              side of a transaction that results in a response, populating `event.outcome:unknown`
              in the request event is appropriate. The unknown value should not be
              used when an outcome doesn''t make logical sense for the event. In such
              cases `event.outcome` should not be populated.

              '

      - name: sequence
        type: long
        description: 'Sequence number of the event.

          The sequence number is a value published by some event sources, to make
          the exact ordering of events unambiguous, regardless of the timestamp precision.'

      - name: type
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the third level in the ECS category hierarchy.

          `event.type` represents a categorization "sub-bucket" that, when used along
          with the `event.category` field values, enables filtering events down to
          a level appropriate for single visualization.

          This field is an array. This will allow proper categorization of some events
          that fall in multiple event types.'
        allowed_values:

          - name: access
            description: 'The access event type is used for the subset of events within
              a category that indicate that something was accessed. Common examples
              include `event.category:database AND event.type:access`, or `event.category:file
              AND event.type:access`. Note for file access, both directory listings
              and file opens should be included in this subcategory. You can further
              distinguish access operations using the ECS `event.action` field.

              '

          - name: admin
            description: 'The admin event type is used for the subset of events within
              a category that are related to admin objects. For example, administrative
              changes within an IAM framework that do not specifically affect a user
              or group (e.g., adding new applications to a federation solution or
              connecting discrete forests in Active Directory) would fall into this
              subcategory. Common example: `event.category:iam AND event.type:change
              AND event.type:admin`. You can further distinguish admin operations
              using the ECS `event.action` field.

              '

          - name: allowed
            description: 'The allowed event type is used for the subset of events
              within a category that indicate that something was allowed. Common examples
              include `event.category:network AND event.type:connection AND event.type:allowed`
              (to indicate a network firewall event for which the firewall disposition
              was to allow the connection to complete) and `event.category:intrusion_detection
              AND event.type:allowed` (to indicate a network intrusion prevention
              system event for which the IPS disposition was to allow the connection
              to complete). You can further distinguish allowed operations using the
              ECS `event.action` field, populating with values of your choosing, such
              as "allow", "detect", or "pass".

              '

          - name: change
            description: 'The change event type is used for the subset of events within
              a category that indicate that something has changed. If semantics best
              describe an event as modified, then include them in this subcategory.
              Common examples include `event.category:process AND event.type:change`,
              and `event.category:file AND event.type:change`. You can further distinguish
              change operations using the ECS `event.action` field.

              '

          - name: connection
            description: 'Used primarily with `event.category:network` this value
              is used for the subset of network traffic that includes sufficient information
              for the event to be included in flow or connection analysis. Events
              in this subcategory will contain at least source and destination IP
              addresses, source and destination TCP/UDP ports, and will usually contain
              counts of bytes and/or packets transferred. Events in this subcategory
              may contain unidirectional or bidirectional information, including summary
              information. Use this subcategory to visualize and analyze network connections.
              Flow analysis, including Netflow, IPFIX, and other flow-related events
              fit in this subcategory. Note that firewall events from many Next-Generation
              Firewall (NGFW) devices will also fit into this subcategory.  A common
              filter for flow/connection information would be `event.category:network
              AND event.type:connection AND event.type:end` (to view or analyze all
              completed network connections, ignoring mid-flow reports). You can further
              distinguish connection events using the ECS `event.action` field, populating
              with values of your choosing, such as "timeout", or "reset".

              '

          - name: creation
            description: 'The "creation" event type is used for the subset of events
              within a category that indicate that something was created. A common
              example is `event.category:file AND event.type:creation`.

              '

          - name: deletion
            description: 'The deletion event type is used for the subset of events
              within a category that indicate that something was deleted. A common
              example is `event.category:file AND event.type:deletion` to indicate
              that a file has been deleted.

              '

          - name: denied
            description: 'The denied event type is used for the subset of events within
              a category that indicate that something was denied. Common examples
              include `event.category:network AND event.type:denied` (to indicate
              a network firewall event for which the firewall disposition was to deny
              the connection) and `event.category:intrusion_detection AND event.type:denied`
              (to indicate a network intrusion prevention system event for which the
              IPS disposition was to deny the connection to complete). You can further
              distinguish denied operations using the ECS `event.action` field, populating
              with values of your choosing, such as "blocked", "dropped", or "quarantined".

              '

          - name: end
            description: 'The end event type is used for the subset of events within
              a category that indicate something has ended. A common example is `event.category:process
              AND event.type:end`.

              '

          - name: error
            description: 'The error event type is used for the subset of events within
              a category that indicate or describe an error. A common example is `event.category:database
              AND event.type:error`. Note that pipeline errors that occur during the
              event ingestion process should not use this `event.type` value. Instead,
              they should use `event.kind:pipeline_error`.

              '

          - name: group
            description: 'The group event type is used for the subset of events within
              a category that are related to group objects. Common example: `event.category:iam
              AND event.type:creation AND event.type:group`. You can further distinguish
              group operations using the ECS `event.action` field.

              '

          - name: info
            description: 'The info event type is used for the subset of events within
              a category that indicate that they are purely informational, and don''t
              report a state change, or any type of action. For example, an initial
              run of a file integrity monitoring system (FIM), where an agent reports
              all files under management, would fall into the "info" subcategory.
              Similarly, an event containing a dump of all currently running processes
              (as opposed to reporting that a process started/ended) would fall into
              the "info" subcategory. An additional common examples is `event.category:intrusion_detection
              AND event.type:info`.

              '

          - name: installation
            description: 'The installation event type is used for the subset of events
              within a category that indicate that something was installed. A common
              example is `event.category:package` AND `event.type:installation`.

              '

          - name: protocol
            description: 'The protocol event type is used for the subset of events
              within a category that indicate that they contain protocol details or
              analysis, beyond simply identifying the protocol. Generally, network
              events that contain specific protocol details will fall into this subcategory.
              A common example is `event.category:network AND event.type:protocol
              AND event.type:connection AND event.type:end` (to indicate that the
              event is a network connection event sent at the end of a connection
              that also includes a protocol detail breakdown). Note that events that
              only indicate the name or id of the protocol should not use the protocol
              value. Further note that when the protocol subcategory is used, the
              identified protocol is populated in the ECS `network.protocol` field.

              '
            expected_event_types:
              - access
              - change
              - end
              - info
              - start

          - name: start
            description: 'The start event type is used for the subset of events within
              a category that indicate something has started. A common example is
              `event.category:process AND event.type:start`.

              '

          - name: user
            description: 'The user event type is used for the subset of events within
              a category that are related to user objects. Common example: `event.category:iam
              AND event.type:deletion AND event.type:user`. You can further distinguish
              user operations using the ECS `event.action` field.

              '

  - name: file
    description: 'A file is defined as a set of information that has been created
      on, or has existed on a filesystem.

      File objects can be associated with host events, network events, and/or file
      events (e.g., those produced by File Integrity Monitoring [FIM] products or
      services). File fields provide details about the affected file associated with
      the event or metric.'
    fields:

      - name: accessed
        type: date
        description: 'Last time the file was accessed.

          Note that not all filesystems keep track of access time.'

      - name: attributes
        type: keyword
        description: 'Array of file attributes.

          Attributes names will vary by platform. Here''s a non-exhaustive list of
          values that are expected in this field: archive, compressed, directory,
          encrypted, execute, hidden, read, readonly, system, write.'
        example: '["readonly", "system"]'

      - name: code_signature
        description: These fields contain information about binary code signatures.
        fields:

          - name: exists
            type: boolean
            description: Boolean to capture if a signature is present.
            example: 'true'

          - name: status
            type: keyword
            description: 'Additional information about the certificate status.

              This is useful for logging cryptographic errors with the certificate
              validity or trust status. Leave unpopulated if the validity or trust
              of the certificate was unchecked.'
            example: ERROR_UNTRUSTED_ROOT

          - name: subject_name
            type: keyword
            description: Subject name of the code signer
            example: Microsoft Corporation

          - name: trusted
            type: boolean
            description: 'Stores the trust status of the certificate chain.

              Validating the trust of the certificate chain may be complicated, and
              this field should only be populated by tools that actively check the
              status.'
            example: 'true'

          - name: valid
            type: boolean
            description: 'Boolean to capture if the digital signature is verified
              against the binary content.

              Leave unpopulated if a certificate was unchecked.'
            example: 'true'

      - name: created
        type: date
        description: 'File creation time.

          Note that not all filesystems store the creation time.'

      - name: ctime
        type: date
        description: 'Last time the file attributes or metadata changed.

          Note that changes to the file content will update `mtime`. This implies
          `ctime` will be adjusted at the same time, since `mtime` is an attribute
          of the file.'

      - name: device
        type: keyword
        description: Device that is the source of the file.
        example: sda

      - name: directory
        type: keyword
        description: Directory where the file is located. It should include the drive
          letter, when appropriate.
        example: /home/alice

      - name: drive_letter
        type: keyword
        description: 'Drive letter where the file is located. This field is only relevant
          on Windows.

          The value should be uppercase, and not include the colon.'
        example: C

      - name: entry_modified
        type: double
        description: Time of last status change.  See `st_ctim` member of `struct
          stat`.

      - name: extension
        type: keyword
        description: File extension.
        example: png

      - name: gid
        type: keyword
        description: Primary group ID (GID) of the file.
        example: '1001'

      - name: group
        type: keyword
        description: Primary group name of the file.
        example: alice

      - name: hash
        description: 'The hash fields represent different hash algorithms and their
          values.

          Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
          for other hashes by lowercasing the hash algorithm name and using underscore
          separators as appropriate (snake case, e.g. sha3_512).'
        fields:

          - name: md5
            type: keyword
            description: MD5 hash.

          - name: sha1
            type: keyword
            description: SHA1 hash.

          - name: sha256
            type: keyword
            description: SHA256 hash.

          - name: sha512
            type: keyword
            description: SHA512 hash.

      - name: inode
        type: keyword
        description: Inode representing the file in the filesystem.
        example: '256383'

      - name: macro
        description: Fields describing a Windows macro.
        fields:

          - name: code_page
            type: long
            description: Identifies the character encoding used for this macro.  https://docs.microsoft.com/en-us/windows/win32/intl/code-page-identifiers

          - name: collection
            description: Object containing hashes for the macro collection.
            fields:

              - name: hash
                description: 'The hash fields represent different hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).'
                fields:

                  - name: md5
                    type: keyword
                    description: MD5 hash.

                  - name: sha1
                    type: keyword
                    description: SHA1 hash.

                  - name: sha256
                    type: keyword
                    description: SHA256 hash.

                  - name: sha512
                    type: keyword
                    description: SHA512 hash.

          - name: errors
            description: Errors that occurred when parsing this document file.
            fields:

              - name: count
                type: long
                description: Number of times this error that occurred.

              - name: error_type
                type: keyword
                description: The type of parsing error that occurred.

          - name: file_extension
            type: keyword
            description: The extension of the file containing this macro (e.g. .docm)

          - name: project_file
            description: Metadata about the corresponding VBA project file
            fields:

              - name: hash
                description: 'The hash fields represent different hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).'
                fields:

                  - name: md5
                    type: keyword
                    description: MD5 hash.

                  - name: sha1
                    type: keyword
                    description: SHA1 hash.

                  - name: sha256
                    type: keyword
                    description: SHA256 hash.

                  - name: sha512
                    type: keyword
                    description: SHA512 hash.

          - name: stream
            description: Streams associated with the document.
            fields:

              - name: hash
                description: 'The hash fields represent different hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).'
                fields:

                  - name: md5
                    type: keyword
                    description: MD5 hash.

                  - name: sha1
                    type: keyword
                    description: SHA1 hash.

                  - name: sha256
                    type: keyword
                    description: SHA256 hash.

                  - name: sha512
                    type: keyword
                    description: SHA512 hash.

              - name: name
                type: keyword
                description: Name of the stream.

              - name: raw_code
                type: keyword
                description: First 100KB of raw stream binary.  Can be useful to analyze
                  false positives and malicious payloads.

              - name: raw_code_size
                type: keyword
                description: The original stream size.  Indicates whether stream.raw_code
                  was truncated.

      - name: malware_classification
        description: These fields contain the malware classification.
        fields:

          - name: features
            description: TODO
            fields:

              - name: data
                description: TODO
                fields:

                  - name: buffer
                    type: keyword
                    description: The features extracted from this file and evaluated
                      by the model.  Usually an array of floats.  Likely zlib-encoded.

                  - name: decompressed_size
                    type: integer
                    description: The decompressed size of buffer.

                  - name: encoding
                    type: keyword
                    description: The encoding of buffer (e.g. zlib).

          - name: identifier
            type: keyword
            description: The model's unique identifier.

          - name: score
            type: double
            description: The score produced by the classification model.

          - name: threshold
            type: double
            description: The score threshold for the model.  Files that score above
              this threshold are considered malicious.

          - name: upx_packed
            type: boolean
            description: Whether UPX packing was detected.

          - name: version
            type: keyword
            description: The version of the model used.

      - name: mime_type
        type: keyword
        description: MIME type should identify the format of the file or stream of
          bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA
          official types], where possible. When more than one type is applicable,
          the most specific type should be used.

      - name: mode
        type: keyword
        description: Mode of the file in octal representation.
        example: '0640'

      - name: mtime
        type: date
        description: Last time the file content was modified.

      - name: name
        type: keyword
        description: Name of the file including the extension, without the directory.
        example: example.png

      - name: owner
        type: keyword
        description: File owner's username.
        example: alice

      - name: path
        type: keyword
        description: Full path to the file, including the file name. It should include
          the drive letter, when appropriate.
        example: /home/alice/example.png

      - name: pe
        description: These fields contain Windows Portable Executable (PE) metadata.
        fields:

          - name: company
            type: keyword
            description: Internal company name of the file, provided at compile-time.
            example: Microsoft Corporation

          - name: description
            type: keyword
            description: Internal description of the file, provided at compile-time.
            example: Paint

          - name: file_version
            type: keyword
            description: Internal version of the file, provided at compile-time.
            example: 6.3.9600.17415

          - name: original_file_name
            type: keyword
            description: Internal name of the file, provided at compile-time.
            example: MSPAINT.EXE

          - name: product
            type: keyword
            description: Internal product name of the file, provided at compile-time.
            example: "Microsoft\xAE Windows\xAE Operating System"

      - name: quarantine_path
        type: keyword
        description: Path on endpoint the quarantined file was originally.

      - name: quarantine_result
        type: boolean
        description: Boolean representing whether or not file quarantine succeeded.

      - name: size
        type: long
        description: 'File size in bytes.

          Only relevant when `file.type` is "file".'
        example: 16384

      - name: target_path
        type: keyword
        description: Target path for symlinks.

      - name: temp_file_path
        type: keyword
        description: Path on endpoint where a copy of the file is being stored.  Used
          to make ephemeral files retrievable.

      - name: type
        type: keyword
        description: File type (file, dir, or symlink).
        example: file

      - name: uid
        type: keyword
        description: The user ID (UID) or security identifier (SID) of the file owner.
        example: '1001'

  - name: host
    description: 'A host is defined as a general computing instance.

      ECS host.* fields should be populated with details about the host on which the
      event happened, or from which the measurement was taken. Host types include
      hardware, virtual machines, Docker containers, and Kubernetes nodes.'
    fields:

      - name: architecture
        type: keyword
        description: Operating system architecture.
        example: x86_64

      - name: domain
        type: keyword
        description: 'Name of the domain of which the host is a member.

          For example, on Windows this could be the host''s Active Directory domain
          or NetBIOS domain name. For Linux this could be the domain of the host''s
          LDAP provider.'
        example: CONTOSO

      - name: geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        fields:

          - name: city_name
            type: keyword
            description: City name.
            example: Montreal

          - name: continent_name
            type: keyword
            description: Name of the continent.
            example: North America

          - name: country_iso_code
            type: keyword
            description: Country ISO code.
            example: CA

          - name: country_name
            type: keyword
            description: Country name.
            example: Canada

          - name: location
            type: geo_point
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'

          - name: name
            type: keyword
            description: 'User-defined description of a location, at the level of
              granularity they care about.

              Could be the name of their data centers, the floor number, if this describes
              a local physical entity, city names.

              Not typically used in automated geolocation.'
            example: boston-dc

          - name: region_iso_code
            type: keyword
            description: Region ISO code.
            example: CA-QC

          - name: region_name
            type: keyword
            description: Region name.
            example: Quebec

      - name: hostname
        type: keyword
        description: 'Hostname of the host.

          It normally contains what the `hostname` command returns on the host machine.'

      - name: id
        type: keyword
        description: 'Unique host id.

          As hostname is not always unique, use values that are meaningful in your
          environment.

          Example: The current usage of `beat.name`.'

      - name: ip
        type: ip
        description: Host ip addresses.

      - name: mac
        type: keyword
        description: Host mac addresses.

      - name: name
        type: keyword
        description: 'Name of the host.

          It can contain what `hostname` returns on Unix systems, the fully qualified
          domain name, or a name specified by the user. The sender decides which value
          to use.'

      - name: os
        description: The OS fields contain information about the operating system.
        fields:

          - name: family
            type: keyword
            description: OS family (such as redhat, debian, freebsd, windows).
            example: debian

          - name: full
            type: keyword
            description: Operating system name, including the version or code name.
            example: Mac OS Mojave

          - name: kernel
            type: keyword
            description: Operating system kernel version as a raw string.
            example: 4.4.0-112-generic

          - name: name
            type: keyword
            description: Operating system name, without the version.
            example: Mac OS X

          - name: platform
            type: keyword
            description: Operating system platform (such centos, ubuntu, windows).
            example: darwin

          - name: variant
            type: keyword
            description: A string value or phrase that further aid to classify or
              qualify the operating system (OS).  For example the distribution for
              a Linux OS will be entered in this field.
            example: Ubuntu

          - name: version
            type: keyword
            description: Operating system version as a raw string.
            example: 10.14.1

      - name: type
        type: keyword
        description: 'Type of host.

          For Cloud providers this can be the machine type like `t2.medium`. If vm,
          this could be the container, for example, or other information meaningful
          in your environment.'

      - name: uptime
        type: long
        description: Seconds the host has been up.
        example: 1325

      - name: user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        fields:

          - name: domain
            type: keyword
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'

          - name: email
            type: keyword
            description: User email address.

          - name: full_name
            type: keyword
            description: User's full name, if available.
            example: Albert Einstein

          - name: group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            fields:

              - name: domain
                type: keyword
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'

              - name: id
                type: keyword
                description: Unique identifier for the group on the system/platform.

              - name: name
                type: keyword
                description: Name of the group.

          - name: hash
            type: keyword
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'

          - name: id
            type: keyword
            description: Unique identifiers of the user.

          - name: name
            type: keyword
            description: Short name or login of the user.
            example: albert

  - name: process
    description: 'These fields contain information about a process.

      These fields can help you correlate metrics information with a process id/name
      from a log message.  The `process.pid` often stays in the metric itself and
      is copied to the global field for correlation.'
    fields:

      - name: args
        type: keyword
        description: 'Array of process arguments, starting with the absolute path
          to the executable.

          May be filtered to protect sensitive information.'
        example:
          - /usr/bin/ssh
          - -l
          - user
          - 10.0.0.16

      - name: args_count
        type: long
        description: 'Length of the process.args array.

          This field can be useful for querying or performing bucket analysis on how
          many arguments were provided to start a process. More arguments may be an
          indication of suspicious activity.'
        example: 4

      - name: code_signature
        description: These fields contain information about binary code signatures.
        fields:

          - name: exists
            type: boolean
            description: Boolean to capture if a signature is present.
            example: 'true'

          - name: status
            type: keyword
            description: 'Additional information about the certificate status.

              This is useful for logging cryptographic errors with the certificate
              validity or trust status. Leave unpopulated if the validity or trust
              of the certificate was unchecked.'
            example: ERROR_UNTRUSTED_ROOT

          - name: subject_name
            type: keyword
            description: Subject name of the code signer
            example: Microsoft Corporation

          - name: trusted
            type: boolean
            description: 'Stores the trust status of the certificate chain.

              Validating the trust of the certificate chain may be complicated, and
              this field should only be populated by tools that actively check the
              status.'
            example: 'true'

          - name: valid
            type: boolean
            description: 'Boolean to capture if the digital signature is verified
              against the binary content.

              Leave unpopulated if a certificate was unchecked.'
            example: 'true'

      - name: command_line
        type: keyword
        description: 'Full command line that started the process, including the absolute
          path to the executable, and all arguments.

          Some arguments may be filtered to protect sensitive information.'
        example: /usr/bin/ssh -l user 10.0.0.16

      - name: entity_id
        type: keyword
        description: 'Unique identifier for the process.

          The implementation of this is specified by the data source, but some examples
          of what could be used here are a process-generated UUID, Sysmon Process
          GUIDs, or a hash of some uniquely identifying components of a process.

          Constructing a globally unique identifier is a common practice to mitigate
          PID reuse as well as to identify a specific process over time, across multiple
          monitored hosts.'
        example: c2c455d9f99375d

      - name: executable
        type: keyword
        description: Absolute path to the process executable.
        example: /usr/bin/ssh

      - name: exit_code
        type: long
        description: 'The exit code of the process, if this is a termination event.

          The field should be absent if there is no exit code for the event (e.g.
          process start).'
        example: 137

      - name: hash
        description: 'The hash fields represent different hash algorithms and their
          values.

          Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
          for other hashes by lowercasing the hash algorithm name and using underscore
          separators as appropriate (snake case, e.g. sha3_512).'
        fields:

          - name: md5
            type: keyword
            description: MD5 hash.

          - name: sha1
            type: keyword
            description: SHA1 hash.

          - name: sha256
            type: keyword
            description: SHA256 hash.

          - name: sha512
            type: keyword
            description: SHA512 hash.

      - name: malware_classification
        description: These fields contain the malware classification.
        fields:

          - name: features
            description: TODO
            fields:

              - name: data
                description: TODO
                fields:

                  - name: buffer
                    type: keyword
                    description: The features extracted from this file and evaluated
                      by the model.  Usually an array of floats.  Likely zlib-encoded.

                  - name: decompressed_size
                    type: integer
                    description: The decompressed size of buffer.

                  - name: encoding
                    type: keyword
                    description: The encoding of buffer (e.g. zlib).

          - name: identifier
            type: keyword
            description: The model's unique identifier.

          - name: score
            type: double
            description: The score produced by the classification model.

          - name: threshold
            type: double
            description: The score threshold for the model.  Files that score above
              this threshold are considered malicious.

          - name: upx_packed
            type: boolean
            description: Whether UPX packing was detected.

          - name: version
            type: keyword
            description: The version of the model used.

      - name: name
        type: keyword
        description: 'Process name.

          Sometimes called program name or similar.'
        example: ssh

      - name: parent
        description: TODO
        fields:

          - name: args
            type: keyword
            description: 'Array of process arguments.

              May be filtered to protect sensitive information.'
            example:
              - ssh
              - -l
              - user
              - 10.0.0.16

          - name: args_count
            type: long
            description: 'Length of the process.args array.

              This field can be useful for querying or performing bucket analysis
              on how many arguments were provided to start a process. More arguments
              may be an indication of suspicious activity.'
            example: 4

          - name: code_signature
            description: These fields contain information about binary code signatures.
            fields:

              - name: exists
                type: boolean
                description: Boolean to capture if a signature is present.
                example: 'true'

              - name: status
                type: keyword
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT

              - name: subject_name
                type: keyword
                description: Subject name of the code signer
                example: Microsoft Corporation

              - name: trusted
                type: boolean
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'

              - name: valid
                type: boolean
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'

          - name: command_line
            type: keyword
            description: 'Full command line that started the process, including the
              absolute path to the executable, and all arguments.

              Some arguments may be filtered to protect sensitive information.'
            example: /usr/bin/ssh -l user 10.0.0.16

          - name: entity_id
            type: keyword
            description: 'Unique identifier for the process.

              The implementation of this is specified by the data source, but some
              examples of what could be used here are a process-generated UUID, Sysmon
              Process GUIDs, or a hash of some uniquely identifying components of
              a process.

              Constructing a globally unique identifier is a common practice to mitigate
              PID reuse as well as to identify a specific process over time, across
              multiple monitored hosts.'
            example: c2c455d9f99375d

          - name: executable
            type: keyword
            description: Absolute path to the process executable.
            example: /usr/bin/ssh

          - name: exit_code
            type: long
            description: 'The exit code of the process, if this is a termination event.

              The field should be absent if there is no exit code for the event (e.g.
              process start).'
            example: 137

          - name: hash
            description: 'The hash fields represent different hash algorithms and
              their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).'
            fields:

              - name: md5
                type: keyword
                description: MD5 hash.

              - name: sha1
                type: keyword
                description: SHA1 hash.

              - name: sha256
                type: keyword
                description: SHA256 hash.

              - name: sha512
                type: keyword
                description: SHA512 hash.

          - name: name
            type: keyword
            description: 'Process name.

              Sometimes called program name or similar.'
            example: ssh

          - name: pgid
            type: long
            description: Identifier of the group of processes the process belongs
              to.

          - name: pid
            type: long
            description: Process id.
            example: 4242

          - name: ppid
            type: long
            description: Parent process' pid.
            example: 4241

          - name: start
            type: date
            description: The time the process started.
            example: '2016-05-23T08:05:34.853Z'

          - name: thread
            description: TODO
            fields:

              - name: id
                type: long
                description: Thread ID.
                example: 4242

              - name: name
                type: keyword
                description: Thread name.
                example: thread-0

          - name: title
            type: keyword
            description: 'Process title.

              The proctitle, some times the same as process name. Can also be different:
              for example a browser setting its title to the web page currently opened.'

          - name: uptime
            type: long
            description: Seconds the process has been up.
            example: 1325

          - name: working_directory
            type: keyword
            description: The working directory of the process.
            example: /home/alice

      - name: pe
        description: These fields contain Windows Portable Executable (PE) metadata.
        fields:

          - name: company
            type: keyword
            description: Internal company name of the file, provided at compile-time.
            example: Microsoft Corporation

          - name: description
            type: keyword
            description: Internal description of the file, provided at compile-time.
            example: Paint

          - name: file_version
            type: keyword
            description: Internal version of the file, provided at compile-time.
            example: 6.3.9600.17415

          - name: original_file_name
            type: keyword
            description: Internal name of the file, provided at compile-time.
            example: MSPAINT.EXE

          - name: product
            type: keyword
            description: Internal product name of the file, provided at compile-time.
            example: "Microsoft\xAE Windows\xAE Operating System"

      - name: pgid
        type: long
        description: Identifier of the group of processes the process belongs to.

      - name: pid
        type: long
        description: Process id.
        example: 4242

      - name: ppid
        type: long
        description: Parent process' pid.
        example: 4241

      - name: services
        type: keyword
        description: Services running in this process.

      - name: start
        type: date
        description: The time the process started.
        example: '2016-05-23T08:05:34.853Z'

      - name: thread
        description: TODO
        fields:

          - name: call_stack
            description: Fields describing a stack frame.  call_stack is expected
              to be an array where each array element represents a stack frame.
            fields:

              - name: instruction_pointer
                type: keyword
                description: The return address of this stack frame.

              - name: memory_section
                description: TODO
                fields:

                  - name: address
                    type: keyword
                    description: Base address of the memory region containing `instruction_pointer`.  Corresponds
                      to `MEMORY_BASIC_INFORMATION.BaseAddress`

                  - name: protection
                    type: keyword
                    description: Memory protection flags of this memory region.  Corresponds
                      to `MEMORY_BASIC_INFORMATION.Protect`

                  - name: size
                    type: keyword
                    description: Size of the memory region containing `instruction_pointer`.  Corresponds
                      to `MEMORY_BASIC_INFORMATION.RegionSize`

              - name: module_path
                type: keyword
                description: The DLL/module containing `instruction_pointer`.

              - name: rva
                type: keyword
                description: The relative virtual address of `instruction_pointer`.  Computed
                  as `instruction_pointer - MEMORY_BASIC_INFORMATION.AllocationBase`.

              - name: symbol_info
                type: keyword
                description: The nearest symbol for `instruction_pointer`.

          - name: id
            type: long
            description: Thread ID.
            example: 4242

          - name: name
            type: keyword
            description: Thread name.
            example: thread-0

          - name: service
            type: keyword
            description: Service associated with the thread.
            example: VaultSvc

          - name: start
            type: date
            description: The time the thread started.
            example: '2016-05-23T08:05:34.853Z'

          - name: start_address
            type: keyword
            description: Memory address where the thread began execution.
            example: 5442508

          - name: start_address_module
            type: keyword
            description: The dll/module where the thread began execution.
            example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe

          - name: token
            description: 'These fields contain information about a token.

              These fields can help you correlate metrics information with a process
              id/name from a log message.  The `process.pid` often stays in the metric
              itself and is copied to the global field for correlation.'
            fields:

              - name: domain
                type: keyword
                description: Domain of token user.

              - name: elevation
                type: boolean
                description: Whether the token is elevated or not

              - name: elevation_type
                type: keyword
                description: What level of elevation the token has
                example: one of "default", "full", "limited"

              - name: impersonation_level
                type: keyword
                description: Impersonation level. Only valid for impersonation tokens.

              - name: integrity_level
                type: long
                description: Numeric integrity level.

              - name: integrity_level_name
                type: keyword
                description: Human readable integrity level.
                example: one of "system", "high", "medium", "low", "untrusted"

              - name: is_appcontainer
                type: boolean
                description: Whether or not this is an appcontainer token.

              - name: privileges
                description: Array describing the privileges associated with the token.
                fields:

                  - name: description
                    type: keyword
                    description: Description of the privilege.

                  - name: enabled
                    type: boolean
                    description: Whether or not the privilege is enabled.

                  - name: name
                    type: keyword
                    description: Name of the privilege.

              - name: sid
                type: keyword
                description: Token user's Security Identifier (SID).

              - name: type
                type: keyword
                description: Type of the token, either primary or impersonation.

              - name: user
                type: keyword
                description: Username of token owner.

          - name: uptime
            type: long
            description: Seconds since thread started.

      - name: title
        type: keyword
        description: 'Process title.

          The proctitle, some times the same as process name. Can also be different:
          for example a browser setting its title to the web page currently opened.'

      - name: token
        description: 'These fields contain information about a token.

          These fields can help you correlate metrics information with a process id/name
          from a log message.  The `process.pid` often stays in the metric itself
          and is copied to the global field for correlation.'
        fields:

          - name: domain
            type: keyword
            description: Domain of token user.

          - name: elevation
            type: boolean
            description: Whether the token is elevated or not

          - name: elevation_type
            type: keyword
            description: What level of elevation the token has
            example: one of "default", "full", "limited"

          - name: impersonation_level
            type: keyword
            description: Impersonation level. Only valid for impersonation tokens.

          - name: integrity_level
            type: long
            description: Numeric integrity level.

          - name: integrity_level_name
            type: keyword
            description: Human readable integrity level.
            example: one of "system", "high", "medium", "low", "untrusted"

          - name: is_appcontainer
            type: boolean
            description: Whether or not this is an appcontainer token.

          - name: privileges
            description: Array describing the privileges associated with the token.
            fields:

              - name: description
                type: keyword
                description: Description of the privilege.

              - name: enabled
                type: boolean
                description: Whether or not the privilege is enabled.

              - name: name
                type: keyword
                description: Name of the privilege.

          - name: sid
            type: keyword
            description: Token user's Security Identifier (SID).

          - name: type
            type: keyword
            description: Type of the token, either primary or impersonation.

          - name: user
            type: keyword
            description: Username of token owner.

      - name: uptime
        type: long
        description: Seconds the process has been up.
        example: 1325

      - name: user
        type: keyword
        description: User associated with the running process.

      - name: working_directory
        type: keyword
        description: The working directory of the process.
        example: /home/alice

  - name: rule
    description: 'Rule fields are used to capture the specifics of any observer or
      agent rules that generate alerts or other notable events.

      Examples of data sources that would populate the rule fields include: network
      admission control platforms, network or host IDS/IPS, network firewalls, web
      application firewalls, url filters, endpoint detection and response (EDR) systems,
      etc.'
    fields:

      - name: author
        type: keyword
        description: Name, organization, or pseudonym of the author or authors who
          created the rule used to generate this event.
        example:
          - Star-Lord

      - name: category
        type: keyword
        description: A categorization value keyword used by the entity using the rule
          for detection of this event.
        example: Attempted Information Leak

      - name: description
        type: keyword
        description: The description of the rule generating the event.
        example: Block requests to public DNS over HTTPS / TLS protocols

      - name: id
        type: keyword
        description: A rule ID that is unique within the scope of an agent, observer,
          or other entity using the rule for detection of this event.
        example: 101

      - name: license
        type: keyword
        description: Name of the license under which the rule used to generate this
          event is made available.
        example: Apache 2.0

      - name: name
        type: keyword
        description: The name of the rule or signature generating the event.
        example: BLOCK_DNS_over_TLS

      - name: reference
        type: keyword
        description: 'Reference URL to additional information about the rule used
          to generate this event.

          The URL can point to the vendor''s documentation about the rule. If that''s
          not available, it can also be a link to a more general page describing this
          type of alert.'
        example: https://en.wikipedia.org/wiki/DNS_over_TLS

      - name: ruleset
        type: keyword
        description: Name of the ruleset, policy, group, or parent category in which
          the rule used to generate this event is a member.
        example: Standard_Protocol_Filters

      - name: uuid
        type: keyword
        description: A rule ID that is unique within the scope of a set or group of
          agents, observers, or other entities using the rule for detection of this
          event.
        example: 1100110011

      - name: version
        type: keyword
        description: The version / revision of the rule being used for analysis.
        example: 1.1

  - name: target
    description: 'These fields contain information about a target.

      These fields provide more context about the target process and thread that are
      related to the data in the document. Useful in a security context where a target
      process or thread may be acted on by another process or thread.'
    fields:

      - name: dll
        description: 'These fields contain information about code libraries dynamically
          loaded into processes.


          Many operating systems refer to "shared code libraries" with different names,
          but this field set refers to all of the following:

          * Dynamic-link library (`.dll`) commonly used on Windows

          * Shared Object (`.so`) commonly used on Unix-like operating systems

          * Dynamic library (`.dylib`) commonly used on macOS'
        fields:

          - name: code_signature
            description: These fields contain information about binary code signatures.
            fields:

              - name: exists
                type: boolean
                description: Boolean to capture if a signature is present.
                example: 'true'

              - name: status
                type: keyword
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT

              - name: subject_name
                type: keyword
                description: Subject name of the code signer
                example: Microsoft Corporation

              - name: trusted
                type: boolean
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'

              - name: valid
                type: boolean
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'

          - name: compile_time
            type: date
            description: Timestamp from when the module was compiled.

          - name: hash
            description: 'The hash fields represent different hash algorithms and
              their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).'
            fields:

              - name: md5
                type: keyword
                description: MD5 hash.

              - name: sha1
                type: keyword
                description: SHA1 hash.

              - name: sha256
                type: keyword
                description: SHA256 hash.

              - name: sha512
                type: keyword
                description: SHA512 hash.

          - name: malware_classification
            description: These fields contain the malware classification.
            fields:

              - name: features
                description: TODO
                fields:

                  - name: data
                    description: TODO
                    fields:

                      - name: buffer
                        type: keyword
                        description: The features extracted from this file and evaluated
                          by the model.  Usually an array of floats.  Likely zlib-encoded.

                      - name: decompressed_size
                        type: integer
                        description: The decompressed size of buffer.

                      - name: encoding
                        type: keyword
                        description: The encoding of buffer (e.g. zlib).

              - name: identifier
                type: keyword
                description: The model's unique identifier.

              - name: score
                type: double
                description: The score produced by the classification model.

              - name: threshold
                type: double
                description: The score threshold for the model.  Files that score
                  above this threshold are considered malicious.

              - name: upx_packed
                type: boolean
                description: Whether UPX packing was detected.

              - name: version
                type: keyword
                description: The version of the model used.

          - name: mapped_address
            type: keyword
            description: The base address where this module is loaded.

          - name: mapped_size
            type: long
            description: The size of this module's memory mapping, in bytes.

          - name: name
            type: keyword
            description: 'Name of the library.

              This generally maps to the name of the file on disk.'
            example: kernel32.dll

          - name: path
            type: keyword
            description: Full file path of the library.
            example: C:\Windows\System32\kernel32.dll

          - name: pe
            description: These fields contain Windows Portable Executable (PE) metadata.
            fields:

              - name: company
                type: keyword
                description: Internal company name of the file, provided at compile-time.
                example: Microsoft Corporation

              - name: description
                type: keyword
                description: Internal description of the file, provided at compile-time.
                example: Paint

              - name: file_version
                type: keyword
                description: Internal version of the file, provided at compile-time.
                example: 6.3.9600.17415

              - name: original_file_name
                type: keyword
                description: Internal name of the file, provided at compile-time.
                example: MSPAINT.EXE

              - name: product
                type: keyword
                description: Internal product name of the file, provided at compile-time.
                example: "Microsoft\xAE Windows\xAE Operating System"

      - name: process
        description: 'These fields contain information about a process.

          These fields can help you correlate metrics information with a process id/name
          from a log message.  The `process.pid` often stays in the metric itself
          and is copied to the global field for correlation.'
        fields:

          - name: args
            type: keyword
            description: 'Array of process arguments, starting with the absolute path
              to the executable.

              May be filtered to protect sensitive information.'
            example:
              - /usr/bin/ssh
              - -l
              - user
              - 10.0.0.16

          - name: args_count
            type: long
            description: 'Length of the process.args array.

              This field can be useful for querying or performing bucket analysis
              on how many arguments were provided to start a process. More arguments
              may be an indication of suspicious activity.'
            example: 4

          - name: code_signature
            description: These fields contain information about binary code signatures.
            fields:

              - name: exists
                type: boolean
                description: Boolean to capture if a signature is present.
                example: 'true'

              - name: status
                type: keyword
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT

              - name: subject_name
                type: keyword
                description: Subject name of the code signer
                example: Microsoft Corporation

              - name: trusted
                type: boolean
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'

              - name: valid
                type: boolean
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'

          - name: command_line
            type: keyword
            description: 'Full command line that started the process, including the
              absolute path to the executable, and all arguments.

              Some arguments may be filtered to protect sensitive information.'
            example: /usr/bin/ssh -l user 10.0.0.16

          - name: entity_id
            type: keyword
            description: 'Unique identifier for the process.

              The implementation of this is specified by the data source, but some
              examples of what could be used here are a process-generated UUID, Sysmon
              Process GUIDs, or a hash of some uniquely identifying components of
              a process.

              Constructing a globally unique identifier is a common practice to mitigate
              PID reuse as well as to identify a specific process over time, across
              multiple monitored hosts.'
            example: c2c455d9f99375d

          - name: executable
            type: keyword
            description: Absolute path to the process executable.
            example: /usr/bin/ssh

          - name: exit_code
            type: long
            description: 'The exit code of the process, if this is a termination event.

              The field should be absent if there is no exit code for the event (e.g.
              process start).'
            example: 137

          - name: hash
            description: 'The hash fields represent different hash algorithms and
              their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).'
            fields:

              - name: md5
                type: keyword
                description: MD5 hash.

              - name: sha1
                type: keyword
                description: SHA1 hash.

              - name: sha256
                type: keyword
                description: SHA256 hash.

              - name: sha512
                type: keyword
                description: SHA512 hash.

          - name: malware_classification
            description: These fields contain the malware classification.
            fields:

              - name: features
                description: TODO
                fields:

                  - name: data
                    description: TODO
                    fields:

                      - name: buffer
                        type: keyword
                        description: The features extracted from this file and evaluated
                          by the model.  Usually an array of floats.  Likely zlib-encoded.

                      - name: decompressed_size
                        type: integer
                        description: The decompressed size of buffer.

                      - name: encoding
                        type: keyword
                        description: The encoding of buffer (e.g. zlib).

              - name: identifier
                type: keyword
                description: The model's unique identifier.

              - name: score
                type: double
                description: The score produced by the classification model.

              - name: threshold
                type: double
                description: The score threshold for the model.  Files that score
                  above this threshold are considered malicious.

              - name: upx_packed
                type: boolean
                description: Whether UPX packing was detected.

              - name: version
                type: keyword
                description: The version of the model used.

          - name: name
            type: keyword
            description: 'Process name.

              Sometimes called program name or similar.'
            example: ssh

          - name: parent
            description: TODO
            fields:

              - name: args
                type: keyword
                description: 'Array of process arguments.

                  May be filtered to protect sensitive information.'
                example:
                  - ssh
                  - -l
                  - user
                  - 10.0.0.16

              - name: args_count
                type: long
                description: 'Length of the process.args array.

                  This field can be useful for querying or performing bucket analysis
                  on how many arguments were provided to start a process. More arguments
                  may be an indication of suspicious activity.'
                example: 4

              - name: code_signature
                description: These fields contain information about binary code signatures.
                fields:

                  - name: exists
                    type: boolean
                    description: Boolean to capture if a signature is present.
                    example: 'true'

                  - name: status
                    type: keyword
                    description: 'Additional information about the certificate status.

                      This is useful for logging cryptographic errors with the certificate
                      validity or trust status. Leave unpopulated if the validity
                      or trust of the certificate was unchecked.'
                    example: ERROR_UNTRUSTED_ROOT

                  - name: subject_name
                    type: keyword
                    description: Subject name of the code signer
                    example: Microsoft Corporation

                  - name: trusted
                    type: boolean
                    description: 'Stores the trust status of the certificate chain.

                      Validating the trust of the certificate chain may be complicated,
                      and this field should only be populated by tools that actively
                      check the status.'
                    example: 'true'

                  - name: valid
                    type: boolean
                    description: 'Boolean to capture if the digital signature is verified
                      against the binary content.

                      Leave unpopulated if a certificate was unchecked.'
                    example: 'true'

              - name: command_line
                type: keyword
                description: 'Full command line that started the process, including
                  the absolute path to the executable, and all arguments.

                  Some arguments may be filtered to protect sensitive information.'
                example: /usr/bin/ssh -l user 10.0.0.16

              - name: entity_id
                type: keyword
                description: 'Unique identifier for the process.

                  The implementation of this is specified by the data source, but
                  some examples of what could be used here are a process-generated
                  UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying
                  components of a process.

                  Constructing a globally unique identifier is a common practice to
                  mitigate PID reuse as well as to identify a specific process over
                  time, across multiple monitored hosts.'
                example: c2c455d9f99375d

              - name: executable
                type: keyword
                description: Absolute path to the process executable.
                example: /usr/bin/ssh

              - name: exit_code
                type: long
                description: 'The exit code of the process, if this is a termination
                  event.

                  The field should be absent if there is no exit code for the event
                  (e.g. process start).'
                example: 137

              - name: hash
                description: 'The hash fields represent different hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).'
                fields:

                  - name: md5
                    type: keyword
                    description: MD5 hash.

                  - name: sha1
                    type: keyword
                    description: SHA1 hash.

                  - name: sha256
                    type: keyword
                    description: SHA256 hash.

                  - name: sha512
                    type: keyword
                    description: SHA512 hash.

              - name: name
                type: keyword
                description: 'Process name.

                  Sometimes called program name or similar.'
                example: ssh

              - name: pgid
                type: long
                description: Identifier of the group of processes the process belongs
                  to.

              - name: pid
                type: long
                description: Process id.
                example: 4242

              - name: ppid
                type: long
                description: Parent process' pid.
                example: 4241

              - name: start
                type: date
                description: The time the process started.
                example: '2016-05-23T08:05:34.853Z'

              - name: thread
                description: TODO
                fields:

                  - name: id
                    type: long
                    description: Thread ID.
                    example: 4242

                  - name: name
                    type: keyword
                    description: Thread name.
                    example: thread-0

              - name: title
                type: keyword
                description: 'Process title.

                  The proctitle, some times the same as process name. Can also be
                  different: for example a browser setting its title to the web page
                  currently opened.'

              - name: uptime
                type: long
                description: Seconds the process has been up.
                example: 1325

              - name: working_directory
                type: keyword
                description: The working directory of the process.
                example: /home/alice

          - name: pe
            description: These fields contain Windows Portable Executable (PE) metadata.
            fields:

              - name: company
                type: keyword
                description: Internal company name of the file, provided at compile-time.
                example: Microsoft Corporation

              - name: description
                type: keyword
                description: Internal description of the file, provided at compile-time.
                example: Paint

              - name: file_version
                type: keyword
                description: Internal version of the file, provided at compile-time.
                example: 6.3.9600.17415

              - name: original_file_name
                type: keyword
                description: Internal name of the file, provided at compile-time.
                example: MSPAINT.EXE

              - name: product
                type: keyword
                description: Internal product name of the file, provided at compile-time.
                example: "Microsoft\xAE Windows\xAE Operating System"

          - name: pgid
            type: long
            description: Identifier of the group of processes the process belongs
              to.

          - name: pid
            type: long
            description: Process id.
            example: 4242

          - name: ppid
            type: long
            description: Parent process' pid.
            example: 4241

          - name: services
            type: keyword
            description: Services running in this process.

          - name: start
            type: date
            description: The time the process started.
            example: '2016-05-23T08:05:34.853Z'

          - name: thread
            description: TODO
            fields:

              - name: call_stack
                description: Fields describing a stack frame.  call_stack is expected
                  to be an array where each array element represents a stack frame.
                fields:

                  - name: instruction_pointer
                    type: keyword
                    description: The return address of this stack frame.

                  - name: memory_section
                    description: TODO
                    fields:

                      - name: address
                        type: keyword
                        description: Base address of the memory region containing
                          `instruction_pointer`.  Corresponds to `MEMORY_BASIC_INFORMATION.BaseAddress`

                      - name: protection
                        type: keyword
                        description: Memory protection flags of this memory region.  Corresponds
                          to `MEMORY_BASIC_INFORMATION.Protect`

                      - name: size
                        type: keyword
                        description: Size of the memory region containing `instruction_pointer`.  Corresponds
                          to `MEMORY_BASIC_INFORMATION.RegionSize`

                  - name: module_path
                    type: keyword
                    description: The DLL/module containing `instruction_pointer`.

                  - name: rva
                    type: keyword
                    description: The relative virtual address of `instruction_pointer`.  Computed
                      as `instruction_pointer - MEMORY_BASIC_INFORMATION.AllocationBase`.

                  - name: symbol_info
                    type: keyword
                    description: The nearest symbol for `instruction_pointer`.

              - name: id
                type: long
                description: Thread ID.
                example: 4242

              - name: name
                type: keyword
                description: Thread name.
                example: thread-0

              - name: service
                type: keyword
                description: Service associated with the thread.
                example: VaultSvc

              - name: start
                type: date
                description: The time the thread started.
                example: '2016-05-23T08:05:34.853Z'

              - name: start_address
                type: keyword
                description: Memory address where the thread began execution.
                example: 5442508

              - name: start_address_module
                type: keyword
                description: The dll/module where the thread began execution.
                example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe

              - name: token
                description: 'These fields contain information about a token.

                  These fields can help you correlate metrics information with a process
                  id/name from a log message.  The `process.pid` often stays in the
                  metric itself and is copied to the global field for correlation.'
                fields:

                  - name: domain
                    type: keyword
                    description: Domain of token user.

                  - name: elevation
                    type: boolean
                    description: Whether the token is elevated or not

                  - name: elevation_type
                    type: keyword
                    description: What level of elevation the token has
                    example: one of "default", "full", "limited"

                  - name: impersonation_level
                    type: keyword
                    description: Impersonation level. Only valid for impersonation
                      tokens.

                  - name: integrity_level
                    type: long
                    description: Numeric integrity level.

                  - name: integrity_level_name
                    type: keyword
                    description: Human readable integrity level.
                    example: one of "system", "high", "medium", "low", "untrusted"

                  - name: is_appcontainer
                    type: boolean
                    description: Whether or not this is an appcontainer token.

                  - name: privileges
                    description: Array describing the privileges associated with the
                      token.
                    fields:

                      - name: description
                        type: keyword
                        description: Description of the privilege.

                      - name: enabled
                        type: boolean
                        description: Whether or not the privilege is enabled.

                      - name: name
                        type: keyword
                        description: Name of the privilege.

                  - name: sid
                    type: keyword
                    description: Token user's Security Identifier (SID).

                  - name: type
                    type: keyword
                    description: Type of the token, either primary or impersonation.

                  - name: user
                    type: keyword
                    description: Username of token owner.

              - name: uptime
                type: long
                description: Seconds since thread started.

          - name: title
            type: keyword
            description: 'Process title.

              The proctitle, some times the same as process name. Can also be different:
              for example a browser setting its title to the web page currently opened.'

          - name: token
            description: 'These fields contain information about a token.

              These fields can help you correlate metrics information with a process
              id/name from a log message.  The `process.pid` often stays in the metric
              itself and is copied to the global field for correlation.'
            fields:

              - name: domain
                type: keyword
                description: Domain of token user.

              - name: elevation
                type: boolean
                description: Whether the token is elevated or not

              - name: elevation_type
                type: keyword
                description: What level of elevation the token has
                example: one of "default", "full", "limited"

              - name: impersonation_level
                type: keyword
                description: Impersonation level. Only valid for impersonation tokens.

              - name: integrity_level
                type: long
                description: Numeric integrity level.

              - name: integrity_level_name
                type: keyword
                description: Human readable integrity level.
                example: one of "system", "high", "medium", "low", "untrusted"

              - name: is_appcontainer
                type: boolean
                description: Whether or not this is an appcontainer token.

              - name: privileges
                description: Array describing the privileges associated with the token.
                fields:

                  - name: description
                    type: keyword
                    description: Description of the privilege.

                  - name: enabled
                    type: boolean
                    description: Whether or not the privilege is enabled.

                  - name: name
                    type: keyword
                    description: Name of the privilege.

              - name: sid
                type: keyword
                description: Token user's Security Identifier (SID).

              - name: type
                type: keyword
                description: Type of the token, either primary or impersonation.

              - name: user
                type: keyword
                description: Username of token owner.

          - name: uptime
            type: long
            description: Seconds the process has been up.
            example: 1325

          - name: user
            type: keyword
            description: User associated with the running process.

          - name: working_directory
            type: keyword
            description: The working directory of the process.
            example: /home/alice

  - name: threat
    description: 'Fields to classify events and alerts according to a threat taxonomy
      such as the Mitre ATT&CK framework.

      These fields are for users to classify alerts from all of their sources (e.g.
      IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to
      capture the high level category of the threat (e.g. "impact"). The threat.technique.*
      fields are meant to capture which kind of approach is used by this detected
      threat, to accomplish the goal (e.g. "endpoint denial of service").'
    fields:

      - name: framework
        type: keyword
        description: Name of the threat framework used to further categorize and classify
          the tactic and technique of the reported threat. Framework classification
          can be provided by detecting systems, evaluated at ingest time, or retrospectively
          tagged to events.
        example: MITRE ATT&CK

      - name: tactic
        description: TODO
        fields:

          - name: id
            type: keyword
            description: The id of tactic used by this threat. You can use the Mitre
              ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
              )
            example: TA0040

          - name: name
            type: keyword
            description: Name of the type of tactic used by this threat. You can use
              the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
              )
            example: impact

          - name: reference
            type: keyword
            description: The reference url of tactic used by this threat. You can
              use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex.
              https://attack.mitre.org/tactics/TA0040/ )
            example: https://attack.mitre.org/tactics/TA0040/

      - name: technique
        description: TODO
        fields:

          - name: id
            type: keyword
            description: The id of technique used by this tactic. You can use the
              Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
              )
            example: T1499

          - name: name
            type: keyword
            description: The name of technique used by this tactic. You can use the
              Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
              )
            example: endpoint denial of service

          - name: reference
            type: keyword
            description: The reference url of technique used by this tactic. You can
              use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex.
              https://attack.mitre.org/techniques/T1499/ )
            example: https://attack.mitre.org/techniques/T1499/

  - name: user
    description: 'The user fields describe information about the user that is relevant
      to the event.

      Fields can have one entry or multiple entries. If a user has more than one id,
      provide an array that includes all of them.'
    fields:

      - name: domain
        type: keyword
        description: 'Name of the directory the user is a member of.

          For example, an LDAP or Active Directory domain name.'

      - name: email
        type: keyword
        description: User email address.

      - name: full_name
        type: keyword
        description: User's full name, if available.
        example: Albert Einstein

      - name: group
        description: The group fields are meant to represent groups that are relevant
          to the event.
        fields:

          - name: domain
            type: keyword
            description: 'Name of the directory the group is a member of.

              For example, an LDAP or Active Directory domain name.'

          - name: id
            type: keyword
            description: Unique identifier for the group on the system/platform.

          - name: name
            type: keyword
            description: Name of the group.

      - name: hash
        type: keyword
        description: 'Unique user hash to correlate information for a user in anonymized
          form.

          Useful if `user.id` or `user.name` contain confidential information and
          cannot be used.'

      - name: id
        type: keyword
        description: Unique identifiers of the user.

      - name: name
        type: keyword
        description: Short name or login of the user.
        example: albert
