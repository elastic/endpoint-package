title: network
fields:

  - name: agent
    description: 'The agent fields contain the data about the software entity, if
      any, that collects, detects, or observes events on a host, or takes measurements
      on a host.

      Examples include Beats. Agents may also run on observers. ECS agent.* fields
      shall be populated with details of the agent running on the host or observer
      where the event happened or the measurement was taken.'
    fields:

      - name: id
        type: keyword
        description: 'Unique identifier of this agent (if one exists).

          Example: For Beats this would be beat.id.'
        example: 8a4f500d

      - name: type
        type: keyword
        description: 'Type of the agent.

          The agent type stays always the same and should be given by the agent used.
          In case of Filebeat the agent would always be Filebeat also if two Filebeat
          instances are run on the same machine.'
        example: filebeat

      - name: version
        type: keyword
        description: Version of the agent.
        example: 6.0.0-rc2

  - name: '@timestamp'
    type: date
    description: 'Date/time when the event originated.

      This is the date/time extracted from the event, typically representing when
      the event was generated by the source.

      If the event source has no original timestamp, this value is typically populated
      by the first time the event was received by the pipeline.

      Required field for all events.'
    example: '2016-05-23T08:05:34.853Z'

  - name: message
    type: text
    description: 'For log events the message field contains the log message, optimized
      for viewing in a log viewer.

      For structured logs without an original message field, other fields can be concatenated
      to form a human-readable summary of the event.

      If multiple messages exist, they can be combined into one message.'
    example: Hello World

  - name: destination
    description: 'Destination fields describe details about the destination of a packet/event.

      Destination fields are usually populated in conjunction with source fields.'
    fields:

      - name: address
        type: keyword
        description: 'Some event destination addresses are defined ambiguously. The
          event will sometimes list an IP, a domain or a unix socket.  You should
          always store the raw address in the `.address` field.

          Then it should be duplicated to `.ip` or `.domain`, depending on which one
          it is.'

      - name: bytes
        type: long
        description: Bytes sent from the destination to the source.
        example: 184

      - name: domain
        type: keyword
        description: Destination domain.

      - name: ip
        type: ip
        description: 'IP address of the destination.

          Can be one or multiple IPv4 or IPv6 addresses.'

      - name: packets
        type: long
        description: Packets sent from the destination to the source.
        example: 12

      - name: port
        type: long
        description: Port of the destination.

      - name: registered_domain
        type: keyword
        description: 'The highest registered destination domain, stripped of the subdomain.

          For example, the registered domain for "foo.google.com" is "google.com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last two labels will not work well for TLDs such as "co.uk".'
        example: google.com

      - name: top_level_domain
        type: keyword
        description: 'The effective top level domain (eTLD), also known as the domain
          suffix, is the last part of the domain name. For example, the top level
          domain for google.com is "com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last label will not work well for effective TLDs such as "co.uk".'
        example: co.uk

  - name: dns
    description: 'Fields describing DNS queries and answers.

      DNS events should either represent a single DNS query prior to getting answers
      (`dns.type:query`) or they should represent a full exchange and contain the
      query details as well as all of the answers that were provided for this query
      (`dns.type:answer`).'
    fields:

      - name: Ext
        description: Object for all custom defined fields to live in.
        fields:

          - name: options
            type: keyword
            description: DNS options field, uint64, representing as a keyword to avoid
              overflows in ES

          - name: status
            type: long
            description: DNS status field, uint32

      - name: question
        description: TODO
        fields:

          - name: name
            type: keyword
            description: 'The name being queried.

              If the name field contains non-printable characters (below 32 or above
              126), those characters should be represented as escaped base 10 integers
              (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns,
              and line feeds should be converted to \t, \r, and \n respectively.'
            example: www.google.com

          - name: registered_domain
            type: keyword
            description: 'The highest registered domain, stripped of the subdomain.

              For example, the registered domain for "foo.google.com" is "google.com".

              This value can be determined precisely with a list like the public suffix
              list (http://publicsuffix.org). Trying to approximate this by simply
              taking the last two labels will not work well for TLDs such as "co.uk".'
            example: google.com

          - name: subdomain
            type: keyword
            description: 'The subdomain is all of the labels under the registered_domain.

              If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
              the subdomain field should contain "sub2.sub1", with no trailing period.'
            example: www

          - name: top_level_domain
            type: keyword
            description: 'The effective top level domain (eTLD), also known as the
              domain suffix, is the last part of the domain name. For example, the
              top level domain for google.com is "com".

              This value can be determined precisely with a list like the public suffix
              list (http://publicsuffix.org). Trying to approximate this by simply
              taking the last label will not work well for effective TLDs such as
              "co.uk".'
            example: co.uk

          - name: type
            type: keyword
            description: The type of record being queried.
            example: AAAA

      - name: resolved_ip
        type: ip
        description: 'Array containing all IPs seen in `answers.data`.

          The `answers` array can be difficult to use, because of the variety of data
          formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`
          makes it possible to index them as IP addresses, and makes them easier to
          visualize and query for.'
        example:
          - 10.10.10.10
          - 10.10.10.11

  - name: ecs
    description: Meta-information specific to ECS.
    fields:

      - name: version
        type: keyword
        description: 'ECS version this event conforms to. `ecs.version` is a required
          field and must exist in all events.

          When querying across multiple indices -- which may conform to slightly different
          ECS versions -- this field lets integrations adjust to the schema version
          of the events.'
        example: 1.0.0

  - name: event
    description: 'The event fields are used for context information about the log
      or metric event itself.

      A log is defined as an event containing details of something that happened.
      Log events must include the time at which the thing happened. Examples of log
      events include a process starting on a host, a network packet being sent from
      a source to a destination, or a network connection between a client and a server
      being initiated or closed. A metric is defined as an event containing one or
      more numerical measurements and the time at which the measurement was taken.
      Examples of metric events include memory pressure measured on a host and device
      temperature. See the `event.kind` definition in this section for additional
      details about metric and state events.'
    fields:

      - name: action
        type: keyword
        description: 'The action captured by the event.

          This describes the information in the event. It is more specific than `event.category`.
          Examples are `group-add`, `process-started`, `file-created`. The value is
          normally defined by the implementer.'
        example: user-password-change

      - name: category
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the second level in the ECS category hierarchy.

          `event.category` represents the "big buckets" of ECS categories. For example,
          filtering on `event.category:process` yields all events relating to process
          activity. This field is closely related to `event.type`, which is used as
          a subcategory.

          This field is an array. This will allow proper categorization of some events
          that fall in multiple categories.'
        example: authentication
        allowed_values:

          - name: authentication
            description: 'Events in this category are related to the challenge and
              response process in which credentials are supplied and verified to allow
              the creation of a session. Common sources for these logs are Windows
              event logs and ssh logs. Visualize and analyze events in this category
              to look for failed logins, and other authentication-related activity.

              '
            expected_event_types:
              - start
              - end
              - info

          - name: database
            description: 'The database category denotes events and metrics relating
              to a data storage and retrieval system. Note that use of this category
              is not limited to relational database systems. Examples include event
              logs from MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category
              to visualize and analyze database activity such as accesses and changes.

              '
            expected_event_types:
              - access
              - change
              - info
              - error

          - name: driver
            description: 'Events in the driver category have to do with operating
              system device drivers and similar software entities such as Windows
              drivers, kernel extensions, kernel modules, etc.

              Use events and metrics in this category to visualize and analyze driver-related
              activity and status on hosts.

              '
            expected_event_types:
              - change
              - end
              - info
              - start

          - name: file
            description: 'Relating to a set of information that has been created on,
              or has existed on a filesystem. Use this category of events to visualize
              and analyze the creation, access, and deletions of files. Events in
              this category can come from both host-based and network-based sources.
              An example source of a network-based detection of a file transfer would
              be the Zeek file.log.

              '
            expected_event_types:
              - change
              - creation
              - deletion
              - info

          - name: host
            description: 'Use this category to visualize and analyze information such
              as host inventory or host lifecycle events.

              Most of the events in this category can usually be observed from the
              outside, such as from a hypervisor or a control plane''s point of view.
              Some can also be seen from within, such as "start" or "end".

              Note that this category is for information about hosts themselves; it
              is not meant to capture activity "happening on a host".

              '
            expected_event_types:
              - access
              - change
              - end
              - info
              - start

          - name: iam
            description: 'Identity and access management (IAM) events relating to
              users, groups, and administration. Use this category to visualize and
              analyze IAM-related logs and data from active directory, LDAP, Okta,
              Duo, and other IAM systems.

              '
            expected_event_types:
              - admin
              - change
              - creation
              - deletion
              - group
              - info
              - user

          - name: intrusion_detection
            description: 'Relating to intrusion detections from IDS/IPS systems and
              functions, both network and host-based. Use this category to visualize
              and analyze intrusion detection alerts from systems such as Snort, Suricata,
              and Palo Alto threat detections.

              '
            expected_event_types:
              - allowed
              - denied
              - info

          - name: malware
            description: 'Malware detection events and alerts. Use this category to
              visualize and analyze malware detections from EDR/EPP systems such as
              Elastic Endpoint Security, Symantec Endpoint Protection, Crowdstrike,
              and network IDS/IPS systems such as Suricata, or other sources of malware-related
              events such as Palo Alto Networks threat logs and Wildfire logs.

              '
            expected_event_types:
              - info

          - name: network
            description: 'Relating to all network activity, including network connection
              lifecycle, network traffic, and essentially any event that includes
              an IP address. Many events containing decoded network protocol transactions
              fit into this category. Use events in this category to visualize or
              analyze counts of network ports, protocols, addresses, geolocation information,
              etc.

              '
            expected_event_types:
              - access
              - allowed
              - connection
              - denied
              - end
              - info
              - protocol
              - start

          - name: package
            description: 'Relating to software packages installed on hosts. Use this
              category to visualize and analyze inventory of software installed on
              various hosts, or to determine host vulnerability in the absence of
              vulnerability scan data.

              '
            expected_event_types:
              - access
              - change
              - deletion
              - info
              - installation
              - start

          - name: process
            description: 'Use this category of events to visualize and analyze process-specific
              information such as lifecycle events or process ancestry.

              '
            expected_event_types:
              - access
              - change
              - end
              - info
              - start

          - name: web
            description: 'Relating to web server access. Use this category to create
              a dashboard of web server/proxy activity from apache, IIS, nginx web
              servers, etc. Note: events from network observers such as Zeek http
              log may also be included in this category.

              '
            expected_event_types:
              - access
              - error
              - info

      - name: id
        type: keyword
        description: Unique ID to describe the event.
        example: 8a4f500d

      - name: kind
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the highest level in the ECS category hierarchy.

          `event.kind` gives high-level information about what type of information
          the event contains, without being specific to the contents of the event.
          For example, values of this field distinguish alert events from metric events.

          The value of this field can be used to inform how these kinds of events
          should be handled. They may warrant different retention, different access
          control, it may also help understand whether the data coming in at a regular
          interval or not.'
        example: alert
        allowed_values:

          - name: alert
            description: 'This value indicates an event that describes an alert or
              notable event, triggered by a detection rule.

              `event.kind:alert` is often populated for events coming from firewalls,
              intrusion detection systems, endpoint detection and response systems,
              and so on.

              '

          - name: event
            description: 'This value is the most general and most common value for
              this field. It is used to represent events that indicate that something
              happened.

              '

          - name: metric
            description: 'This value is used to indicate that this event describes
              a numeric measurement taken at given point in time.

              Examples include CPU utilization, memory usage, or device temperature.

              Metric events are often collected on a predictable frequency, such as
              once every few seconds, or once a minute, but can also be used to describe
              ad-hoc numeric metric queries.

              '

          - name: state
            description: 'The state value is similar to metric, indicating that this
              event describes a measurement taken at given point in time, except that
              the measurement does not result in a numeric value, but rather one of
              a fixed set of categorical values that represent conditions or states.

              Examples include periodic events reporting Elasticsearch cluster state
              (green/yellow/red), the state of a TCP connection (open, closed, fin_wait,
              etc.), the state of a host with respect to a software vulnerability
              (vulnerable, not vulnerable), and the state of a system regarding compliance
              with a regulatory standard (compliant, not compliant).

              Note that an event that describes a change of state would not use `event.kind:state`,
              but instead would use ''event.kind:event'' since a state change fits
              the more general event definition of something that happened.

              State events are often collected on a predictable frequency, such as
              once every few seconds, once a minute, once an hour, or once a day,
              but can also be used to describe ad-hoc state queries.

              '

          - name: pipeline_error
            description: 'This value indicates that an error occurred during the ingestion
              of this event, and that event data may be missing, inconsistent, or
              incorrect. `event.kind:pipeline_error` is often associated with parsing
              errors.

              '

          - name: signal
            description: 'This value is used by the Elastic SIEM app to denote an
              Elasticsearch document that was created by a SIEM detection engine rule.

              A signal will typically trigger a notification that something meaningful
              happened and should be investigated.

              Usage of this value is reserved, and pipelines should not populate `event.kind`
              with the value "signal".

              '

      - name: module
        type: keyword
        description: 'Name of the module this data is coming from.

          If your monitoring agent supports the concept of modules or plugins to process
          events of a given source (e.g. Apache logs), `event.module` should contain
          the name of this module.'
        example: apache

      - name: outcome
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the lowest level in the ECS category hierarchy.

          `event.outcome` simply denotes whether the event represents a success or
          a failure from the perspective of the entity that produced the event.

          Note that when a single transaction is described in multiple events, each
          event may populate different values of `event.outcome`, according to their
          perspective.

          Also note that in the case of a compound event (a single event that contains
          multiple logical events), this field should be populated with the value
          that best captures the overall success or failure from the perspective of
          the event producer.

          Further note that not all events will have an associated outcome. For example,
          this field is generally not populated for metric events, events with `event.type:info`,
          or any events for which an outcome does not make logical sense.'
        example: success
        allowed_values:

          - name: failure
            description: 'Indicates that this event describes a failed result. A common
              example is `event.category:file AND event.type:access AND event.outcome:failure`
              to indicate that a file access was attempted, but was not successful.

              '

          - name: success
            description: 'Indicates that this event describes a successful result.
              A common example is `event.category:file AND event.type:create AND event.outcome:success`
              to indicate that a file was successfully created.

              '

          - name: unknown
            description: 'Indicates that this event describes only an attempt for
              which the result is unknown from the perspective of the event producer.
              For example, if the event contains information only about the request
              side of a transaction that results in a response, populating `event.outcome:unknown`
              in the request event is appropriate. The unknown value should not be
              used when an outcome doesn''t make logical sense for the event. In such
              cases `event.outcome` should not be populated.

              '

      - name: type
        type: keyword
        description: 'This is one of four ECS Categorization Fields, and indicates
          the third level in the ECS category hierarchy.

          `event.type` represents a categorization "sub-bucket" that, when used along
          with the `event.category` field values, enables filtering events down to
          a level appropriate for single visualization.

          This field is an array. This will allow proper categorization of some events
          that fall in multiple event types.'
        allowed_values:

          - name: access
            description: 'The access event type is used for the subset of events within
              a category that indicate that something was accessed. Common examples
              include `event.category:database AND event.type:access`, or `event.category:file
              AND event.type:access`. Note for file access, both directory listings
              and file opens should be included in this subcategory. You can further
              distinguish access operations using the ECS `event.action` field.

              '

          - name: admin
            description: 'The admin event type is used for the subset of events within
              a category that are related to admin objects. For example, administrative
              changes within an IAM framework that do not specifically affect a user
              or group (e.g., adding new applications to a federation solution or
              connecting discrete forests in Active Directory) would fall into this
              subcategory. Common example: `event.category:iam AND event.type:change
              AND event.type:admin`. You can further distinguish admin operations
              using the ECS `event.action` field.

              '

          - name: allowed
            description: 'The allowed event type is used for the subset of events
              within a category that indicate that something was allowed. Common examples
              include `event.category:network AND event.type:connection AND event.type:allowed`
              (to indicate a network firewall event for which the firewall disposition
              was to allow the connection to complete) and `event.category:intrusion_detection
              AND event.type:allowed` (to indicate a network intrusion prevention
              system event for which the IPS disposition was to allow the connection
              to complete). You can further distinguish allowed operations using the
              ECS `event.action` field, populating with values of your choosing, such
              as "allow", "detect", or "pass".

              '

          - name: change
            description: 'The change event type is used for the subset of events within
              a category that indicate that something has changed. If semantics best
              describe an event as modified, then include them in this subcategory.
              Common examples include `event.category:process AND event.type:change`,
              and `event.category:file AND event.type:change`. You can further distinguish
              change operations using the ECS `event.action` field.

              '

          - name: connection
            description: 'Used primarily with `event.category:network` this value
              is used for the subset of network traffic that includes sufficient information
              for the event to be included in flow or connection analysis. Events
              in this subcategory will contain at least source and destination IP
              addresses, source and destination TCP/UDP ports, and will usually contain
              counts of bytes and/or packets transferred. Events in this subcategory
              may contain unidirectional or bidirectional information, including summary
              information. Use this subcategory to visualize and analyze network connections.
              Flow analysis, including Netflow, IPFIX, and other flow-related events
              fit in this subcategory. Note that firewall events from many Next-Generation
              Firewall (NGFW) devices will also fit into this subcategory.  A common
              filter for flow/connection information would be `event.category:network
              AND event.type:connection AND event.type:end` (to view or analyze all
              completed network connections, ignoring mid-flow reports). You can further
              distinguish connection events using the ECS `event.action` field, populating
              with values of your choosing, such as "timeout", or "reset".

              '

          - name: creation
            description: 'The "creation" event type is used for the subset of events
              within a category that indicate that something was created. A common
              example is `event.category:file AND event.type:creation`.

              '

          - name: deletion
            description: 'The deletion event type is used for the subset of events
              within a category that indicate that something was deleted. A common
              example is `event.category:file AND event.type:deletion` to indicate
              that a file has been deleted.

              '

          - name: denied
            description: 'The denied event type is used for the subset of events within
              a category that indicate that something was denied. Common examples
              include `event.category:network AND event.type:denied` (to indicate
              a network firewall event for which the firewall disposition was to deny
              the connection) and `event.category:intrusion_detection AND event.type:denied`
              (to indicate a network intrusion prevention system event for which the
              IPS disposition was to deny the connection to complete). You can further
              distinguish denied operations using the ECS `event.action` field, populating
              with values of your choosing, such as "blocked", "dropped", or "quarantined".

              '

          - name: end
            description: 'The end event type is used for the subset of events within
              a category that indicate something has ended. A common example is `event.category:process
              AND event.type:end`.

              '

          - name: error
            description: 'The error event type is used for the subset of events within
              a category that indicate or describe an error. A common example is `event.category:database
              AND event.type:error`. Note that pipeline errors that occur during the
              event ingestion process should not use this `event.type` value. Instead,
              they should use `event.kind:pipeline_error`.

              '

          - name: group
            description: 'The group event type is used for the subset of events within
              a category that are related to group objects. Common example: `event.category:iam
              AND event.type:creation AND event.type:group`. You can further distinguish
              group operations using the ECS `event.action` field.

              '

          - name: info
            description: 'The info event type is used for the subset of events within
              a category that indicate that they are purely informational, and don''t
              report a state change, or any type of action. For example, an initial
              run of a file integrity monitoring system (FIM), where an agent reports
              all files under management, would fall into the "info" subcategory.
              Similarly, an event containing a dump of all currently running processes
              (as opposed to reporting that a process started/ended) would fall into
              the "info" subcategory. An additional common examples is `event.category:intrusion_detection
              AND event.type:info`.

              '

          - name: installation
            description: 'The installation event type is used for the subset of events
              within a category that indicate that something was installed. A common
              example is `event.category:package` AND `event.type:installation`.

              '

          - name: protocol
            description: 'The protocol event type is used for the subset of events
              within a category that indicate that they contain protocol details or
              analysis, beyond simply identifying the protocol. Generally, network
              events that contain specific protocol details will fall into this subcategory.
              A common example is `event.category:network AND event.type:protocol
              AND event.type:connection AND event.type:end` (to indicate that the
              event is a network connection event sent at the end of a connection
              that also includes a protocol detail breakdown). Note that events that
              only indicate the name or id of the protocol should not use the protocol
              value. Further note that when the protocol subcategory is used, the
              identified protocol is populated in the ECS `network.protocol` field.

              '
            expected_event_types:
              - access
              - change
              - end
              - info
              - start

          - name: start
            description: 'The start event type is used for the subset of events within
              a category that indicate something has started. A common example is
              `event.category:process AND event.type:start`.

              '

          - name: user
            description: 'The user event type is used for the subset of events within
              a category that are related to user objects. Common example: `event.category:iam
              AND event.type:deletion AND event.type:user`. You can further distinguish
              user operations using the ECS `event.action` field.

              '

  - name: group
    description: The group fields are meant to represent groups that are relevant
      to the event.
    fields:

      - name: Ext
        description: Object for all custom defined fields to live in.
        fields:

          - name: real
            description: Group info prior to any setgid operations.
            fields:

              - name: id
                type: keyword
                description: Unique identifier for the group on the system/platform.

              - name: name
                type: keyword
                description: Name of the group.

      - name: id
        type: keyword
        description: Unique identifier for the group on the system/platform.

      - name: name
        type: keyword
        description: Name of the group.

  - name: host
    description: 'A host is defined as a general computing instance.

      ECS host.* fields should be populated with details about the host on which the
      event happened, or from which the measurement was taken. Host types include
      hardware, virtual machines, Docker containers, and Kubernetes nodes.'
    fields:

      - name: geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        fields:

          - name: city_name
            type: keyword
            description: City name.
            example: Montreal

          - name: continent_name
            type: keyword
            description: Name of the continent.
            example: North America

          - name: country_iso_code
            type: keyword
            description: Country ISO code.
            example: CA

          - name: country_name
            type: keyword
            description: Country name.
            example: Canada

          - name: location
            type: geo_point
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'

          - name: region_iso_code
            type: keyword
            description: Region ISO code.
            example: CA-QC

          - name: region_name
            type: keyword
            description: Region name.
            example: Quebec

      - name: hostname
        type: keyword
        description: 'Hostname of the host.

          It normally contains what the `hostname` command returns on the host machine.'

      - name: ip
        type: ip
        description: Host ip addresses.

      - name: name
        type: keyword
        description: 'Name of the host.

          It can contain what `hostname` returns on Unix systems, the fully qualified
          domain name, or a name specified by the user. The sender decides which value
          to use.'

      - name: os
        description: The OS fields contain information about the operating system.
        fields:

          - name: name
            type: keyword
            description: Operating system name, without the version.
            example: Mac OS X

          - name: platform
            type: keyword
            description: Operating system platform (such centos, ubuntu, windows).
            example: darwin

          - name: version
            type: keyword
            description: Operating system version as a raw string.
            example: 10.14.1

  - name: http
    description: Fields related to HTTP activity. Use the `url` field set to store
      the url of the request.
    fields:

      - name: request
        description: TODO
        fields:

          - name: body
            description: TODO
            fields:

              - name: bytes
                type: long
                description: Size in bytes of the request body.
                example: 887

              - name: content
                type: keyword
                description: The full HTTP request body.
                example: Hello world

          - name: bytes
            type: long
            description: Total size in bytes of the request (body and headers).
            example: 1437

      - name: response
        description: TODO
        fields:

          - name: Ext
            description: Object for all custom defined fields to live in.
            fields:

              - name: version
                type: keyword
                description: HTTP version

          - name: body
            description: TODO
            fields:

              - name: bytes
                type: long
                description: Size in bytes of the response body.
                example: 887

              - name: content
                type: keyword
                description: The full HTTP response body.
                example: Hello world

          - name: bytes
            type: long
            description: Total size in bytes of the response (body and headers).
            example: 1437

          - name: status_code
            type: long
            description: HTTP response status code.
            example: 404

  - name: network
    description: 'The network is defined as the communication path over which a host
      or network event happens.

      The network.* fields should be populated with details about the network activity
      associated with an event.'
    fields:

      - name: bytes
        type: long
        description: 'Total bytes transferred in both directions.

          If `source.bytes` and `destination.bytes` are known, `network.bytes` is
          their sum.'
        example: 368

      - name: community_id
        type: keyword
        description: 'A hash of source and destination IPs and ports, as well as the
          protocol used in a communication. This is a tool-agnostic standard to identify
          flows.

          Learn more at https://github.com/corelight/community-id-spec.'
        example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=

      - name: direction
        type: keyword
        description: "Direction of the network traffic.\nRecommended values are:\n\
          \  * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\n\
          When mapping events from a host-based monitoring context, populate this\
          \ field from the host's point of view.\nWhen mapping events from a network\
          \ or perimeter-based monitoring context, populate this field from the point\
          \ of view of your network perimeter."
        example: inbound

      - name: iana_number
        type: keyword
        description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
          Standardized list of protocols. This aligns well with NetFlow and sFlow
          related logs which use the IANA Protocol Number.
        example: 6

      - name: packets
        type: long
        description: 'Total packets transferred in both directions.

          If `source.packets` and `destination.packets` are known, `network.packets`
          is their sum.'
        example: 24

      - name: protocol
        type: keyword
        description: 'L7 Network protocol name. ex. http, lumberjack, transport protocol.

          The field value must be normalized to lowercase for querying. See the documentation
          section "Implementing ECS".'
        example: http

      - name: transport
        type: keyword
        description: 'Same as network.iana_number, but instead using the Keyword name
          of the transport layer (udp, tcp, ipv6-icmp, etc.)

          The field value must be normalized to lowercase for querying. See the documentation
          section "Implementing ECS".'
        example: tcp

      - name: type
        type: keyword
        description: 'In the OSI Model this would be the Network Layer. ipv4, ipv6,
          ipsec, pim, etc

          The field value must be normalized to lowercase for querying. See the documentation
          section "Implementing ECS".'
        example: ipv4

  - name: process
    description: 'These fields contain information about a process.

      These fields can help you correlate metrics information with a process id/name
      from a log message.  The `process.pid` often stays in the metric itself and
      is copied to the global field for correlation.'
    fields:

      - name: Ext
        description: Object for all custom defined fields to live in.
        fields:

          - name: ancestry
            type: keyword
            description: An array of entity_ids indicating the ancestors for this
              event

      - name: entity_id
        type: keyword
        description: 'Unique identifier for the process.

          The implementation of this is specified by the data source, but some examples
          of what could be used here are a process-generated UUID, Sysmon Process
          GUIDs, or a hash of some uniquely identifying components of a process.

          Constructing a globally unique identifier is a common practice to mitigate
          PID reuse as well as to identify a specific process over time, across multiple
          monitored hosts.'
        example: c2c455d9f99375d

      - name: executable
        type: keyword
        description: Absolute path to the process executable.
        example: /usr/bin/ssh

      - name: name
        type: keyword
        description: 'Process name.

          Sometimes called program name or similar.'
        example: ssh

      - name: pid
        type: long
        description: Process id.
        example: 4242

      - name: thread
        description: TODO
        fields:

          - name: id
            type: long
            description: Thread ID.
            example: 4242

  - name: source
    description: 'Source fields describe details about the source of a packet/event.

      Source fields are usually populated in conjunction with destination fields.'
    fields:

      - name: address
        type: keyword
        description: 'Some event source addresses are defined ambiguously. The event
          will sometimes list an IP, a domain or a unix socket.  You should always
          store the raw address in the `.address` field.

          Then it should be duplicated to `.ip` or `.domain`, depending on which one
          it is.'

      - name: bytes
        type: long
        description: Bytes sent from the source to the destination.
        example: 184

      - name: domain
        type: keyword
        description: Source domain.

      - name: ip
        type: ip
        description: 'IP address of the source.

          Can be one or multiple IPv4 or IPv6 addresses.'

      - name: packets
        type: long
        description: Packets sent from the source to the destination.
        example: 12

      - name: port
        type: long
        description: Port of the source.

      - name: registered_domain
        type: keyword
        description: 'The highest registered source domain, stripped of the subdomain.

          For example, the registered domain for "foo.google.com" is "google.com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last two labels will not work well for TLDs such as "co.uk".'
        example: google.com

      - name: top_level_domain
        type: keyword
        description: 'The effective top level domain (eTLD), also known as the domain
          suffix, is the last part of the domain name. For example, the top level
          domain for google.com is "com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last label will not work well for effective TLDs such as "co.uk".'
        example: co.uk

  - name: user
    description: 'The user fields describe information about the user that is relevant
      to the event.

      Fields can have one entry or multiple entries. If a user has more than one id,
      provide an array that includes all of them.'
    fields:

      - name: Ext
        description: Object for all custom defined fields to live in.
        fields:

          - name: real
            description: User info prior to any setuid operations.
            fields:

              - name: id
                type: keyword
                description: One or multiple unique identifiers of the user.

              - name: name
                type: keyword
                description: Short name or login of the user.

      - name: domain
        type: keyword
        description: 'Name of the directory the user is a member of.

          For example, an LDAP or Active Directory domain name.'

      - name: id
        type: keyword
        description: Unique identifiers of the user.

      - name: name
        type: keyword
        description: Short name or login of the user.
        example: albert
