Endpoint:
  description: Fields describing the state of the Elastic Endpoint when an event occurs.
  fields:
    system:
      dashed_name: Endpoint-system
      description: System fields hold the endpoint and system's performance metrics
      flat_name: Endpoint.system
      level: custom
      name: system
      normalize: []
      object_type: keyword
      short: System fields hold the endpoint and system's performance metrics
      type: object
    system.cpu:
      dashed_name: Endpoint-system-cpu
      description: CPU statistics
      flat_name: Endpoint.system.cpu
      level: custom
      name: system.cpu
      normalize: []
      object_type: keyword
      short: CPU statistics
      type: object
    system.cpu.endpoint:
      dashed_name: Endpoint-system-cpu-endpoint
      description: CPU metrics for the endpoint
      flat_name: Endpoint.system.cpu.endpoint
      level: custom
      name: system.cpu.endpoint
      normalize: []
      object_type: keyword
      short: CPU metrics for the endpoint
      type: object
    system.cpu.endpoint.histogram:
      dashed_name: Endpoint-system-cpu-endpoint-histogram
      description: This field defines an elasticsearch histogram field (https://www.elastic.co/guide/en/elasticsearch/reference/current/histogram.html#histogram)
        The values field includes 20 buckets (each bucket is 5%) representing the
        cpu usage The counts field includes 20 buckets of how many times the endpoint's
        cpu usage fell into each bucket
      flat_name: Endpoint.system.cpu.endpoint.histogram
      level: custom
      name: system.cpu.endpoint.histogram
      normalize: []
      short: This field defines an elasticsearch histogram field (https://www.elastic.co/guide/en/elasticsearch/reference/current/histogram.html#histogram)
        The values field includes 20 buckets (each bucket is 5%) representing the
        cpu usage The counts field includes 20 buckets of how many times the endpoint's
        cpu usage fell into each bucket
      type: histogram
    system.cpu.endpoint.latest:
      dashed_name: Endpoint-system-cpu-endpoint-latest
      description: Average CPU over the last sample interval
      flat_name: Endpoint.system.cpu.endpoint.latest
      level: custom
      name: system.cpu.endpoint.latest
      normalize: []
      short: Average CPU over the last sample interval
      type: half_float
    system.cpu.endpoint.mean:
      dashed_name: Endpoint-system-cpu-endpoint-mean
      description: Average CPU load used by the endpoint
      flat_name: Endpoint.system.cpu.endpoint.mean
      level: custom
      name: system.cpu.endpoint.mean
      normalize: []
      short: Average CPU load used by the endpoint
      type: half_float
    system.disks:
      dashed_name: Endpoint-system-disks
      description: An array of disk information for the host
      flat_name: Endpoint.system.disks
      level: custom
      name: system.disks
      normalize: []
      short: An array of disk information for the host
      type: nested
    system.disks.free:
      dashed_name: Endpoint-system-disks-free
      description: The number of bytes marked as free on the disk
      flat_name: Endpoint.system.disks.free
      level: custom
      name: system.disks.free
      normalize: []
      short: The number of bytes marked as free on the disk
      type: long
    system.disks.mount:
      dashed_name: Endpoint-system-disks-mount
      description: The disks mount location
      flat_name: Endpoint.system.disks.mount
      ignore_above: 1024
      level: custom
      name: system.disks.mount
      normalize: []
      short: The disks mount location
      type: keyword
    system.disks.total:
      dashed_name: Endpoint-system-disks-total
      description: The size of the disk in bytes
      flat_name: Endpoint.system.disks.total
      level: custom
      name: system.disks.total
      normalize: []
      short: The size of the disk in bytes
      type: long
    system.memory:
      dashed_name: Endpoint-system-memory
      description: Memory statistics
      flat_name: Endpoint.system.memory
      level: custom
      name: system.memory
      normalize: []
      object_type: keyword
      short: Memory statistics
      type: object
    system.memory.endpoint:
      dashed_name: Endpoint-system-memory-endpoint
      description: Endpoint memory utilization
      flat_name: Endpoint.system.memory.endpoint
      level: custom
      name: system.memory.endpoint
      normalize: []
      object_type: keyword
      short: Endpoint memory utilization
      type: object
    system.memory.endpoint.private:
      dashed_name: Endpoint-system-memory-endpoint-private
      description: The memory private to the endpoint
      flat_name: Endpoint.system.memory.endpoint.private
      level: custom
      name: system.memory.endpoint.private
      normalize: []
      object_type: keyword
      short: The memory private to the endpoint
      type: object
    system.memory.endpoint.private.latest:
      dashed_name: Endpoint-system-memory-endpoint-private-latest
      description: The memory usage by the endpoint for the last sample interval
      flat_name: Endpoint.system.memory.endpoint.private.latest
      level: custom
      name: system.memory.endpoint.private.latest
      normalize: []
      short: The memory usage by the endpoint for the last sample interval
      type: long
    system.memory.endpoint.private.mean:
      dashed_name: Endpoint-system-memory-endpoint-private-mean
      description: Average memory usage by the endpoint since its start
      flat_name: Endpoint.system.memory.endpoint.private.mean
      level: custom
      name: system.memory.endpoint.private.mean
      normalize: []
      short: Average memory usage by the endpoint since its start
      type: long
    system.threads:
      dashed_name: Endpoint-system-threads
      description: Statistics about the individual threads of the system (array)
      enabled: false
      flat_name: Endpoint.system.threads
      level: custom
      name: system.threads
      normalize: []
      object_type: keyword
      short: Statistics about the individual threads of the system (array)
      type: object
    system.uptime:
      dashed_name: Endpoint-system-uptime
      description: Number of seconds since boot
      flat_name: Endpoint.system.uptime
      level: custom
      name: system.uptime
      normalize: []
      object_type: keyword
      short: Number of seconds since boot
      type: object
    system.uptime.endpoint:
      dashed_name: Endpoint-system-uptime-endpoint
      description: Number of seconds since the endpoint was started
      flat_name: Endpoint.system.uptime.endpoint
      level: custom
      name: system.uptime.endpoint
      normalize: []
      short: Number of seconds since the endpoint was started
      type: long
    system.uptime.system:
      dashed_name: Endpoint-system-uptime-system
      description: Number of seconds since the system was started
      flat_name: Endpoint.system.uptime.system
      level: custom
      name: system.uptime.system
      normalize: []
      short: Number of seconds since the system was started
      type: long
  group: 2
  name: Endpoint
  prefix: Endpoint.
  short: Fields describing the state of the Elastic Endpoint when an event occurs.
  title: Endpoint
  type: group
base:
  description: The `base` field set contains all fields which are on the top level.
    These fields are common across all types of events.
  fields:
    '@timestamp':
      dashed_name: '@timestamp'
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      normalize: []
      required: true
      short: Date/time when the event originated.
      type: date
    message:
      dashed_name: message
      description: 'For log events the message field contains the log message, optimized
        for viewing in a log viewer.

        For structured logs without an original message field, other fields can be
        concatenated to form a human-readable summary of the event.

        If multiple messages exist, they can be combined into one message.'
      example: Hello World
      flat_name: message
      level: core
      name: message
      normalize: []
      norms: false
      short: Log message optimized for viewing in a log viewer.
      type: text
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the top level
  title: Base
  type: group
ecs:
  description: Meta-information specific to ECS.
  fields:
    version:
      dashed_name: ecs-version
      description: 'ECS version this event conforms to. `ecs.version` is a required
        field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different
        ECS versions -- this field lets integrations adjust to the schema version
        of the events.'
      example: 1.0.0
      flat_name: ecs.version
      ignore_above: 1024
      level: core
      name: version
      normalize: []
      required: true
      short: ECS version this event conforms to.
      type: keyword
  group: 2
  name: ecs
  prefix: ecs.
  short: Meta-information specific to ECS.
  title: ECS
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    measurements and the time at which the measurement was taken. Examples of metric
    events include memory pressure measured on a host and device temperature. See
    the `event.kind` definition in this section for additional details about metric
    and state events.'
  fields:
    action:
      dashed_name: event-action
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`.
        Examples are `group-add`, `process-started`, `file-created`. The value is
        normally defined by the implementer.'
      example: user-password-change
      flat_name: event.action
      ignore_above: 1024
      level: core
      name: action
      normalize: []
      short: The action captured by the event.
      type: keyword
    category:
      allowed_values:
      - description: 'Events in this category are related to the challenge and response
          process in which credentials are supplied and verified to allow the creation
          of a session. Common sources for these logs are Windows event logs and ssh
          logs. Visualize and analyze events in this category to look for failed logins,
          and other authentication-related activity.

          '
        expected_event_types:
        - start
        - end
        - info
        name: authentication
      - description: 'The database category denotes events and metrics relating to
          a data storage and retrieval system. Note that use of this category is not
          limited to relational database systems. Examples include event logs from
          MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to visualize
          and analyze database activity such as accesses and changes.

          '
        expected_event_types:
        - access
        - change
        - info
        - error
        name: database
      - description: 'Events in the driver category have to do with operating system
          device drivers and similar software entities such as Windows drivers, kernel
          extensions, kernel modules, etc.

          Use events and metrics in this category to visualize and analyze driver-related
          activity and status on hosts.

          '
        expected_event_types:
        - change
        - end
        - info
        - start
        name: driver
      - description: 'Relating to a set of information that has been created on, or
          has existed on a filesystem. Use this category of events to visualize and
          analyze the creation, access, and deletions of files. Events in this category
          can come from both host-based and network-based sources. An example source
          of a network-based detection of a file transfer would be the Zeek file.log.

          '
        expected_event_types:
        - change
        - creation
        - deletion
        - info
        name: file
      - description: 'Use this category to visualize and analyze information such
          as host inventory or host lifecycle events.

          Most of the events in this category can usually be observed from the outside,
          such as from a hypervisor or a control plane''s point of view. Some can
          also be seen from within, such as "start" or "end".

          Note that this category is for information about hosts themselves; it is
          not meant to capture activity "happening on a host".

          '
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: host
      - description: 'Identity and access management (IAM) events relating to users,
          groups, and administration. Use this category to visualize and analyze IAM-related
          logs and data from active directory, LDAP, Okta, Duo, and other IAM systems.

          '
        expected_event_types:
        - admin
        - change
        - creation
        - deletion
        - group
        - info
        - user
        name: iam
      - description: 'Relating to intrusion detections from IDS/IPS systems and functions,
          both network and host-based. Use this category to visualize and analyze
          intrusion detection alerts from systems such as Snort, Suricata, and Palo
          Alto threat detections.

          '
        expected_event_types:
        - allowed
        - denied
        - info
        name: intrusion_detection
      - description: 'Malware detection events and alerts. Use this category to visualize
          and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
          Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS
          systems such as Suricata, or other sources of malware-related events such
          as Palo Alto Networks threat logs and Wildfire logs.

          '
        expected_event_types:
        - info
        name: malware
      - description: 'Relating to all network activity, including network connection
          lifecycle, network traffic, and essentially any event that includes an IP
          address. Many events containing decoded network protocol transactions fit
          into this category. Use events in this category to visualize or analyze
          counts of network ports, protocols, addresses, geolocation information,
          etc.

          '
        expected_event_types:
        - access
        - allowed
        - connection
        - denied
        - end
        - info
        - protocol
        - start
        name: network
      - description: 'Relating to software packages installed on hosts. Use this category
          to visualize and analyze inventory of software installed on various hosts,
          or to determine host vulnerability in the absence of vulnerability scan
          data.

          '
        expected_event_types:
        - access
        - change
        - deletion
        - info
        - installation
        - start
        name: package
      - description: 'Use this category of events to visualize and analyze process-specific
          information such as lifecycle events or process ancestry.

          '
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: process
      - description: 'Relating to web server access. Use this category to create a
          dashboard of web server/proxy activity from apache, IIS, nginx web servers,
          etc. Note: events from network observers such as Zeek http log may also
          be included in this category.

          '
        expected_event_types:
        - access
        - error
        - info
        name: web
      dashed_name: event-category
      description: 'This is one of four ECS Categorization Fields, and indicates the
        second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example,
        filtering on `event.category:process` yields all events relating to process
        activity. This field is closely related to `event.type`, which is used as
        a subcategory.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple categories.'
      example: authentication
      flat_name: event.category
      ignore_above: 1024
      level: core
      name: category
      normalize:
      - array
      short: Event category. The second categorization field in the hierarchy.
      type: keyword
    created:
      dashed_name: event-created
      description: 'event.created contains the date/time when the event was first
        read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain
        the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference
        can be used to calculate the delay between your source generating an event,
        and the time when your agent first processed it. This can be used to monitor
        your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      example: '2016-05-23T08:05:34.857Z'
      flat_name: event.created
      level: core
      name: created
      normalize: []
      short: Time when the event was first read by an agent or by your pipeline.
      type: date
    end:
      dashed_name: event-end
      description: event.end contains the date when the event ended or when the activity
        was last observed.
      flat_name: event.end
      level: extended
      name: end
      normalize: []
      short: event.end contains the date when the event ended or when the activity
        was last observed.
      type: date
    id:
      dashed_name: event-id
      description: Unique ID to describe the event.
      example: 8a4f500d
      flat_name: event.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      short: Unique ID to describe the event.
      type: keyword
    kind:
      allowed_values:
      - description: 'This value indicates an event that describes an alert or notable
          event, triggered by a detection rule.

          `event.kind:alert` is often populated for events coming from firewalls,
          intrusion detection systems, endpoint detection and response systems, and
          so on.

          '
        name: alert
      - description: 'This value is the most general and most common value for this
          field. It is used to represent events that indicate that something happened.

          '
        name: event
      - description: 'This value is used to indicate that this event describes a numeric
          measurement taken at given point in time.

          Examples include CPU utilization, memory usage, or device temperature.

          Metric events are often collected on a predictable frequency, such as once
          every few seconds, or once a minute, but can also be used to describe ad-hoc
          numeric metric queries.

          '
        name: metric
      - description: 'The state value is similar to metric, indicating that this event
          describes a measurement taken at given point in time, except that the measurement
          does not result in a numeric value, but rather one of a fixed set of categorical
          values that represent conditions or states.

          Examples include periodic events reporting Elasticsearch cluster state (green/yellow/red),
          the state of a TCP connection (open, closed, fin_wait, etc.), the state
          of a host with respect to a software vulnerability (vulnerable, not vulnerable),
          and the state of a system regarding compliance with a regulatory standard
          (compliant, not compliant).

          Note that an event that describes a change of state would not use `event.kind:state`,
          but instead would use ''event.kind:event'' since a state change fits the
          more general event definition of something that happened.

          State events are often collected on a predictable frequency, such as once
          every few seconds, once a minute, once an hour, or once a day, but can also
          be used to describe ad-hoc state queries.

          '
        name: state
      - description: 'This value indicates that an error occurred during the ingestion
          of this event, and that event data may be missing, inconsistent, or incorrect.
          `event.kind:pipeline_error` is often associated with parsing errors.

          '
        name: pipeline_error
      - description: 'This value is used by the Elastic SIEM app to denote an Elasticsearch
          document that was created by a SIEM detection engine rule.

          A signal will typically trigger a notification that something meaningful
          happened and should be investigated.

          Usage of this value is reserved, and pipelines should not populate `event.kind`
          with the value "signal".

          '
        name: signal
      dashed_name: event-kind
      description: 'This is one of four ECS Categorization Fields, and indicates the
        highest level in the ECS category hierarchy.

        `event.kind` gives high-level information about what type of information the
        event contains, without being specific to the contents of the event. For example,
        values of this field distinguish alert events from metric events.

        The value of this field can be used to inform how these kinds of events should
        be handled. They may warrant different retention, different access control,
        it may also help understand whether the data coming in at a regular interval
        or not.'
      example: alert
      flat_name: event.kind
      ignore_above: 1024
      level: core
      name: kind
      normalize: []
      short: The kind of the event. The highest categorization field in the hierarchy.
      type: keyword
    module:
      dashed_name: event-module
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process
        events of a given source (e.g. Apache logs), `event.module` should contain
        the name of this module.'
      example: apache
      flat_name: event.module
      ignore_above: 1024
      level: core
      name: module
      normalize: []
      short: Name of the module this data is coming from.
      type: keyword
    start:
      dashed_name: event-start
      description: event.start contains the date when the event started or when the
        activity was first observed.
      flat_name: event.start
      level: extended
      name: start
      normalize: []
      short: event.start contains the date when the event started or when the activity
        was first observed.
      type: date
    type:
      allowed_values:
      - description: 'The access event type is used for the subset of events within
          a category that indicate that something was accessed. Common examples include
          `event.category:database AND event.type:access`, or `event.category:file
          AND event.type:access`. Note for file access, both directory listings and
          file opens should be included in this subcategory. You can further distinguish
          access operations using the ECS `event.action` field.

          '
        name: access
      - description: 'The admin event type is used for the subset of events within
          a category that are related to admin objects. For example, administrative
          changes within an IAM framework that do not specifically affect a user or
          group (e.g., adding new applications to a federation solution or connecting
          discrete forests in Active Directory) would fall into this subcategory.
          Common example: `event.category:iam AND event.type:change AND event.type:admin`.
          You can further distinguish admin operations using the ECS `event.action`
          field.

          '
        name: admin
      - description: 'The allowed event type is used for the subset of events within
          a category that indicate that something was allowed. Common examples include
          `event.category:network AND event.type:connection AND event.type:allowed`
          (to indicate a network firewall event for which the firewall disposition
          was to allow the connection to complete) and `event.category:intrusion_detection
          AND event.type:allowed` (to indicate a network intrusion prevention system
          event for which the IPS disposition was to allow the connection to complete).
          You can further distinguish allowed operations using the ECS `event.action`
          field, populating with values of your choosing, such as "allow", "detect",
          or "pass".

          '
        name: allowed
      - description: 'The change event type is used for the subset of events within
          a category that indicate that something has changed. If semantics best describe
          an event as modified, then include them in this subcategory. Common examples
          include `event.category:process AND event.type:change`, and `event.category:file
          AND event.type:change`. You can further distinguish change operations using
          the ECS `event.action` field.

          '
        name: change
      - description: 'Used primarily with `event.category:network` this value is used
          for the subset of network traffic that includes sufficient information for
          the event to be included in flow or connection analysis. Events in this
          subcategory will contain at least source and destination IP addresses, source
          and destination TCP/UDP ports, and will usually contain counts of bytes
          and/or packets transferred. Events in this subcategory may contain unidirectional
          or bidirectional information, including summary information. Use this subcategory
          to visualize and analyze network connections. Flow analysis, including Netflow,
          IPFIX, and other flow-related events fit in this subcategory. Note that
          firewall events from many Next-Generation Firewall (NGFW) devices will also
          fit into this subcategory.  A common filter for flow/connection information
          would be `event.category:network AND event.type:connection AND event.type:end`
          (to view or analyze all completed network connections, ignoring mid-flow
          reports). You can further distinguish connection events using the ECS `event.action`
          field, populating with values of your choosing, such as "timeout", or "reset".

          '
        name: connection
      - description: 'The "creation" event type is used for the subset of events within
          a category that indicate that something was created. A common example is
          `event.category:file AND event.type:creation`.

          '
        name: creation
      - description: 'The deletion event type is used for the subset of events within
          a category that indicate that something was deleted. A common example is
          `event.category:file AND event.type:deletion` to indicate that a file has
          been deleted.

          '
        name: deletion
      - description: 'The denied event type is used for the subset of events within
          a category that indicate that something was denied. Common examples include
          `event.category:network AND event.type:denied` (to indicate a network firewall
          event for which the firewall disposition was to deny the connection) and
          `event.category:intrusion_detection AND event.type:denied` (to indicate
          a network intrusion prevention system event for which the IPS disposition
          was to deny the connection to complete). You can further distinguish denied
          operations using the ECS `event.action` field, populating with values of
          your choosing, such as "blocked", "dropped", or "quarantined".

          '
        name: denied
      - description: 'The end event type is used for the subset of events within a
          category that indicate something has ended. A common example is `event.category:process
          AND event.type:end`.

          '
        name: end
      - description: 'The error event type is used for the subset of events within
          a category that indicate or describe an error. A common example is `event.category:database
          AND event.type:error`. Note that pipeline errors that occur during the event
          ingestion process should not use this `event.type` value. Instead, they
          should use `event.kind:pipeline_error`.

          '
        name: error
      - description: 'The group event type is used for the subset of events within
          a category that are related to group objects. Common example: `event.category:iam
          AND event.type:creation AND event.type:group`. You can further distinguish
          group operations using the ECS `event.action` field.

          '
        name: group
      - description: 'The info event type is used for the subset of events within
          a category that indicate that they are purely informational, and don''t
          report a state change, or any type of action. For example, an initial run
          of a file integrity monitoring system (FIM), where an agent reports all
          files under management, would fall into the "info" subcategory. Similarly,
          an event containing a dump of all currently running processes (as opposed
          to reporting that a process started/ended) would fall into the "info" subcategory.
          An additional common examples is `event.category:intrusion_detection AND
          event.type:info`.

          '
        name: info
      - description: 'The installation event type is used for the subset of events
          within a category that indicate that something was installed. A common example
          is `event.category:package` AND `event.type:installation`.

          '
        name: installation
      - description: 'The protocol event type is used for the subset of events within
          a category that indicate that they contain protocol details or analysis,
          beyond simply identifying the protocol. Generally, network events that contain
          specific protocol details will fall into this subcategory. A common example
          is `event.category:network AND event.type:protocol AND event.type:connection
          AND event.type:end` (to indicate that the event is a network connection
          event sent at the end of a connection that also includes a protocol detail
          breakdown). Note that events that only indicate the name or id of the protocol
          should not use the protocol value. Further note that when the protocol subcategory
          is used, the identified protocol is populated in the ECS `network.protocol`
          field.

          '
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: protocol
      - description: 'The start event type is used for the subset of events within
          a category that indicate something has started. A common example is `event.category:process
          AND event.type:start`.

          '
        name: start
      - description: 'The user event type is used for the subset of events within
          a category that are related to user objects. Common example: `event.category:iam
          AND event.type:deletion AND event.type:user`. You can further distinguish
          user operations using the ECS `event.action` field.

          '
        name: user
      dashed_name: event-type
      description: 'This is one of four ECS Categorization Fields, and indicates the
        third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along
        with the `event.category` field values, enables filtering events down to a
        level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple event types.'
      flat_name: event.type
      ignore_above: 1024
      level: core
      name: type
      normalize:
      - array
      short: Event type. The third categorization field in the hierarchy.
      type: keyword
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    architecture:
      dashed_name: host-architecture
      description: Operating system architecture.
      example: x86_64
      flat_name: host.architecture
      ignore_above: 1024
      level: core
      name: architecture
      normalize: []
      short: Operating system architecture.
      type: keyword
    geo.city_name:
      dashed_name: host-geo-city-name
      description: City name.
      example: Montreal
      flat_name: host.geo.city_name
      ignore_above: 1024
      level: core
      name: city_name
      normalize: []
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      dashed_name: host-geo-continent-name
      description: Name of the continent.
      example: North America
      flat_name: host.geo.continent_name
      ignore_above: 1024
      level: core
      name: continent_name
      normalize: []
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      dashed_name: host-geo-country-iso-code
      description: Country ISO code.
      example: CA
      flat_name: host.geo.country_iso_code
      ignore_above: 1024
      level: core
      name: country_iso_code
      normalize: []
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      dashed_name: host-geo-country-name
      description: Country name.
      example: Canada
      flat_name: host.geo.country_name
      ignore_above: 1024
      level: core
      name: country_name
      normalize: []
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      dashed_name: host-geo-location
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: host.geo.location
      level: core
      name: location
      normalize: []
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.region_iso_code:
      dashed_name: host-geo-region-iso-code
      description: Region ISO code.
      example: CA-QC
      flat_name: host.geo.region_iso_code
      ignore_above: 1024
      level: core
      name: region_iso_code
      normalize: []
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      dashed_name: host-geo-region-name
      description: Region name.
      example: Quebec
      flat_name: host.geo.region_name
      ignore_above: 1024
      level: core
      name: region_name
      normalize: []
      original_fieldset: geo
      short: Region name.
      type: keyword
    hostname:
      dashed_name: host-hostname
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
      flat_name: host.hostname
      ignore_above: 1024
      level: core
      name: hostname
      normalize: []
      short: Hostname of the host.
      type: keyword
    id:
      dashed_name: host-id
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
      flat_name: host.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      short: Unique host id.
      type: keyword
    ip:
      dashed_name: host-ip
      description: Host ip addresses.
      flat_name: host.ip
      level: core
      name: ip
      normalize:
      - array
      short: Host ip addresses.
      type: ip
    mac:
      dashed_name: host-mac
      description: Host mac addresses.
      flat_name: host.mac
      ignore_above: 1024
      level: core
      name: mac
      normalize:
      - array
      short: Host mac addresses.
      type: keyword
    name:
      dashed_name: host-name
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      flat_name: host.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      short: Name of the host.
      type: keyword
    os.Ext:
      dashed_name: host-os-Ext
      description: Object for all custom defined fields to live in.
      flat_name: host.os.Ext
      level: custom
      name: Ext
      normalize: []
      object_type: keyword
      original_fieldset: os
      short: Object for all custom defined fields to live in.
      type: object
    os.Ext.variant:
      dashed_name: host-os-Ext-variant
      description: A string value or phrase that further aid to classify or qualify
        the operating system (OS).  For example the distribution for a Linux OS will
        be entered in this field.
      example: Ubuntu
      flat_name: host.os.Ext.variant
      ignore_above: 1024
      level: custom
      name: Ext.variant
      normalize: []
      original_fieldset: os
      short: A string value or phrase that further aid to classify or qualify the
        operating system (OS).  For example the distribution for a Linux OS will be
        entered in this field.
      type: keyword
    os.family:
      dashed_name: host-os-family
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
      flat_name: host.os.family
      ignore_above: 1024
      level: extended
      name: family
      normalize: []
      original_fieldset: os
      short: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    os.full:
      dashed_name: host-os-full
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: host.os.full
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.full.text
        name: text
        norms: false
        type: text
      name: full
      normalize: []
      original_fieldset: os
      short: Operating system name, including the version or code name.
      type: keyword
    os.kernel:
      dashed_name: host-os-kernel
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
      flat_name: host.os.kernel
      ignore_above: 1024
      level: extended
      name: kernel
      normalize: []
      original_fieldset: os
      short: Operating system kernel version as a raw string.
      type: keyword
    os.name:
      dashed_name: host-os-name
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: host.os.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.name.text
        name: text
        norms: false
        type: text
      name: name
      normalize: []
      original_fieldset: os
      short: Operating system name, without the version.
      type: keyword
    os.platform:
      dashed_name: host-os-platform
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
      flat_name: host.os.platform
      ignore_above: 1024
      level: extended
      name: platform
      normalize: []
      original_fieldset: os
      short: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    os.version:
      dashed_name: host-os-version
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: host.os.version
      ignore_above: 1024
      level: extended
      name: version
      normalize: []
      original_fieldset: os
      short: Operating system version as a raw string.
      type: keyword
  group: 2
  name: host
  nestings:
  - host.geo
  - host.os
  prefix: host.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
