'@timestamp':
  dashed_name: '@timestamp'
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  flat_name: '@timestamp'
  level: core
  name: '@timestamp'
  normalize: []
  required: true
  short: Date/time when the event originated.
  type: date
Endpoint.policy:
  dashed_name: Endpoint-policy
  description: The policy fields are used to hold information about applied policy.
  flat_name: Endpoint.policy
  level: custom
  name: policy
  normalize: []
  object_type: keyword
  short: The policy fields are used to hold information about applied policy.
  type: object
Endpoint.policy.applied:
  dashed_name: Endpoint-policy-applied
  description: information about the policy that is applied
  flat_name: Endpoint.policy.applied
  level: custom
  name: policy.applied
  normalize: []
  object_type: keyword
  short: information about the policy that is applied
  type: object
Endpoint.policy.applied.actions:
  dashed_name: Endpoint-policy-applied-actions
  description: actions applied during the application of the policy
  enabled: false
  flat_name: Endpoint.policy.applied.actions
  level: custom
  name: policy.applied.actions
  normalize: []
  short: actions applied during the application of the policy
  type: nested
Endpoint.policy.applied.actions.message:
  dashed_name: Endpoint-policy-applied-actions-message
  description: message about the application of the action to further qualify the
    status of the action
  flat_name: Endpoint.policy.applied.actions.message
  ignore_above: 1024
  level: custom
  name: policy.applied.actions.message
  normalize: []
  short: message about the application of the action to further qualify the status
    of the action
  type: keyword
Endpoint.policy.applied.actions.name:
  dashed_name: Endpoint-policy-applied-actions-name
  description: name of the action that was applied
  flat_name: Endpoint.policy.applied.actions.name
  ignore_above: 1024
  level: custom
  name: policy.applied.actions.name
  normalize: []
  short: name of the action that was applied
  type: keyword
Endpoint.policy.applied.actions.status:
  dashed_name: Endpoint-policy-applied-actions-status
  description: the status of the action
  flat_name: Endpoint.policy.applied.actions.status
  ignore_above: 1024
  level: custom
  name: policy.applied.actions.status
  normalize: []
  short: the status of the action
  type: keyword
Endpoint.policy.applied.artifacts:
  dashed_name: Endpoint-policy-applied-artifacts
  description: information about protection artifacts applied.
  enabled: false
  flat_name: Endpoint.policy.applied.artifacts
  level: custom
  name: policy.applied.artifacts
  normalize: []
  object_type: keyword
  short: information about protection artifacts applied.
  type: object
Endpoint.policy.applied.artifacts.global:
  dashed_name: Endpoint-policy-applied-artifacts-global
  description: information about global protection artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.global
  level: custom
  name: policy.applied.artifacts.global
  normalize: []
  object_type: keyword
  short: information about global protection artifacts applied.
  type: object
Endpoint.policy.applied.artifacts.global.identifiers:
  dashed_name: Endpoint-policy-applied-artifacts-global-identifiers
  description: the identifiers of global artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.global.identifiers
  level: custom
  name: policy.applied.artifacts.global.identifiers
  normalize: []
  short: the identifiers of global artifacts applied.
  type: nested
Endpoint.policy.applied.artifacts.global.identifiers.name:
  dashed_name: Endpoint-policy-applied-artifacts-global-identifiers-name
  description: the name of global artifact applied.
  flat_name: Endpoint.policy.applied.artifacts.global.identifiers.name
  ignore_above: 1024
  level: custom
  name: policy.applied.artifacts.global.identifiers.name
  normalize: []
  short: the name of global artifact applied.
  type: keyword
Endpoint.policy.applied.artifacts.global.identifiers.sha256:
  dashed_name: Endpoint-policy-applied-artifacts-global-identifiers-sha256
  description: the sha256 of global artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.global.identifiers.sha256
  ignore_above: 1024
  level: custom
  name: policy.applied.artifacts.global.identifiers.sha256
  normalize: []
  short: the sha256 of global artifacts applied.
  type: keyword
Endpoint.policy.applied.artifacts.global.version:
  dashed_name: Endpoint-policy-applied-artifacts-global-version
  description: the version of global artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.global.version
  ignore_above: 1024
  level: custom
  name: policy.applied.artifacts.global.version
  normalize: []
  short: the version of global artifacts applied.
  type: keyword
Endpoint.policy.applied.artifacts.user:
  dashed_name: Endpoint-policy-applied-artifacts-user
  description: information about user protection artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.user
  level: custom
  name: policy.applied.artifacts.user
  normalize: []
  object_type: keyword
  short: information about user protection artifacts applied.
  type: object
Endpoint.policy.applied.artifacts.user.identifiers:
  dashed_name: Endpoint-policy-applied-artifacts-user-identifiers
  description: the identifiers of user artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.user.identifiers
  level: custom
  name: policy.applied.artifacts.user.identifiers
  normalize: []
  short: the identifiers of user artifacts applied.
  type: nested
Endpoint.policy.applied.artifacts.user.identifiers.name:
  dashed_name: Endpoint-policy-applied-artifacts-user-identifiers-name
  description: the name of user artifact applied.
  flat_name: Endpoint.policy.applied.artifacts.user.identifiers.name
  ignore_above: 1024
  level: custom
  name: policy.applied.artifacts.user.identifiers.name
  normalize: []
  short: the name of user artifact applied.
  type: keyword
Endpoint.policy.applied.artifacts.user.identifiers.sha256:
  dashed_name: Endpoint-policy-applied-artifacts-user-identifiers-sha256
  description: the sha256 of user artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.user.identifiers.sha256
  ignore_above: 1024
  level: custom
  name: policy.applied.artifacts.user.identifiers.sha256
  normalize: []
  short: the sha256 of user artifacts applied.
  type: keyword
Endpoint.policy.applied.artifacts.user.version:
  dashed_name: Endpoint-policy-applied-artifacts-user-version
  description: the version of user artifacts applied.
  flat_name: Endpoint.policy.applied.artifacts.user.version
  ignore_above: 1024
  level: custom
  name: policy.applied.artifacts.user.version
  normalize: []
  short: the version of user artifacts applied.
  type: keyword
Endpoint.policy.applied.configurations:
  dashed_name: Endpoint-policy-applied-configurations
  description: the configurations of the applied policy
  enabled: false
  flat_name: Endpoint.policy.applied.configurations
  level: custom
  name: policy.applied.configurations
  normalize: []
  object_type: keyword
  short: the configurations of the applied policy
  type: object
Endpoint.policy.applied.configurations.events:
  dashed_name: Endpoint-policy-applied-configurations-events
  description: overall event collection configuration and status of the applied policy
  flat_name: Endpoint.policy.applied.configurations.events
  level: custom
  name: policy.applied.configurations.events
  normalize: []
  object_type: keyword
  short: overall event collection configuration and status of the applied policy
  type: object
Endpoint.policy.applied.configurations.events.concerned_actions:
  dashed_name: Endpoint-policy-applied-configurations-events-concerned-actions
  description: all actions that were taken for event collection
  flat_name: Endpoint.policy.applied.configurations.events.concerned_actions
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.events.concerned_actions
  normalize: []
  short: all actions that were taken for event collection
  type: keyword
Endpoint.policy.applied.configurations.events.status:
  dashed_name: Endpoint-policy-applied-configurations-events-status
  description: the overall status of event collection, this is correlated to the status
    of concerned actions  but not a simple sum of the actions
  flat_name: Endpoint.policy.applied.configurations.events.status
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.events.status
  normalize: []
  short: the overall status of event collection, this is correlated to the status
    of concerned actions  but not a simple sum of the actions
  type: keyword
Endpoint.policy.applied.configurations.logging:
  dashed_name: Endpoint-policy-applied-configurations-logging
  description: overall logging configuration and status of the applied policy
  flat_name: Endpoint.policy.applied.configurations.logging
  level: custom
  name: policy.applied.configurations.logging
  normalize: []
  object_type: keyword
  short: overall logging configuration and status of the applied policy
  type: object
Endpoint.policy.applied.configurations.logging.concerned_actions:
  dashed_name: Endpoint-policy-applied-configurations-logging-concerned-actions
  description: all actions that were taken for logging
  flat_name: Endpoint.policy.applied.configurations.logging.concerned_actions
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.logging.concerned_actions
  normalize: []
  short: all actions that were taken for logging
  type: keyword
Endpoint.policy.applied.configurations.logging.status:
  dashed_name: Endpoint-policy-applied-configurations-logging-status
  description: the overall status of logging, this is correlated to the status of
    concerned actions but  not a simple sum of the actions
  flat_name: Endpoint.policy.applied.configurations.logging.status
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.logging.status
  normalize: []
  short: the overall status of logging, this is correlated to the status of concerned
    actions but  not a simple sum of the actions
  type: keyword
Endpoint.policy.applied.configurations.malware:
  dashed_name: Endpoint-policy-applied-configurations-malware
  description: overall malware configuration and status of the applied policy
  flat_name: Endpoint.policy.applied.configurations.malware
  level: custom
  name: policy.applied.configurations.malware
  normalize: []
  object_type: keyword
  short: overall malware configuration and status of the applied policy
  type: object
Endpoint.policy.applied.configurations.malware.concerned_actions:
  dashed_name: Endpoint-policy-applied-configurations-malware-concerned-actions
  description: all actions that were taken for malware
  flat_name: Endpoint.policy.applied.configurations.malware.concerned_actions
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.malware.concerned_actions
  normalize: []
  short: all actions that were taken for malware
  type: keyword
Endpoint.policy.applied.configurations.malware.status:
  dashed_name: Endpoint-policy-applied-configurations-malware-status
  description: the overall status of malware, this is correlated to the status of
    concerned actions  but not a simple sum of the actions
  flat_name: Endpoint.policy.applied.configurations.malware.status
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.malware.status
  normalize: []
  short: the overall status of malware, this is correlated to the status of concerned
    actions  but not a simple sum of the actions
  type: keyword
Endpoint.policy.applied.configurations.streaming:
  dashed_name: Endpoint-policy-applied-configurations-streaming
  description: overall data streaming configuration and status of the applied policy
  flat_name: Endpoint.policy.applied.configurations.streaming
  level: custom
  name: policy.applied.configurations.streaming
  normalize: []
  object_type: keyword
  short: overall data streaming configuration and status of the applied policy
  type: object
Endpoint.policy.applied.configurations.streaming.concerned_actions:
  dashed_name: Endpoint-policy-applied-configurations-streaming-concerned-actions
  description: all actions that were taken for data streaming
  flat_name: Endpoint.policy.applied.configurations.streaming.concerned_actions
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.streaming.concerned_actions
  normalize: []
  short: all actions that were taken for data streaming
  type: keyword
Endpoint.policy.applied.configurations.streaming.status:
  dashed_name: Endpoint-policy-applied-configurations-streaming-status
  description: the overall status of data streaming, this is correlated to the status
    of concerned actions  but not a simple sum of the actions
  flat_name: Endpoint.policy.applied.configurations.streaming.status
  ignore_above: 1024
  level: custom
  name: policy.applied.configurations.streaming.status
  normalize: []
  short: the overall status of data streaming, this is correlated to the status of
    concerned actions  but not a simple sum of the actions
  type: keyword
Endpoint.policy.applied.id:
  dashed_name: Endpoint-policy-applied-id
  description: the id of the applied policy
  flat_name: Endpoint.policy.applied.id
  ignore_above: 1024
  level: custom
  name: policy.applied.id
  normalize: []
  short: the id of the applied policy
  type: keyword
Endpoint.policy.applied.name:
  dashed_name: Endpoint-policy-applied-name
  description: the name of this applied policy
  flat_name: Endpoint.policy.applied.name
  ignore_above: 1024
  level: custom
  name: policy.applied.name
  normalize: []
  short: the name of this applied policy
  type: keyword
Endpoint.policy.applied.response:
  dashed_name: Endpoint-policy-applied-response
  description: the response of actions that failed in the applied policy
  enabled: false
  flat_name: Endpoint.policy.applied.response
  level: custom
  name: policy.applied.response
  normalize: []
  object_type: keyword
  short: the response of actions that failed in the applied policy
  type: object
Endpoint.policy.applied.status:
  dashed_name: Endpoint-policy-applied-status
  description: the status of the applied policy
  flat_name: Endpoint.policy.applied.status
  ignore_above: 1024
  level: custom
  name: policy.applied.status
  normalize: []
  short: the status of the applied policy
  type: keyword
Endpoint.policy.applied.version:
  dashed_name: Endpoint-policy-applied-version
  description: the version of this applied policy
  flat_name: Endpoint.policy.applied.version
  ignore_above: 1024
  level: custom
  name: policy.applied.version
  normalize: []
  short: the version of this applied policy
  type: keyword
dataset.name:
  dashed_name: dataset-name
  description: Dataset name.
  flat_name: dataset.name
  level: custom
  name: name
  normalize: []
  short: Dataset name.
  type: constant_keyword
dataset.namespace:
  dashed_name: dataset-namespace
  description: Dataset namespace.
  flat_name: dataset.namespace
  level: custom
  name: namespace
  normalize: []
  short: Dataset namespace.
  type: constant_keyword
dataset.type:
  dashed_name: dataset-type
  description: Dataset type.
  flat_name: dataset.type
  level: custom
  name: type
  normalize: []
  short: Dataset type.
  type: constant_keyword
ecs.version:
  dashed_name: ecs-version
  description: 'ECS version this event conforms to. `ecs.version` is a required field
    and must exist in all events.

    When querying across multiple indices -- which may conform to slightly different
    ECS versions -- this field lets integrations adjust to the schema version of the
    events.'
  example: 1.0.0
  flat_name: ecs.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  required: true
  short: ECS version this event conforms to.
  type: keyword
event.action:
  dashed_name: event-action
  description: 'The action captured by the event.

    This describes the information in the event. It is more specific than `event.category`.
    Examples are `group-add`, `process-started`, `file-created`. The value is normally
    defined by the implementer.'
  example: user-password-change
  flat_name: event.action
  ignore_above: 1024
  level: core
  name: action
  normalize: []
  short: The action captured by the event.
  type: keyword
event.category:
  allowed_values:
  - description: 'Events in this category are related to the challenge and response
      process in which credentials are supplied and verified to allow the creation
      of a session. Common sources for these logs are Windows event logs and ssh logs.
      Visualize and analyze events in this category to look for failed logins, and
      other authentication-related activity.

      '
    expected_event_types:
    - start
    - end
    - info
    name: authentication
  - description: 'The database category denotes events and metrics relating to a data
      storage and retrieval system. Note that use of this category is not limited
      to relational database systems. Examples include event logs from MS SQL, MySQL,
      Elasticsearch, MongoDB, etc. Use this category to visualize and analyze database
      activity such as accesses and changes.

      '
    expected_event_types:
    - access
    - change
    - info
    - error
    name: database
  - description: 'Events in the driver category have to do with operating system device
      drivers and similar software entities such as Windows drivers, kernel extensions,
      kernel modules, etc.

      Use events and metrics in this category to visualize and analyze driver-related
      activity and status on hosts.

      '
    expected_event_types:
    - change
    - end
    - info
    - start
    name: driver
  - description: 'Relating to a set of information that has been created on, or has
      existed on a filesystem. Use this category of events to visualize and analyze
      the creation, access, and deletions of files. Events in this category can come
      from both host-based and network-based sources. An example source of a network-based
      detection of a file transfer would be the Zeek file.log.

      '
    expected_event_types:
    - change
    - creation
    - deletion
    - info
    name: file
  - description: 'Use this category to visualize and analyze information such as host
      inventory or host lifecycle events.

      Most of the events in this category can usually be observed from the outside,
      such as from a hypervisor or a control plane''s point of view. Some can also
      be seen from within, such as "start" or "end".

      Note that this category is for information about hosts themselves; it is not
      meant to capture activity "happening on a host".

      '
    expected_event_types:
    - access
    - change
    - end
    - info
    - start
    name: host
  - description: 'Identity and access management (IAM) events relating to users, groups,
      and administration. Use this category to visualize and analyze IAM-related logs
      and data from active directory, LDAP, Okta, Duo, and other IAM systems.

      '
    expected_event_types:
    - admin
    - change
    - creation
    - deletion
    - group
    - info
    - user
    name: iam
  - description: 'Relating to intrusion detections from IDS/IPS systems and functions,
      both network and host-based. Use this category to visualize and analyze intrusion
      detection alerts from systems such as Snort, Suricata, and Palo Alto threat
      detections.

      '
    expected_event_types:
    - allowed
    - denied
    - info
    name: intrusion_detection
  - description: 'Malware detection events and alerts. Use this category to visualize
      and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
      Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS systems
      such as Suricata, or other sources of malware-related events such as Palo Alto
      Networks threat logs and Wildfire logs.

      '
    expected_event_types:
    - info
    name: malware
  - description: 'Relating to all network activity, including network connection lifecycle,
      network traffic, and essentially any event that includes an IP address. Many
      events containing decoded network protocol transactions fit into this category.
      Use events in this category to visualize or analyze counts of network ports,
      protocols, addresses, geolocation information, etc.

      '
    expected_event_types:
    - access
    - allowed
    - connection
    - denied
    - end
    - info
    - protocol
    - start
    name: network
  - description: 'Relating to software packages installed on hosts. Use this category
      to visualize and analyze inventory of software installed on various hosts, or
      to determine host vulnerability in the absence of vulnerability scan data.

      '
    expected_event_types:
    - access
    - change
    - deletion
    - info
    - installation
    - start
    name: package
  - description: 'Use this category of events to visualize and analyze process-specific
      information such as lifecycle events or process ancestry.

      '
    expected_event_types:
    - access
    - change
    - end
    - info
    - start
    name: process
  - description: 'Relating to web server access. Use this category to create a dashboard
      of web server/proxy activity from apache, IIS, nginx web servers, etc. Note:
      events from network observers such as Zeek http log may also be included in
      this category.

      '
    expected_event_types:
    - access
    - error
    - info
    name: web
  dashed_name: event-category
  description: 'This is one of four ECS Categorization Fields, and indicates the second
    level in the ECS category hierarchy.

    `event.category` represents the "big buckets" of ECS categories. For example,
    filtering on `event.category:process` yields all events relating to process activity.
    This field is closely related to `event.type`, which is used as a subcategory.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple categories.'
  example: authentication
  flat_name: event.category
  ignore_above: 1024
  level: core
  name: category
  normalize:
  - array
  short: Event category. The second categorization field in the hierarchy.
  type: keyword
event.created:
  dashed_name: event-created
  description: 'event.created contains the date/time when the event was first read
    by an agent, or by your pipeline.

    This field is distinct from @timestamp in that @timestamp typically contain the
    time extracted from the original event.

    In most situations, these two timestamps will be slightly different. The difference
    can be used to calculate the delay between your source generating an event, and
    the time when your agent first processed it. This can be used to monitor your
    agent''s or pipeline''s ability to keep up with your event source.

    In case the two timestamps are identical, @timestamp should be used.'
  example: '2016-05-23T08:05:34.857Z'
  flat_name: event.created
  level: core
  name: created
  normalize: []
  short: Time when the event was first read by an agent or by your pipeline.
  type: date
event.dataset:
  dashed_name: event-dataset
  description: 'Name of the dataset.

    If an event source publishes more than one type of log or events (e.g. access
    log, error log), the dataset is used to specify which one the event comes from.

    It''s recommended but not required to start the dataset name with the module name,
    followed by a dot, then the dataset name.'
  example: apache.access
  flat_name: event.dataset
  ignore_above: 1024
  level: core
  name: dataset
  normalize: []
  short: Name of the dataset.
  type: keyword
event.id:
  dashed_name: event-id
  description: Unique ID to describe the event.
  example: 8a4f500d
  flat_name: event.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique ID to describe the event.
  type: keyword
event.kind:
  allowed_values:
  - description: 'This value indicates an event that describes an alert or notable
      event, triggered by a detection rule.

      `event.kind:alert` is often populated for events coming from firewalls, intrusion
      detection systems, endpoint detection and response systems, and so on.

      '
    name: alert
  - description: 'This value is the most general and most common value for this field.
      It is used to represent events that indicate that something happened.

      '
    name: event
  - description: 'This value is used to indicate that this event describes a numeric
      measurement taken at given point in time.

      Examples include CPU utilization, memory usage, or device temperature.

      Metric events are often collected on a predictable frequency, such as once every
      few seconds, or once a minute, but can also be used to describe ad-hoc numeric
      metric queries.

      '
    name: metric
  - description: 'The state value is similar to metric, indicating that this event
      describes a measurement taken at given point in time, except that the measurement
      does not result in a numeric value, but rather one of a fixed set of categorical
      values that represent conditions or states.

      Examples include periodic events reporting Elasticsearch cluster state (green/yellow/red),
      the state of a TCP connection (open, closed, fin_wait, etc.), the state of a
      host with respect to a software vulnerability (vulnerable, not vulnerable),
      and the state of a system regarding compliance with a regulatory standard (compliant,
      not compliant).

      Note that an event that describes a change of state would not use `event.kind:state`,
      but instead would use ''event.kind:event'' since a state change fits the more
      general event definition of something that happened.

      State events are often collected on a predictable frequency, such as once every
      few seconds, once a minute, once an hour, or once a day, but can also be used
      to describe ad-hoc state queries.

      '
    name: state
  - description: 'This value indicates that an error occurred during the ingestion
      of this event, and that event data may be missing, inconsistent, or incorrect.
      `event.kind:pipeline_error` is often associated with parsing errors.

      '
    name: pipeline_error
  - description: 'This value is used by the Elastic SIEM app to denote an Elasticsearch
      document that was created by a SIEM detection engine rule.

      A signal will typically trigger a notification that something meaningful happened
      and should be investigated.

      Usage of this value is reserved, and pipelines should not populate `event.kind`
      with the value "signal".

      '
    name: signal
  dashed_name: event-kind
  description: 'This is one of four ECS Categorization Fields, and indicates the highest
    level in the ECS category hierarchy.

    `event.kind` gives high-level information about what type of information the event
    contains, without being specific to the contents of the event. For example, values
    of this field distinguish alert events from metric events.

    The value of this field can be used to inform how these kinds of events should
    be handled. They may warrant different retention, different access control, it
    may also help understand whether the data coming in at a regular interval or not.'
  example: alert
  flat_name: event.kind
  ignore_above: 1024
  level: core
  name: kind
  normalize: []
  short: The kind of the event. The highest categorization field in the hierarchy.
  type: keyword
event.module:
  dashed_name: event-module
  description: 'Name of the module this data is coming from.

    If your monitoring agent supports the concept of modules or plugins to process
    events of a given source (e.g. Apache logs), `event.module` should contain the
    name of this module.'
  example: apache
  flat_name: event.module
  ignore_above: 1024
  level: core
  name: module
  normalize: []
  short: Name of the module this data is coming from.
  type: keyword
event.type:
  allowed_values:
  - description: 'The access event type is used for the subset of events within a
      category that indicate that something was accessed. Common examples include
      `event.category:database AND event.type:access`, or `event.category:file AND
      event.type:access`. Note for file access, both directory listings and file opens
      should be included in this subcategory. You can further distinguish access operations
      using the ECS `event.action` field.

      '
    name: access
  - description: 'The admin event type is used for the subset of events within a category
      that are related to admin objects. For example, administrative changes within
      an IAM framework that do not specifically affect a user or group (e.g., adding
      new applications to a federation solution or connecting discrete forests in
      Active Directory) would fall into this subcategory. Common example: `event.category:iam
      AND event.type:change AND event.type:admin`. You can further distinguish admin
      operations using the ECS `event.action` field.

      '
    name: admin
  - description: 'The allowed event type is used for the subset of events within a
      category that indicate that something was allowed. Common examples include `event.category:network
      AND event.type:connection AND event.type:allowed` (to indicate a network firewall
      event for which the firewall disposition was to allow the connection to complete)
      and `event.category:intrusion_detection AND event.type:allowed` (to indicate
      a network intrusion prevention system event for which the IPS disposition was
      to allow the connection to complete). You can further distinguish allowed operations
      using the ECS `event.action` field, populating with values of your choosing,
      such as "allow", "detect", or "pass".

      '
    name: allowed
  - description: 'The change event type is used for the subset of events within a
      category that indicate that something has changed. If semantics best describe
      an event as modified, then include them in this subcategory. Common examples
      include `event.category:process AND event.type:change`, and `event.category:file
      AND event.type:change`. You can further distinguish change operations using
      the ECS `event.action` field.

      '
    name: change
  - description: 'Used primarily with `event.category:network` this value is used
      for the subset of network traffic that includes sufficient information for the
      event to be included in flow or connection analysis. Events in this subcategory
      will contain at least source and destination IP addresses, source and destination
      TCP/UDP ports, and will usually contain counts of bytes and/or packets transferred.
      Events in this subcategory may contain unidirectional or bidirectional information,
      including summary information. Use this subcategory to visualize and analyze
      network connections. Flow analysis, including Netflow, IPFIX, and other flow-related
      events fit in this subcategory. Note that firewall events from many Next-Generation
      Firewall (NGFW) devices will also fit into this subcategory.  A common filter
      for flow/connection information would be `event.category:network AND event.type:connection
      AND event.type:end` (to view or analyze all completed network connections, ignoring
      mid-flow reports). You can further distinguish connection events using the ECS
      `event.action` field, populating with values of your choosing, such as "timeout",
      or "reset".

      '
    name: connection
  - description: 'The "creation" event type is used for the subset of events within
      a category that indicate that something was created. A common example is `event.category:file
      AND event.type:creation`.

      '
    name: creation
  - description: 'The deletion event type is used for the subset of events within
      a category that indicate that something was deleted. A common example is `event.category:file
      AND event.type:deletion` to indicate that a file has been deleted.

      '
    name: deletion
  - description: 'The denied event type is used for the subset of events within a
      category that indicate that something was denied. Common examples include `event.category:network
      AND event.type:denied` (to indicate a network firewall event for which the firewall
      disposition was to deny the connection) and `event.category:intrusion_detection
      AND event.type:denied` (to indicate a network intrusion prevention system event
      for which the IPS disposition was to deny the connection to complete). You can
      further distinguish denied operations using the ECS `event.action` field, populating
      with values of your choosing, such as "blocked", "dropped", or "quarantined".

      '
    name: denied
  - description: 'The end event type is used for the subset of events within a category
      that indicate something has ended. A common example is `event.category:process
      AND event.type:end`.

      '
    name: end
  - description: 'The error event type is used for the subset of events within a category
      that indicate or describe an error. A common example is `event.category:database
      AND event.type:error`. Note that pipeline errors that occur during the event
      ingestion process should not use this `event.type` value. Instead, they should
      use `event.kind:pipeline_error`.

      '
    name: error
  - description: 'The group event type is used for the subset of events within a category
      that are related to group objects. Common example: `event.category:iam AND event.type:creation
      AND event.type:group`. You can further distinguish group operations using the
      ECS `event.action` field.

      '
    name: group
  - description: 'The info event type is used for the subset of events within a category
      that indicate that they are purely informational, and don''t report a state
      change, or any type of action. For example, an initial run of a file integrity
      monitoring system (FIM), where an agent reports all files under management,
      would fall into the "info" subcategory. Similarly, an event containing a dump
      of all currently running processes (as opposed to reporting that a process started/ended)
      would fall into the "info" subcategory. An additional common examples is `event.category:intrusion_detection
      AND event.type:info`.

      '
    name: info
  - description: 'The installation event type is used for the subset of events within
      a category that indicate that something was installed. A common example is `event.category:package`
      AND `event.type:installation`.

      '
    name: installation
  - description: 'The protocol event type is used for the subset of events within
      a category that indicate that they contain protocol details or analysis, beyond
      simply identifying the protocol. Generally, network events that contain specific
      protocol details will fall into this subcategory. A common example is `event.category:network
      AND event.type:protocol AND event.type:connection AND event.type:end` (to indicate
      that the event is a network connection event sent at the end of a connection
      that also includes a protocol detail breakdown). Note that events that only
      indicate the name or id of the protocol should not use the protocol value. Further
      note that when the protocol subcategory is used, the identified protocol is
      populated in the ECS `network.protocol` field.

      '
    expected_event_types:
    - access
    - change
    - end
    - info
    - start
    name: protocol
  - description: 'The start event type is used for the subset of events within a category
      that indicate something has started. A common example is `event.category:process
      AND event.type:start`.

      '
    name: start
  - description: 'The user event type is used for the subset of events within a category
      that are related to user objects. Common example: `event.category:iam AND event.type:deletion
      AND event.type:user`. You can further distinguish user operations using the
      ECS `event.action` field.

      '
    name: user
  dashed_name: event-type
  description: 'This is one of four ECS Categorization Fields, and indicates the third
    level in the ECS category hierarchy.

    `event.type` represents a categorization "sub-bucket" that, when used along with
    the `event.category` field values, enables filtering events down to a level appropriate
    for single visualization.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple event types.'
  flat_name: event.type
  ignore_above: 1024
  level: core
  name: type
  normalize:
  - array
  short: Event type. The third categorization field in the hierarchy.
  type: keyword
host.id:
  dashed_name: host-id
  description: 'Unique host id.

    As hostname is not always unique, use values that are meaningful in your environment.

    Example: The current usage of `beat.name`.'
  flat_name: host.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique host id.
  type: keyword
message:
  dashed_name: message
  description: 'For log events the message field contains the log message, optimized
    for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated
    to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World
  flat_name: message
  level: core
  name: message
  normalize: []
  norms: false
  short: Log message optimized for viewing in a log viewer.
  type: text
