'@timestamp':
  dashed_name: '@timestamp'
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  flat_name: '@timestamp'
  level: core
  name: '@timestamp'
  normalize: []
  required: true
  short: Date/time when the event originated.
  type: date
Endpoint.policy:
  dashed_name: Endpoint-policy
  description: The policy fields are used to hold information about applied policy.
  flat_name: Endpoint.policy
  level: custom
  name: policy
  normalize: []
  object_type: keyword
  short: The policy fields are used to hold information about applied policy.
  type: object
Endpoint.policy.applied:
  dashed_name: Endpoint-policy-applied
  description: information about the policy that is applied
  flat_name: Endpoint.policy.applied
  level: custom
  name: policy.applied
  normalize: []
  object_type: keyword
  short: information about the policy that is applied
  type: object
Endpoint.policy.applied.id:
  dashed_name: Endpoint-policy-applied-id
  description: the id of the applied policy
  flat_name: Endpoint.policy.applied.id
  ignore_above: 1024
  level: custom
  name: policy.applied.id
  normalize: []
  short: the id of the applied policy
  type: keyword
Endpoint.policy.applied.name:
  dashed_name: Endpoint-policy-applied-name
  description: the name of this applied policy
  flat_name: Endpoint.policy.applied.name
  ignore_above: 1024
  level: custom
  name: policy.applied.name
  normalize: []
  short: the name of this applied policy
  type: keyword
Endpoint.policy.applied.status:
  dashed_name: Endpoint-policy-applied-status
  description: the status of the applied policy
  flat_name: Endpoint.policy.applied.status
  ignore_above: 1024
  level: custom
  name: policy.applied.status
  normalize: []
  short: the status of the applied policy
  type: keyword
Endpoint.status:
  dashed_name: Endpoint-status
  description: The current status of the endpoint e.g. enrolled, unenrolled.
  flat_name: Endpoint.status
  ignore_above: 1024
  level: custom
  name: status
  normalize: []
  short: The current status of the endpoint e.g. enrolled, unenrolled.
  type: keyword
agent.id:
  dashed_name: agent-id
  description: 'Unique identifier of this agent (if one exists).

    Example: For Beats this would be beat.id.'
  example: 8a4f500d
  flat_name: agent.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique identifier of this agent.
  type: keyword
agent.name:
  dashed_name: agent-name
  description: 'Custom name of the agent.

    This is a name that can be given to an agent. This can be helpful if for example
    two Filebeat instances are running on the same host but a human readable separation
    is needed on which Filebeat instance data is coming from.

    If no name is given, the name is often left empty.'
  example: foo
  flat_name: agent.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Custom name of the agent.
  type: keyword
agent.version:
  dashed_name: agent-version
  description: Version of the agent.
  example: 6.0.0-rc2
  flat_name: agent.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  short: Version of the agent.
  type: keyword
dataset.name:
  dashed_name: dataset-name
  description: Dataset name.
  flat_name: dataset.name
  level: custom
  name: name
  normalize: []
  short: Dataset name.
  type: constant_keyword
dataset.namespace:
  dashed_name: dataset-namespace
  description: Dataset namespace.
  flat_name: dataset.namespace
  level: custom
  name: namespace
  normalize: []
  short: Dataset namespace.
  type: constant_keyword
dataset.type:
  dashed_name: dataset-type
  description: Dataset type.
  flat_name: dataset.type
  level: custom
  name: type
  normalize: []
  short: Dataset type.
  type: constant_keyword
ecs.version:
  dashed_name: ecs-version
  description: 'ECS version this event conforms to. `ecs.version` is a required field
    and must exist in all events.

    When querying across multiple indices -- which may conform to slightly different
    ECS versions -- this field lets integrations adjust to the schema version of the
    events.'
  example: 1.0.0
  flat_name: ecs.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  required: true
  short: ECS version this event conforms to.
  type: keyword
elastic.agent:
  dashed_name: elastic-agent
  description: The agent fields contain data about the Elastic Agent. The Elastic
    Agent is the management agent that manages other agents or process on the host.
  flat_name: elastic.agent
  level: custom
  name: agent
  normalize: []
  object_type: keyword
  short: The agent fields contain data about the Elastic Agent. The Elastic Agent
    is the management agent that manages other agents or process on the host.
  type: object
elastic.agent.id:
  dashed_name: elastic-agent-id
  description: Unique identifier of this elastic agent (if one exists).
  example: c2a9093e-e289-4c0a-aa44-8c32a414fa7a
  flat_name: elastic.agent.id
  ignore_above: 1024
  level: custom
  name: agent.id
  normalize: []
  short: Unique identifier of this elastic agent (if one exists).
  type: keyword
event.created:
  dashed_name: event-created
  description: 'event.created contains the date/time when the event was first read
    by an agent, or by your pipeline.

    This field is distinct from @timestamp in that @timestamp typically contain the
    time extracted from the original event.

    In most situations, these two timestamps will be slightly different. The difference
    can be used to calculate the delay between your source generating an event, and
    the time when your agent first processed it. This can be used to monitor your
    agent''s or pipeline''s ability to keep up with your event source.

    In case the two timestamps are identical, @timestamp should be used.'
  example: '2016-05-23T08:05:34.857Z'
  flat_name: event.created
  level: core
  name: created
  normalize: []
  short: Time when the event was first read by an agent or by your pipeline.
  type: date
host.architecture:
  dashed_name: host-architecture
  description: Operating system architecture.
  example: x86_64
  flat_name: host.architecture
  ignore_above: 1024
  level: core
  name: architecture
  normalize: []
  short: Operating system architecture.
  type: keyword
host.hostname:
  dashed_name: host-hostname
  description: 'Hostname of the host.

    It normally contains what the `hostname` command returns on the host machine.'
  flat_name: host.hostname
  ignore_above: 1024
  level: core
  name: hostname
  normalize: []
  short: Hostname of the host.
  type: keyword
host.id:
  dashed_name: host-id
  description: 'Unique host id.

    As hostname is not always unique, use values that are meaningful in your environment.

    Example: The current usage of `beat.name`.'
  flat_name: host.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique host id.
  type: keyword
host.ip:
  dashed_name: host-ip
  description: Host ip addresses.
  flat_name: host.ip
  level: core
  name: ip
  normalize:
  - array
  short: Host ip addresses.
  type: ip
host.mac:
  dashed_name: host-mac
  description: Host mac addresses.
  flat_name: host.mac
  ignore_above: 1024
  level: core
  name: mac
  normalize:
  - array
  short: Host mac addresses.
  type: keyword
host.os.Ext:
  dashed_name: host-os-Ext
  description: Object for all custom defined fields to live in.
  flat_name: host.os.Ext
  level: custom
  name: Ext
  normalize: []
  object_type: keyword
  original_fieldset: os
  short: Object for all custom defined fields to live in.
  type: object
host.os.Ext.variant:
  dashed_name: host-os-Ext-variant
  description: A string value or phrase that further aid to classify or qualify the
    operating system (OS).  For example the distribution for a Linux OS will be entered
    in this field.
  example: Ubuntu
  flat_name: host.os.Ext.variant
  ignore_above: 1024
  level: custom
  name: Ext.variant
  normalize: []
  original_fieldset: os
  short: A string value or phrase that further aid to classify or qualify the operating
    system (OS).  For example the distribution for a Linux OS will be entered in this
    field.
  type: keyword
host.os.full:
  dashed_name: host-os-full
  description: Operating system name, including the version or code name.
  example: Mac OS Mojave
  flat_name: host.os.full
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: host.os.full.text
    name: text
    norms: false
    type: text
  name: full
  normalize: []
  original_fieldset: os
  short: Operating system name, including the version or code name.
  type: keyword
host.os.name:
  dashed_name: host-os-name
  description: Operating system name, without the version.
  example: Mac OS X
  flat_name: host.os.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: host.os.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: os
  short: Operating system name, without the version.
  type: keyword
host.os.version:
  dashed_name: host-os-version
  description: Operating system version as a raw string.
  example: 10.14.1
  flat_name: host.os.version
  ignore_above: 1024
  level: extended
  name: version
  normalize: []
  original_fieldset: os
  short: Operating system version as a raw string.
  type: keyword
