Endpoint:
  description: Fields describing the state of the Elastic Endpoint when an event occurs.
  fields:
    policy:
      dashed_name: Endpoint-policy
      description: The policy fields are used to hold information about applied policy.
      flat_name: Endpoint.policy
      level: custom
      name: policy
      normalize: []
      object_type: keyword
      short: The policy fields are used to hold information about applied policy.
      type: object
    policy.applied:
      dashed_name: Endpoint-policy-applied
      description: information about the policy that is applied
      flat_name: Endpoint.policy.applied
      level: custom
      name: policy.applied
      normalize: []
      object_type: keyword
      short: information about the policy that is applied
      type: object
    policy.applied.id:
      dashed_name: Endpoint-policy-applied-id
      description: the id of the applied policy
      flat_name: Endpoint.policy.applied.id
      ignore_above: 1024
      level: custom
      name: policy.applied.id
      normalize: []
      short: the id of the applied policy
      type: keyword
    policy.applied.name:
      dashed_name: Endpoint-policy-applied-name
      description: the name of this applied policy
      flat_name: Endpoint.policy.applied.name
      ignore_above: 1024
      level: custom
      name: policy.applied.name
      normalize: []
      short: the name of this applied policy
      type: keyword
    policy.applied.status:
      dashed_name: Endpoint-policy-applied-status
      description: the status of the applied policy
      flat_name: Endpoint.policy.applied.status
      ignore_above: 1024
      level: custom
      name: policy.applied.status
      normalize: []
      short: the status of the applied policy
      type: keyword
  group: 2
  name: Endpoint
  prefix: Endpoint.
  short: Fields describing the state of the Elastic Endpoint when an event occurs.
  title: Endpoint
  type: group
agent:
  description: 'The agent fields contain the data about the software entity, if any,
    that collects, detects, or observes events on a host, or takes measurements on
    a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall
    be populated with details of the agent running on the host or observer where the
    event happened or the measurement was taken.'
  fields:
    id:
      dashed_name: agent-id
      description: 'Unique identifier of this agent (if one exists).

        Example: For Beats this would be beat.id.'
      example: 8a4f500d
      flat_name: agent.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      short: Unique identifier of this agent.
      type: keyword
    name:
      dashed_name: agent-name
      description: 'Custom name of the agent.

        This is a name that can be given to an agent. This can be helpful if for example
        two Filebeat instances are running on the same host but a human readable separation
        is needed on which Filebeat instance data is coming from.

        If no name is given, the name is often left empty.'
      example: foo
      flat_name: agent.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      short: Custom name of the agent.
      type: keyword
    version:
      dashed_name: agent-version
      description: Version of the agent.
      example: 6.0.0-rc2
      flat_name: agent.version
      ignore_above: 1024
      level: core
      name: version
      normalize: []
      short: Version of the agent.
      type: keyword
  footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat.
    For APM, it is the agent running in the app/service. The agent information does
    not change if data is sent through queuing systems like Kafka, Redis, or processing
    systems such as Logstash or APM Server.'
  group: 2
  name: agent
  prefix: agent.
  short: Fields about the monitoring agent.
  title: Agent
  type: group
base:
  description: The `base` field set contains all fields which are on the top level.
    These fields are common across all types of events.
  fields:
    '@timestamp':
      dashed_name: '@timestamp'
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      normalize: []
      required: true
      short: Date/time when the event originated.
      type: date
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the top level
  title: Base
  type: group
ecs:
  description: Meta-information specific to ECS.
  fields:
    version:
      dashed_name: ecs-version
      description: 'ECS version this event conforms to. `ecs.version` is a required
        field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different
        ECS versions -- this field lets integrations adjust to the schema version
        of the events.'
      example: 1.0.0
      flat_name: ecs.version
      ignore_above: 1024
      level: core
      name: version
      normalize: []
      required: true
      short: ECS version this event conforms to.
      type: keyword
  group: 2
  name: ecs
  prefix: ecs.
  short: Meta-information specific to ECS.
  title: ECS
  type: group
elastic:
  description: Holds fields and properties of data points and concepts in the elastic
    domain or namespace.
  fields:
    agent:
      dashed_name: elastic-agent
      description: The agent fields contain data about the Elastic Agent. The Elastic
        Agent is the management agent that manages other agents or process on the
        host.
      flat_name: elastic.agent
      level: custom
      name: agent
      normalize: []
      object_type: keyword
      short: The agent fields contain data about the Elastic Agent. The Elastic Agent
        is the management agent that manages other agents or process on the host.
      type: object
    agent.id:
      dashed_name: elastic-agent-id
      description: Unique identifier of this elastic agent (if one exists).
      example: c2a9093e-e289-4c0a-aa44-8c32a414fa7a
      flat_name: elastic.agent.id
      ignore_above: 1024
      level: custom
      name: agent.id
      normalize: []
      short: Unique identifier of this elastic agent (if one exists).
      type: keyword
  group: 2
  name: elastic
  prefix: elastic.
  short: Holds fields and properties of data points and concepts in the elastic domain
    or namespace.
  title: Elastic
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    measurements and the time at which the measurement was taken. Examples of metric
    events include memory pressure measured on a host and device temperature. See
    the `event.kind` definition in this section for additional details about metric
    and state events.'
  fields:
    created:
      dashed_name: event-created
      description: 'event.created contains the date/time when the event was first
        read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain
        the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference
        can be used to calculate the delay between your source generating an event,
        and the time when your agent first processed it. This can be used to monitor
        your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      example: '2016-05-23T08:05:34.857Z'
      flat_name: event.created
      level: core
      name: created
      normalize: []
      short: Time when the event was first read by an agent or by your pipeline.
      type: date
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    architecture:
      dashed_name: host-architecture
      description: Operating system architecture.
      example: x86_64
      flat_name: host.architecture
      ignore_above: 1024
      level: core
      name: architecture
      normalize: []
      short: Operating system architecture.
      type: keyword
    hostname:
      dashed_name: host-hostname
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
      flat_name: host.hostname
      ignore_above: 1024
      level: core
      name: hostname
      normalize: []
      short: Hostname of the host.
      type: keyword
    id:
      dashed_name: host-id
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
      flat_name: host.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      short: Unique host id.
      type: keyword
    ip:
      dashed_name: host-ip
      description: Host ip addresses.
      flat_name: host.ip
      level: core
      name: ip
      normalize:
      - array
      short: Host ip addresses.
      type: ip
    mac:
      dashed_name: host-mac
      description: Host mac addresses.
      flat_name: host.mac
      ignore_above: 1024
      level: core
      name: mac
      normalize:
      - array
      short: Host mac addresses.
      type: keyword
    os.Ext:
      dashed_name: host-os-Ext
      description: Object for all custom defined fields to live in.
      flat_name: host.os.Ext
      level: custom
      name: Ext
      normalize: []
      object_type: keyword
      original_fieldset: os
      short: Object for all custom defined fields to live in.
      type: object
    os.Ext.variant:
      dashed_name: host-os-Ext-variant
      description: A string value or phrase that further aid to classify or qualify
        the operating system (OS).  For example the distribution for a Linux OS will
        be entered in this field.
      example: Ubuntu
      flat_name: host.os.Ext.variant
      ignore_above: 1024
      level: custom
      name: Ext.variant
      normalize: []
      original_fieldset: os
      short: A string value or phrase that further aid to classify or qualify the
        operating system (OS).  For example the distribution for a Linux OS will be
        entered in this field.
      type: keyword
    os.full:
      dashed_name: host-os-full
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: host.os.full
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.full.text
        name: text
        norms: false
        type: text
      name: full
      normalize: []
      original_fieldset: os
      short: Operating system name, including the version or code name.
      type: keyword
    os.name:
      dashed_name: host-os-name
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: host.os.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.name.text
        name: text
        norms: false
        type: text
      name: name
      normalize: []
      original_fieldset: os
      short: Operating system name, without the version.
      type: keyword
    os.version:
      dashed_name: host-os-version
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: host.os.version
      ignore_above: 1024
      level: extended
      name: version
      normalize: []
      original_fieldset: os
      short: Operating system version as a raw string.
      type: keyword
  group: 2
  name: host
  nestings:
  - host.os
  prefix: host.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
