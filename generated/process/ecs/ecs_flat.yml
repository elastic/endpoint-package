'@timestamp':
  dashed_name: timestamp
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  flat_name: '@timestamp'
  level: core
  name: '@timestamp'
  normalize: []
  required: true
  short: Date/time when the event originated.
  type: date
agent.ephemeral_id:
  dashed_name: agent-ephemeral-id
  description: 'Ephemeral identifier of this agent (if one exists).

    This id normally changes across restarts, but `agent.id` does not.'
  example: 8a4f500f
  flat_name: agent.ephemeral_id
  ignore_above: 1024
  level: extended
  name: ephemeral_id
  normalize: []
  short: Ephemeral identifier of this agent.
  type: keyword
agent.id:
  dashed_name: agent-id
  description: 'Unique identifier of this agent (if one exists).

    Example: For Beats this would be beat.id.'
  example: 8a4f500d
  flat_name: agent.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique identifier of this agent.
  type: keyword
agent.name:
  dashed_name: agent-name
  description: 'Custom name of the agent.

    This is a name that can be given to an agent. This can be helpful if for example
    two Filebeat instances are running on the same host but a human readable separation
    is needed on which Filebeat instance data is coming from.

    If no name is given, the name is often left empty.'
  example: foo
  flat_name: agent.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Custom name of the agent.
  type: keyword
agent.type:
  dashed_name: agent-type
  description: 'Type of the agent.

    The agent type always stays the same and should be given by the agent used. In
    case of Filebeat the agent would always be Filebeat also if two Filebeat instances
    are run on the same machine.'
  example: filebeat
  flat_name: agent.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  short: Type of the agent.
  type: keyword
agent.version:
  dashed_name: agent-version
  description: Version of the agent.
  example: 6.0.0-rc2
  flat_name: agent.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  short: Version of the agent.
  type: keyword
data_stream.dataset:
  dashed_name: data-stream-dataset
  description: Data stream dataset name.
  example: nginx.access
  flat_name: data_stream.dataset
  level: custom
  name: dataset
  normalize: []
  short: The field can contain anything that makes sense to signify the source of
    the data.
  type: constant_keyword
data_stream.namespace:
  dashed_name: data-stream-namespace
  description: Data stream namespace.
  example: production
  flat_name: data_stream.namespace
  level: custom
  name: namespace
  normalize: []
  short: A user defined namespace. Namespaces are useful to allow grouping of data.
  type: constant_keyword
data_stream.type:
  dashed_name: data-stream-type
  description: Data stream type.
  example: logs
  flat_name: data_stream.type
  level: custom
  name: type
  normalize: []
  short: An overarching type for the data stream.
  type: constant_keyword
destination.geo.city_name:
  dashed_name: destination-geo-city-name
  description: City name.
  example: Montreal
  flat_name: destination.geo.city_name
  ignore_above: 1024
  level: core
  name: city_name
  normalize: []
  original_fieldset: geo
  short: City name.
  type: keyword
destination.geo.continent_code:
  dashed_name: destination-geo-continent-code
  description: Two-letter code representing continent's name.
  example: NA
  flat_name: destination.geo.continent_code
  ignore_above: 1024
  level: core
  name: continent_code
  normalize: []
  original_fieldset: geo
  short: Continent code.
  type: keyword
destination.geo.continent_name:
  dashed_name: destination-geo-continent-name
  description: Name of the continent.
  example: North America
  flat_name: destination.geo.continent_name
  ignore_above: 1024
  level: core
  name: continent_name
  normalize: []
  original_fieldset: geo
  short: Name of the continent.
  type: keyword
destination.geo.country_iso_code:
  dashed_name: destination-geo-country-iso-code
  description: Country ISO code.
  example: CA
  flat_name: destination.geo.country_iso_code
  ignore_above: 1024
  level: core
  name: country_iso_code
  normalize: []
  original_fieldset: geo
  short: Country ISO code.
  type: keyword
destination.geo.country_name:
  dashed_name: destination-geo-country-name
  description: Country name.
  example: Canada
  flat_name: destination.geo.country_name
  ignore_above: 1024
  level: core
  name: country_name
  normalize: []
  original_fieldset: geo
  short: Country name.
  type: keyword
destination.geo.location:
  dashed_name: destination-geo-location
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  flat_name: destination.geo.location
  level: core
  name: location
  normalize: []
  original_fieldset: geo
  short: Longitude and latitude.
  type: geo_point
destination.geo.name:
  dashed_name: destination-geo-name
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  flat_name: destination.geo.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: geo
  short: User-defined description of a location.
  type: keyword
destination.geo.postal_code:
  dashed_name: destination-geo-postal-code
  description: 'Postal code associated with the location.

    Values appropriate for this field may also be known as a postcode or ZIP code
    and will vary widely from country to country.'
  example: 94040
  flat_name: destination.geo.postal_code
  ignore_above: 1024
  level: core
  name: postal_code
  normalize: []
  original_fieldset: geo
  short: Postal code.
  type: keyword
destination.geo.region_iso_code:
  dashed_name: destination-geo-region-iso-code
  description: Region ISO code.
  example: CA-QC
  flat_name: destination.geo.region_iso_code
  ignore_above: 1024
  level: core
  name: region_iso_code
  normalize: []
  original_fieldset: geo
  short: Region ISO code.
  type: keyword
destination.geo.region_name:
  dashed_name: destination-geo-region-name
  description: Region name.
  example: Quebec
  flat_name: destination.geo.region_name
  ignore_above: 1024
  level: core
  name: region_name
  normalize: []
  original_fieldset: geo
  short: Region name.
  type: keyword
destination.geo.timezone:
  dashed_name: destination-geo-timezone
  description: The time zone of the location, such as IANA time zone name.
  example: America/Argentina/Buenos_Aires
  flat_name: destination.geo.timezone
  ignore_above: 1024
  level: core
  name: timezone
  normalize: []
  original_fieldset: geo
  short: Time zone.
  type: keyword
ecs.version:
  dashed_name: ecs-version
  description: 'ECS version this event conforms to. `ecs.version` is a required field
    and must exist in all events.

    When querying across multiple indices -- which may conform to slightly different
    ECS versions -- this field lets integrations adjust to the schema version of the
    events.'
  example: 1.0.0
  flat_name: ecs.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  required: true
  short: ECS version this event conforms to.
  type: keyword
event.action:
  dashed_name: event-action
  description: 'The action captured by the event.

    This describes the information in the event. It is more specific than `event.category`.
    Examples are `group-add`, `process-started`, `file-created`. The value is normally
    defined by the implementer.'
  example: user-password-change
  flat_name: event.action
  ignore_above: 1024
  level: core
  name: action
  normalize: []
  short: The action captured by the event.
  type: keyword
event.category:
  allowed_values:
  - description: Events in this category are related to the challenge and response
      process in which credentials are supplied and verified to allow the creation
      of a session. Common sources for these logs are Windows event logs and ssh logs.
      Visualize and analyze events in this category to look for failed logins, and
      other authentication-related activity.
    expected_event_types:
    - start
    - end
    - info
    name: authentication
  - description: 'Events in the configuration category have to deal with creating,
      modifying, or deleting the settings or parameters of an application, process,
      or system.

      Example sources include security policy change logs, configuration auditing
      logging, and system integrity monitoring.'
    expected_event_types:
    - access
    - change
    - creation
    - deletion
    - info
    name: configuration
  - description: The database category denotes events and metrics relating to a data
      storage and retrieval system. Note that use of this category is not limited
      to relational database systems. Examples include event logs from MS SQL, MySQL,
      Elasticsearch, MongoDB, etc. Use this category to visualize and analyze database
      activity such as accesses and changes.
    expected_event_types:
    - access
    - change
    - info
    - error
    name: database
  - description: 'Events in the driver category have to do with operating system device
      drivers and similar software entities such as Windows drivers, kernel extensions,
      kernel modules, etc.

      Use events and metrics in this category to visualize and analyze driver-related
      activity and status on hosts.'
    expected_event_types:
    - change
    - end
    - info
    - start
    name: driver
  - beta: This event categorization value is beta and subject to change.
    description: 'This category is used for events relating to email messages, email
      attachments, and email network or protocol activity.

      Emails events can be produced by email security gateways, mail transfer agents,
      email cloud service providers, or mail server monitoring applications.'
    expected_event_types:
    - info
    name: email
  - description: Relating to a set of information that has been created on, or has
      existed on a filesystem. Use this category of events to visualize and analyze
      the creation, access, and deletions of files. Events in this category can come
      from both host-based and network-based sources. An example source of a network-based
      detection of a file transfer would be the Zeek file.log.
    expected_event_types:
    - change
    - creation
    - deletion
    - info
    name: file
  - description: 'Use this category to visualize and analyze information such as host
      inventory or host lifecycle events.

      Most of the events in this category can usually be observed from the outside,
      such as from a hypervisor or a control plane''s point of view. Some can also
      be seen from within, such as "start" or "end".

      Note that this category is for information about hosts themselves; it is not
      meant to capture activity "happening on a host".'
    expected_event_types:
    - access
    - change
    - end
    - info
    - start
    name: host
  - description: Identity and access management (IAM) events relating to users, groups,
      and administration. Use this category to visualize and analyze IAM-related logs
      and data from active directory, LDAP, Okta, Duo, and other IAM systems.
    expected_event_types:
    - admin
    - change
    - creation
    - deletion
    - group
    - info
    - user
    name: iam
  - description: Relating to intrusion detections from IDS/IPS systems and functions,
      both network and host-based. Use this category to visualize and analyze intrusion
      detection alerts from systems such as Snort, Suricata, and Palo Alto threat
      detections.
    expected_event_types:
    - allowed
    - denied
    - info
    name: intrusion_detection
  - description: Malware detection events and alerts. Use this category to visualize
      and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
      Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS systems
      such as Suricata, or other sources of malware-related events such as Palo Alto
      Networks threat logs and Wildfire logs.
    expected_event_types:
    - info
    name: malware
  - description: Relating to all network activity, including network connection lifecycle,
      network traffic, and essentially any event that includes an IP address. Many
      events containing decoded network protocol transactions fit into this category.
      Use events in this category to visualize or analyze counts of network ports,
      protocols, addresses, geolocation information, etc.
    expected_event_types:
    - access
    - allowed
    - connection
    - denied
    - end
    - info
    - protocol
    - start
    name: network
  - description: Relating to software packages installed on hosts. Use this category
      to visualize and analyze inventory of software installed on various hosts, or
      to determine host vulnerability in the absence of vulnerability scan data.
    expected_event_types:
    - access
    - change
    - deletion
    - info
    - installation
    - start
    name: package
  - description: Use this category of events to visualize and analyze process-specific
      information such as lifecycle events or process ancestry.
    expected_event_types:
    - access
    - change
    - end
    - info
    - start
    name: process
  - description: Having to do with settings and assets stored in the Windows registry.
      Use this category to visualize and analyze activity such as registry access
      and modifications.
    expected_event_types:
    - access
    - change
    - creation
    - deletion
    name: registry
  - description: The session category is applied to events and metrics regarding logical
      persistent connections to hosts and services. Use this category to visualize
      and analyze interactive or automated persistent connections between assets.
      Data for this category may come from Windows Event logs, SSH logs, or stateless
      sessions such as HTTP cookie-based sessions, etc.
    expected_event_types:
    - start
    - end
    - info
    name: session
  - description: Use this category to visualize and analyze events describing threat
      actors' targets, motives, or behaviors.
    expected_event_types:
    - indicator
    name: threat
  - description: 'Relating to web server access. Use this category to create a dashboard
      of web server/proxy activity from apache, IIS, nginx web servers, etc. Note:
      events from network observers such as Zeek http log may also be included in
      this category.'
    expected_event_types:
    - access
    - error
    - info
    name: web
  dashed_name: event-category
  description: 'This is one of four ECS Categorization Fields, and indicates the second
    level in the ECS category hierarchy.

    `event.category` represents the "big buckets" of ECS categories. For example,
    filtering on `event.category:process` yields all events relating to process activity.
    This field is closely related to `event.type`, which is used as a subcategory.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple categories.'
  example: authentication
  flat_name: event.category
  ignore_above: 1024
  level: core
  name: category
  normalize:
  - array
  short: Event category. The second categorization field in the hierarchy.
  type: keyword
event.code:
  dashed_name: event-code
  description: 'Identification code for this event, if one exists.

    Some event sources use event codes to identify messages unambiguously, regardless
    of message language or wording adjustments over time. An example of this is the
    Windows Event ID.'
  example: 4648
  flat_name: event.code
  ignore_above: 1024
  level: extended
  name: code
  normalize: []
  short: Identification code for this event.
  type: keyword
event.created:
  dashed_name: event-created
  description: 'event.created contains the date/time when the event was first read
    by an agent, or by your pipeline.

    This field is distinct from @timestamp in that @timestamp typically contain the
    time extracted from the original event.

    In most situations, these two timestamps will be slightly different. The difference
    can be used to calculate the delay between your source generating an event, and
    the time when your agent first processed it. This can be used to monitor your
    agent''s or pipeline''s ability to keep up with your event source.

    In case the two timestamps are identical, @timestamp should be used.'
  example: '2016-05-23T08:05:34.857Z'
  flat_name: event.created
  level: core
  name: created
  normalize: []
  short: Time when the event was first read by an agent or by your pipeline.
  type: date
event.dataset:
  dashed_name: event-dataset
  description: 'Name of the dataset.

    If an event source publishes more than one type of log or events (e.g. access
    log, error log), the dataset is used to specify which one the event comes from.

    It''s recommended but not required to start the dataset name with the module name,
    followed by a dot, then the dataset name.'
  example: apache.access
  flat_name: event.dataset
  ignore_above: 1024
  level: core
  name: dataset
  normalize: []
  short: Name of the dataset.
  type: keyword
event.hash:
  dashed_name: event-hash
  description: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
    log integrity.
  example: 123456789012345678901234567890ABCD
  flat_name: event.hash
  ignore_above: 1024
  level: extended
  name: hash
  normalize: []
  short: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
    log integrity.
  type: keyword
event.id:
  dashed_name: event-id
  description: Unique ID to describe the event.
  example: 8a4f500d
  flat_name: event.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique ID to describe the event.
  type: keyword
event.ingested:
  dashed_name: event-ingested
  description: 'Timestamp when an event arrived in the central data store.

    This is different from `@timestamp`, which is when the event originally occurred.  It''s
    also different from `event.created`, which is meant to capture the first time
    an agent saw the event.

    In normal conditions, assuming no tampering, the timestamps should chronologically
    look like this: `@timestamp` < `event.created` < `event.ingested`.'
  example: '2016-05-23T08:05:35.101Z'
  flat_name: event.ingested
  level: core
  name: ingested
  normalize: []
  short: Timestamp when an event arrived in the central data store.
  type: date
event.kind:
  allowed_values:
  - description: 'This value indicates an event such as an alert or notable event,
      triggered by a detection rule executing externally to the Elastic Stack.

      `event.kind:alert` is often populated for events coming from firewalls, intrusion
      detection systems, endpoint detection and response systems, and so on.

      This value is not used by Elastic solutions for alert documents that are created
      by rules executing within the Kibana alerting framework.'
    name: alert
  - description: 'The `enrichment` value indicates an event collected to provide additional
      context, often to other events.

      An example is collecting indicators of compromise (IOCs) from a threat intelligence
      provider with the intent to use those values to enrich other events. The IOC
      events from the intelligence provider should be categorized as `event.kind:enrichment`.'
    name: enrichment
  - description: This value is the most general and most common value for this field.
      It is used to represent events that indicate that something happened.
    name: event
  - description: 'This value is used to indicate that this event describes a numeric
      measurement taken at given point in time.

      Examples include CPU utilization, memory usage, or device temperature.

      Metric events are often collected on a predictable frequency, such as once every
      few seconds, or once a minute, but can also be used to describe ad-hoc numeric
      metric queries.'
    name: metric
  - description: 'The state value is similar to metric, indicating that this event
      describes a measurement taken at given point in time, except that the measurement
      does not result in a numeric value, but rather one of a fixed set of categorical
      values that represent conditions or states.

      Examples include periodic events reporting Elasticsearch cluster state (green/yellow/red),
      the state of a TCP connection (open, closed, fin_wait, etc.), the state of a
      host with respect to a software vulnerability (vulnerable, not vulnerable),
      and the state of a system regarding compliance with a regulatory standard (compliant,
      not compliant).

      Note that an event that describes a change of state would not use `event.kind:state`,
      but instead would use ''event.kind:event'' since a state change fits the more
      general event definition of something that happened.

      State events are often collected on a predictable frequency, such as once every
      few seconds, once a minute, once an hour, or once a day, but can also be used
      to describe ad-hoc state queries.'
    name: state
  - description: This value indicates that an error occurred during the ingestion
      of this event, and that event data may be missing, inconsistent, or incorrect.
      `event.kind:pipeline_error` is often associated with parsing errors.
    name: pipeline_error
  - description: 'This value is used by Elastic solutions (e.g., Security, Observability)
      for alert documents that are created by rules executing within the Kibana alerting
      framework.

      Usage of this value is reserved, and data ingestion pipelines must not populate
      `event.kind` with the value "signal".'
    name: signal
  dashed_name: event-kind
  description: 'This is one of four ECS Categorization Fields, and indicates the highest
    level in the ECS category hierarchy.

    `event.kind` gives high-level information about what type of information the event
    contains, without being specific to the contents of the event. For example, values
    of this field distinguish alert events from metric events.

    The value of this field can be used to inform how these kinds of events should
    be handled. They may warrant different retention, different access control, it
    may also help understand whether the data coming in at a regular interval or not.'
  example: alert
  flat_name: event.kind
  ignore_above: 1024
  level: core
  name: kind
  normalize: []
  short: The kind of the event. The highest categorization field in the hierarchy.
  type: keyword
event.module:
  dashed_name: event-module
  description: 'Name of the module this data is coming from.

    If your monitoring agent supports the concept of modules or plugins to process
    events of a given source (e.g. Apache logs), `event.module` should contain the
    name of this module.'
  example: apache
  flat_name: event.module
  ignore_above: 1024
  level: core
  name: module
  normalize: []
  short: Name of the module this data is coming from.
  type: keyword
event.outcome:
  allowed_values:
  - description: Indicates that this event describes a failed result. A common example
      is `event.category:file AND event.type:access AND event.outcome:failure` to
      indicate that a file access was attempted, but was not successful.
    name: failure
  - description: Indicates that this event describes a successful result. A common
      example is `event.category:file AND event.type:create AND event.outcome:success`
      to indicate that a file was successfully created.
    name: success
  - description: Indicates that this event describes only an attempt for which the
      result is unknown from the perspective of the event producer. For example, if
      the event contains information only about the request side of a transaction
      that results in a response, populating `event.outcome:unknown` in the request
      event is appropriate. The unknown value should not be used when an outcome doesn't
      make logical sense for the event. In such cases `event.outcome` should not be
      populated.
    name: unknown
  dashed_name: event-outcome
  description: 'This is one of four ECS Categorization Fields, and indicates the lowest
    level in the ECS category hierarchy.

    `event.outcome` simply denotes whether the event represents a success or a failure
    from the perspective of the entity that produced the event.

    Note that when a single transaction is described in multiple events, each event
    may populate different values of `event.outcome`, according to their perspective.

    Also note that in the case of a compound event (a single event that contains multiple
    logical events), this field should be populated with the value that best captures
    the overall success or failure from the perspective of the event producer.

    Further note that not all events will have an associated outcome. For example,
    this field is generally not populated for metric events, events with `event.type:info`,
    or any events for which an outcome does not make logical sense.'
  example: success
  flat_name: event.outcome
  ignore_above: 1024
  level: core
  name: outcome
  normalize: []
  short: The outcome of the event. The lowest level categorization field in the hierarchy.
  type: keyword
event.provider:
  dashed_name: event-provider
  description: 'Source of the event.

    Event transports such as Syslog or the Windows Event Log typically mention the
    source of an event. It can be the name of the software that generated the event
    (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).'
  example: kernel
  flat_name: event.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  short: Source of the event.
  type: keyword
event.sequence:
  dashed_name: event-sequence
  description: 'Sequence number of the event.

    The sequence number is a value published by some event sources, to make the exact
    ordering of events unambiguous, regardless of the timestamp precision.'
  flat_name: event.sequence
  format: string
  level: extended
  name: sequence
  normalize: []
  short: Sequence number of the event.
  type: long
event.severity:
  dashed_name: event-severity
  description: 'The numeric severity of the event according to your event source.

    What the different severity values mean can be different between sources and use
    cases. It''s up to the implementer to make sure severities are consistent across
    events from the same source.

    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is
    meant to represent the severity according to the event source (e.g. firewall,
    IDS). If the event source does not publish its own severity, you may optionally
    copy the `log.syslog.severity.code` to `event.severity`.'
  example: 7
  flat_name: event.severity
  format: string
  level: core
  name: severity
  normalize: []
  short: Numeric severity of the event.
  type: long
event.type:
  allowed_values:
  - description: The access event type is used for the subset of events within a category
      that indicate that something was accessed. Common examples include `event.category:database
      AND event.type:access`, or `event.category:file AND event.type:access`. Note
      for file access, both directory listings and file opens should be included in
      this subcategory. You can further distinguish access operations using the ECS
      `event.action` field.
    name: access
  - description: 'The admin event type is used for the subset of events within a category
      that are related to admin objects. For example, administrative changes within
      an IAM framework that do not specifically affect a user or group (e.g., adding
      new applications to a federation solution or connecting discrete forests in
      Active Directory) would fall into this subcategory. Common example: `event.category:iam
      AND event.type:change AND event.type:admin`. You can further distinguish admin
      operations using the ECS `event.action` field.'
    name: admin
  - description: The allowed event type is used for the subset of events within a
      category that indicate that something was allowed. Common examples include `event.category:network
      AND event.type:connection AND event.type:allowed` (to indicate a network firewall
      event for which the firewall disposition was to allow the connection to complete)
      and `event.category:intrusion_detection AND event.type:allowed` (to indicate
      a network intrusion prevention system event for which the IPS disposition was
      to allow the connection to complete). You can further distinguish allowed operations
      using the ECS `event.action` field, populating with values of your choosing,
      such as "allow", "detect", or "pass".
    name: allowed
  - description: The change event type is used for the subset of events within a category
      that indicate that something has changed. If semantics best describe an event
      as modified, then include them in this subcategory. Common examples include
      `event.category:process AND event.type:change`, and `event.category:file AND
      event.type:change`. You can further distinguish change operations using the
      ECS `event.action` field.
    name: change
  - description: Used primarily with `event.category:network` this value is used for
      the subset of network traffic that includes sufficient information for the event
      to be included in flow or connection analysis. Events in this subcategory will
      contain at least source and destination IP addresses, source and destination
      TCP/UDP ports, and will usually contain counts of bytes and/or packets transferred.
      Events in this subcategory may contain unidirectional or bidirectional information,
      including summary information. Use this subcategory to visualize and analyze
      network connections. Flow analysis, including Netflow, IPFIX, and other flow-related
      events fit in this subcategory. Note that firewall events from many Next-Generation
      Firewall (NGFW) devices will also fit into this subcategory.  A common filter
      for flow/connection information would be `event.category:network AND event.type:connection
      AND event.type:end` (to view or analyze all completed network connections, ignoring
      mid-flow reports). You can further distinguish connection events using the ECS
      `event.action` field, populating with values of your choosing, such as "timeout",
      or "reset".
    name: connection
  - description: The "creation" event type is used for the subset of events within
      a category that indicate that something was created. A common example is `event.category:file
      AND event.type:creation`.
    name: creation
  - description: The deletion event type is used for the subset of events within a
      category that indicate that something was deleted. A common example is `event.category:file
      AND event.type:deletion` to indicate that a file has been deleted.
    name: deletion
  - description: The denied event type is used for the subset of events within a category
      that indicate that something was denied. Common examples include `event.category:network
      AND event.type:denied` (to indicate a network firewall event for which the firewall
      disposition was to deny the connection) and `event.category:intrusion_detection
      AND event.type:denied` (to indicate a network intrusion prevention system event
      for which the IPS disposition was to deny the connection to complete). You can
      further distinguish denied operations using the ECS `event.action` field, populating
      with values of your choosing, such as "blocked", "dropped", or "quarantined".
    name: denied
  - description: The end event type is used for the subset of events within a category
      that indicate something has ended. A common example is `event.category:process
      AND event.type:end`.
    name: end
  - description: The error event type is used for the subset of events within a category
      that indicate or describe an error. A common example is `event.category:database
      AND event.type:error`. Note that pipeline errors that occur during the event
      ingestion process should not use this `event.type` value. Instead, they should
      use `event.kind:pipeline_error`.
    name: error
  - description: 'The group event type is used for the subset of events within a category
      that are related to group objects. Common example: `event.category:iam AND event.type:creation
      AND event.type:group`. You can further distinguish group operations using the
      ECS `event.action` field.'
    name: group
  - description: 'The indicator event type is used for the subset of events within
      a category that contain details about indicators of compromise (IOCs).

      A common example is `event.category:threat AND event.type:indicator`.'
    name: indicator
  - description: The info event type is used for the subset of events within a category
      that indicate that they are purely informational, and don't report a state change,
      or any type of action. For example, an initial run of a file integrity monitoring
      system (FIM), where an agent reports all files under management, would fall
      into the "info" subcategory. Similarly, an event containing a dump of all currently
      running processes (as opposed to reporting that a process started/ended) would
      fall into the "info" subcategory. An additional common examples is `event.category:intrusion_detection
      AND event.type:info`.
    name: info
  - description: The installation event type is used for the subset of events within
      a category that indicate that something was installed. A common example is `event.category:package`
      AND `event.type:installation`.
    name: installation
  - description: The protocol event type is used for the subset of events within a
      category that indicate that they contain protocol details or analysis, beyond
      simply identifying the protocol. Generally, network events that contain specific
      protocol details will fall into this subcategory. A common example is `event.category:network
      AND event.type:protocol AND event.type:connection AND event.type:end` (to indicate
      that the event is a network connection event sent at the end of a connection
      that also includes a protocol detail breakdown). Note that events that only
      indicate the name or id of the protocol should not use the protocol value. Further
      note that when the protocol subcategory is used, the identified protocol is
      populated in the ECS `network.protocol` field.
    name: protocol
  - description: The start event type is used for the subset of events within a category
      that indicate something has started. A common example is `event.category:process
      AND event.type:start`.
    name: start
  - description: 'The user event type is used for the subset of events within a category
      that are related to user objects. Common example: `event.category:iam AND event.type:deletion
      AND event.type:user`. You can further distinguish user operations using the
      ECS `event.action` field.'
    name: user
  dashed_name: event-type
  description: 'This is one of four ECS Categorization Fields, and indicates the third
    level in the ECS category hierarchy.

    `event.type` represents a categorization "sub-bucket" that, when used along with
    the `event.category` field values, enables filtering events down to a level appropriate
    for single visualization.

    This field is an array. This will allow proper categorization of some events that
    fall in multiple event types.'
  flat_name: event.type
  ignore_above: 1024
  level: core
  name: type
  normalize:
  - array
  short: Event type. The third categorization field in the hierarchy.
  type: keyword
group.Ext:
  dashed_name: group-Ext
  description: Object for all custom defined fields to live in.
  flat_name: group.Ext
  level: custom
  name: Ext
  normalize: []
  short: Object for all custom defined fields to live in.
  type: object
group.Ext.real:
  dashed_name: group-Ext-real
  description: Group info prior to any setgid operations.
  flat_name: group.Ext.real
  level: custom
  name: Ext.real
  normalize: []
  short: Group info prior to any setgid operations.
  type: object
group.Ext.real.id:
  dashed_name: group-Ext-real-id
  description: Unique identifier for the group on the system/platform.
  flat_name: group.Ext.real.id
  ignore_above: 1024
  level: custom
  name: Ext.real.id
  normalize: []
  short: Unique identifier for the group on the system/platform.
  type: keyword
group.Ext.real.name:
  dashed_name: group-Ext-real-name
  description: Name of the group.
  flat_name: group.Ext.real.name
  ignore_above: 1024
  level: custom
  name: Ext.real.name
  normalize: []
  short: Name of the group.
  type: keyword
group.domain:
  dashed_name: group-domain
  description: Name of the directory the group is a member of. For example, an LDAP
    or Active Directory domain name.
  flat_name: group.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  short: Name of the directory the group is a member of.
  type: keyword
group.id:
  dashed_name: group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  short: Unique identifier for the group on the system/platform.
  type: keyword
group.name:
  dashed_name: group-name
  description: Name of the group.
  flat_name: group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  short: Name of the group.
  type: keyword
host.architecture:
  dashed_name: host-architecture
  description: Operating system architecture.
  example: x86_64
  flat_name: host.architecture
  ignore_above: 1024
  level: core
  name: architecture
  normalize: []
  short: Operating system architecture.
  type: keyword
host.boot.id:
  dashed_name: host-boot-id
  description: Linux boot uuid taken from /proc/sys/kernel/random/boot_id. Note the
    boot_id value from /proc may or may not be the same in containers as on the host.
    Some container runtimes will bind mount a new boot_id value onto the proc file
    in each container.
  flat_name: host.boot.id
  ignore_above: 1024
  level: extended
  name: boot.id
  normalize: []
  short: Linux boot uuid taken from /proc/sys/kernel/random/boot_id
  type: keyword
host.domain:
  dashed_name: host-domain
  description: 'Name of the domain of which the host is a member.

    For example, on Windows this could be the host''s Active Directory domain or NetBIOS
    domain name. For Linux this could be the domain of the host''s LDAP provider.'
  example: CONTOSO
  flat_name: host.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  short: Name of the directory the group is a member of.
  type: keyword
host.hostname:
  dashed_name: host-hostname
  description: 'Hostname of the host.

    It normally contains what the `hostname` command returns on the host machine.'
  flat_name: host.hostname
  ignore_above: 1024
  level: core
  name: hostname
  normalize: []
  short: Hostname of the host.
  type: keyword
host.id:
  dashed_name: host-id
  description: 'Unique host id.

    As hostname is not always unique, use values that are meaningful in your environment.

    Example: The current usage of `beat.name`.'
  flat_name: host.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique host id.
  type: keyword
host.ip:
  dashed_name: host-ip
  description: Host ip addresses.
  flat_name: host.ip
  level: core
  name: ip
  normalize:
  - array
  short: Host ip addresses.
  type: ip
host.mac:
  dashed_name: host-mac
  description: 'Host MAC addresses.

    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte)
    is represented by two [uppercase] hexadecimal digits giving the value of the octet
    as an unsigned integer. Successive octets are separated by a hyphen.'
  example: '["00-00-5E-00-53-23", "00-00-5E-00-53-24"]'
  flat_name: host.mac
  ignore_above: 1024
  level: core
  name: mac
  normalize:
  - array
  short: Host MAC addresses.
  type: keyword
host.name:
  dashed_name: host-name
  description: 'Name of the host.

    It can contain what `hostname` returns on Unix systems, the fully qualified domain
    name, or a name specified by the user. The sender decides which value to use.'
  flat_name: host.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Name of the host.
  type: keyword
host.os.Ext:
  dashed_name: host-os-Ext
  description: Object for all custom defined fields to live in.
  flat_name: host.os.Ext
  level: custom
  name: Ext
  normalize: []
  original_fieldset: os
  short: Object for all custom defined fields to live in.
  type: object
host.os.Ext.variant:
  dashed_name: host-os-Ext-variant
  description: A string value or phrase that further aid to classify or qualify the
    operating system (OS).  For example the distribution for a Linux OS will be entered
    in this field.
  example: Ubuntu
  flat_name: host.os.Ext.variant
  ignore_above: 1024
  level: custom
  name: Ext.variant
  normalize: []
  original_fieldset: os
  short: A string value or phrase that further aid to classify or qualify the operating
    system (OS).
  type: keyword
host.os.family:
  dashed_name: host-os-family
  description: OS family (such as redhat, debian, freebsd, windows).
  example: debian
  flat_name: host.os.family
  ignore_above: 1024
  level: extended
  name: family
  normalize: []
  original_fieldset: os
  short: OS family (such as redhat, debian, freebsd, windows).
  type: keyword
host.os.full:
  dashed_name: host-os-full
  description: Operating system name, including the version or code name.
  example: Mac OS Mojave
  flat_name: host.os.full
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: host.os.full.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: host.os.full.text
    name: text
    norms: false
    type: text
  name: full
  normalize: []
  original_fieldset: os
  short: Operating system name, including the version or code name.
  type: keyword
host.os.kernel:
  dashed_name: host-os-kernel
  description: Operating system kernel version as a raw string.
  example: 4.4.0-112-generic
  flat_name: host.os.kernel
  ignore_above: 1024
  level: extended
  name: kernel
  normalize: []
  original_fieldset: os
  short: Operating system kernel version as a raw string.
  type: keyword
host.os.name:
  dashed_name: host-os-name
  description: Operating system name, without the version.
  example: Mac OS X
  flat_name: host.os.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: host.os.name.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: host.os.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: os
  short: Operating system name, without the version.
  type: keyword
host.os.platform:
  dashed_name: host-os-platform
  description: Operating system platform (such centos, ubuntu, windows).
  example: darwin
  flat_name: host.os.platform
  ignore_above: 1024
  level: extended
  name: platform
  normalize: []
  original_fieldset: os
  short: Operating system platform (such centos, ubuntu, windows).
  type: keyword
host.os.version:
  dashed_name: host-os-version
  description: Operating system version as a raw string.
  example: 10.14.1
  flat_name: host.os.version
  ignore_above: 1024
  level: extended
  name: version
  normalize: []
  original_fieldset: os
  short: Operating system version as a raw string.
  type: keyword
host.pid_ns_ino:
  dashed_name: host-pid-ns-ino
  description: This is the inode number of the namespace in the namespace file system
    (nsfs). Unsigned int inum in include/linux/ns_common.h.
  flat_name: host.pid_ns_ino
  ignore_above: 1024
  level: extended
  name: pid_ns_ino
  normalize: []
  short: Pid namespace inode
  type: keyword
host.type:
  dashed_name: host-type
  description: 'Type of host.

    For Cloud providers this can be the machine type like `t2.medium`. If vm, this
    could be the container, for example, or other information meaningful in your environment.'
  flat_name: host.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  short: Type of host.
  type: keyword
host.uptime:
  dashed_name: host-uptime
  description: Seconds the host has been up.
  example: 1325
  flat_name: host.uptime
  level: extended
  name: uptime
  normalize: []
  short: Seconds the host has been up.
  type: long
message:
  dashed_name: message
  description: 'For log events the message field contains the log message, optimized
    for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated
    to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World
  flat_name: message
  level: core
  name: message
  normalize: []
  short: Log message optimized for viewing in a log viewer.
  type: match_only_text
package.name:
  dashed_name: package-name
  description: Package name
  example: go
  flat_name: package.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  short: Package name
  type: keyword
process.Ext:
  dashed_name: process-Ext
  description: Object for all custom defined fields to live in.
  flat_name: process.Ext
  level: custom
  name: Ext
  normalize: []
  short: Object for all custom defined fields to live in.
  type: object
process.Ext.ancestry:
  dashed_name: process-Ext-ancestry
  description: An array of entity_ids indicating the ancestors for this event
  flat_name: process.Ext.ancestry
  ignore_above: 1024
  level: custom
  name: Ext.ancestry
  normalize: []
  short: An array of entity_ids indicating the ancestors for this event
  type: keyword
process.Ext.architecture:
  dashed_name: process-Ext-architecture
  description: Process architecture.  It can differ from host architecture.
  example: x86_64
  flat_name: process.Ext.architecture
  ignore_above: 1024
  level: custom
  name: Ext.architecture
  normalize: []
  short: Process architecture.  It can differ from host architecture.
  type: keyword
process.Ext.authentication_id:
  dashed_name: process-Ext-authentication-id
  description: Process authentication ID
  flat_name: process.Ext.authentication_id
  ignore_above: 1024
  level: custom
  name: Ext.authentication_id
  normalize: []
  short: Process authentication ID
  type: keyword
process.Ext.code_signature:
  dashed_name: process-Ext-code-signature
  description: Nested version of ECS code_signature fieldset.
  flat_name: process.Ext.code_signature
  level: custom
  name: Ext.code_signature
  normalize: []
  short: Nested version of ECS code_signature fieldset.
  type: nested
process.Ext.code_signature.exists:
  dashed_name: process-Ext-code-signature-exists
  description: Boolean to capture if a signature is present.
  example: 'true'
  flat_name: process.Ext.code_signature.exists
  level: custom
  name: Ext.code_signature.exists
  normalize: []
  short: Boolean to capture if a signature is present.
  type: boolean
process.Ext.code_signature.status:
  dashed_name: process-Ext-code-signature-status
  description: 'Additional information about the certificate status.

    This is useful for logging cryptographic errors with the certificate validity
    or trust status. Leave unpopulated if the validity or trust of the certificate
    was unchecked.'
  example: ERROR_UNTRUSTED_ROOT
  flat_name: process.Ext.code_signature.status
  ignore_above: 1024
  level: custom
  name: Ext.code_signature.status
  normalize: []
  short: Additional information about the certificate status.
  type: keyword
process.Ext.code_signature.subject_name:
  dashed_name: process-Ext-code-signature-subject-name
  description: Subject name of the code signer
  example: Microsoft Corporation
  flat_name: process.Ext.code_signature.subject_name
  ignore_above: 1024
  level: custom
  name: Ext.code_signature.subject_name
  normalize: []
  short: Subject name of the code signer
  type: keyword
process.Ext.code_signature.trusted:
  dashed_name: process-Ext-code-signature-trusted
  description: 'Stores the trust status of the certificate chain.

    Validating the trust of the certificate chain may be complicated, and this field
    should only be populated by tools that actively check the status.'
  example: 'true'
  flat_name: process.Ext.code_signature.trusted
  level: custom
  name: Ext.code_signature.trusted
  normalize: []
  short: Stores the trust status of the certificate chain.
  type: boolean
process.Ext.code_signature.valid:
  dashed_name: process-Ext-code-signature-valid
  description: 'Boolean to capture if the digital signature is verified against the
    binary content.

    Leave unpopulated if a certificate was unchecked.'
  example: 'true'
  flat_name: process.Ext.code_signature.valid
  level: custom
  name: Ext.code_signature.valid
  normalize: []
  short: Boolean to capture if the digital signature is verified against the binary
    content.
  type: boolean
process.Ext.defense_evasions:
  dashed_name: process-Ext-defense-evasions
  description: List of defense evasions found in this process. These defense evasions
    can make it harder to inspect a process and/or cause abnormal OS behavior. Examples
    tools that can cause defense evasions include Process Doppelganging and Process
    Herpaderping.
  flat_name: process.Ext.defense_evasions
  ignore_above: 1024
  level: custom
  name: Ext.defense_evasions
  normalize: []
  short: List of defense evasions found in this process.
  type: keyword
process.Ext.dll.Ext:
  dashed_name: process-Ext-dll-Ext
  description: Object for all custom defined fields to live in.
  flat_name: process.Ext.dll.Ext
  level: custom
  name: Ext
  normalize: []
  original_fieldset: dll
  short: Object for all custom defined fields to live in.
  type: object
process.Ext.dll.Ext.mapped_address:
  dashed_name: process-Ext-dll-Ext-mapped-address
  description: The base address where this module is loaded.
  flat_name: process.Ext.dll.Ext.mapped_address
  level: custom
  name: Ext.mapped_address
  normalize: []
  original_fieldset: dll
  short: The base address where this module is loaded.
  type: unsigned_long
process.Ext.dll.Ext.mapped_size:
  dashed_name: process-Ext-dll-Ext-mapped-size
  description: The size of this module's memory mapping, in bytes.
  flat_name: process.Ext.dll.Ext.mapped_size
  level: custom
  name: Ext.mapped_size
  normalize: []
  original_fieldset: dll
  short: The size of this module's memory mapping, in bytes.
  type: unsigned_long
process.Ext.dll.name:
  dashed_name: process-Ext-dll-name
  description: 'Name of the library.

    This generally maps to the name of the file on disk.'
  example: kernel32.dll
  flat_name: process.Ext.dll.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  original_fieldset: dll
  short: Name of the library.
  type: keyword
process.Ext.dll.path:
  dashed_name: process-Ext-dll-path
  description: Full file path of the library.
  example: C:\Windows\System32\kernel32.dll
  flat_name: process.Ext.dll.path
  ignore_above: 1024
  level: extended
  name: path
  normalize: []
  original_fieldset: dll
  short: Full file path of the library.
  type: keyword
process.Ext.protection:
  dashed_name: process-Ext-protection
  description: Indicates the protection level of this process.  Uses the same syntax
    as Process Explorer. Examples include PsProtectedSignerWinTcb, PsProtectedSignerWinTcb-Light,
    and PsProtectedSignerWindows-Light.
  flat_name: process.Ext.protection
  ignore_above: 1024
  level: custom
  name: Ext.protection
  normalize: []
  short: OS-level protections granted to this process
  type: keyword
process.Ext.session:
  dashed_name: process-Ext-session
  description: Session information for the current process
  flat_name: process.Ext.session
  ignore_above: 1024
  level: custom
  name: Ext.session
  normalize: []
  short: Session information for the current process
  type: keyword
process.Ext.token.elevation:
  dashed_name: process-Ext-token-elevation
  description: Whether the token is elevated or not
  flat_name: process.Ext.token.elevation
  level: custom
  name: elevation
  normalize: []
  original_fieldset: token
  short: Whether the token is elevated or not
  type: boolean
process.Ext.token.elevation_level:
  dashed_name: process-Ext-token-elevation-level
  description: What level of elevation the token has
  example: one of "default", "full", "limited"
  flat_name: process.Ext.token.elevation_level
  ignore_above: 1024
  level: custom
  name: elevation_level
  normalize: []
  original_fieldset: token
  short: What level of elevation the token has
  type: keyword
process.Ext.token.elevation_type:
  dashed_name: process-Ext-token-elevation-type
  description: What level of elevation the token has
  example: one of "default", "full", "limited"
  flat_name: process.Ext.token.elevation_type
  ignore_above: 1024
  level: custom
  name: elevation_type
  normalize: []
  original_fieldset: token
  short: What level of elevation the token has
  type: keyword
process.Ext.token.integrity_level_name:
  dashed_name: process-Ext-token-integrity-level-name
  description: Human readable integrity level.
  example: one of "system", "high", "medium", "low", "untrusted"
  flat_name: process.Ext.token.integrity_level_name
  ignore_above: 1024
  level: custom
  name: integrity_level_name
  normalize: []
  original_fieldset: token
  short: Human readable integrity level.
  type: keyword
process.Ext.token.security_attributes:
  dashed_name: process-Ext-token-security-attributes
  description: Array of security attributes of the token, retrieved via the  TokenSecurityAttributes
    class.
  example: TSA://ProcUnique, LUA://DecHdAutoAp
  flat_name: process.Ext.token.security_attributes
  ignore_above: 1024
  level: custom
  name: security_attributes
  normalize: []
  original_fieldset: token
  short: Array of security attributes of the token, retrieved via the  TokenSecurityAttributes
    class.
  type: keyword
process.args:
  dashed_name: process-args
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
  flat_name: process.args
  ignore_above: 1024
  level: extended
  name: args
  normalize:
  - array
  short: Array of process arguments.
  type: keyword
process.args_count:
  dashed_name: process-args-count
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  flat_name: process.args_count
  level: extended
  name: args_count
  normalize: []
  short: Length of the process.args array.
  type: long
process.code_signature.exists:
  dashed_name: process-code-signature-exists
  description: Boolean to capture if a signature is present.
  example: 'true'
  flat_name: process.code_signature.exists
  level: core
  name: exists
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if a signature is present.
  type: boolean
process.code_signature.signing_id:
  dashed_name: process-code-signature-signing-id
  description: 'The identifier used to sign the process.

    This is used to identify the application manufactured by a software vendor. The
    field is relevant to Apple *OS only.'
  example: com.apple.xpc.proxy
  flat_name: process.code_signature.signing_id
  ignore_above: 1024
  level: extended
  name: signing_id
  normalize: []
  original_fieldset: code_signature
  short: The identifier used to sign the process.
  type: keyword
process.code_signature.status:
  dashed_name: process-code-signature-status
  description: 'Additional information about the certificate status.

    This is useful for logging cryptographic errors with the certificate validity
    or trust status. Leave unpopulated if the validity or trust of the certificate
    was unchecked.'
  example: ERROR_UNTRUSTED_ROOT
  flat_name: process.code_signature.status
  ignore_above: 1024
  level: extended
  name: status
  normalize: []
  original_fieldset: code_signature
  short: Additional information about the certificate status.
  type: keyword
process.code_signature.subject_name:
  dashed_name: process-code-signature-subject-name
  description: Subject name of the code signer
  example: Microsoft Corporation
  flat_name: process.code_signature.subject_name
  ignore_above: 1024
  level: core
  name: subject_name
  normalize: []
  original_fieldset: code_signature
  short: Subject name of the code signer
  type: keyword
process.code_signature.team_id:
  dashed_name: process-code-signature-team-id
  description: 'The team identifier used to sign the process.

    This is used to identify the team or vendor of a software product. The field is
    relevant to Apple *OS only.'
  example: EQHXZ8M8AV
  flat_name: process.code_signature.team_id
  ignore_above: 1024
  level: extended
  name: team_id
  normalize: []
  original_fieldset: code_signature
  short: The team identifier used to sign the process.
  type: keyword
process.code_signature.trusted:
  dashed_name: process-code-signature-trusted
  description: 'Stores the trust status of the certificate chain.

    Validating the trust of the certificate chain may be complicated, and this field
    should only be populated by tools that actively check the status.'
  example: 'true'
  flat_name: process.code_signature.trusted
  level: extended
  name: trusted
  normalize: []
  original_fieldset: code_signature
  short: Stores the trust status of the certificate chain.
  type: boolean
process.code_signature.valid:
  dashed_name: process-code-signature-valid
  description: 'Boolean to capture if the digital signature is verified against the
    binary content.

    Leave unpopulated if a certificate was unchecked.'
  example: 'true'
  flat_name: process.code_signature.valid
  level: extended
  name: valid
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if the digital signature is verified against the binary
    content.
  type: boolean
process.command_line:
  dashed_name: process-command-line
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  flat_name: process.command_line
  level: extended
  multi_fields:
  - flat_name: process.command_line.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.command_line.text
    name: text
    norms: false
    type: text
  name: command_line
  normalize: []
  short: Full command line that started the process.
  type: wildcard
process.entity_id:
  dashed_name: process-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  short: Unique identifier for the process.
  type: keyword
process.entry_leader.args:
  dashed_name: process-entry-leader-args
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
  flat_name: process.entry_leader.args
  ignore_above: 1024
  level: extended
  name: args
  normalize:
  - array
  original_fieldset: process
  short: Array of process arguments.
  type: keyword
process.entry_leader.args_count:
  dashed_name: process-entry-leader-args-count
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  flat_name: process.entry_leader.args_count
  level: extended
  name: args_count
  normalize: []
  original_fieldset: process
  short: Length of the process.args array.
  type: long
process.entry_leader.command_line:
  dashed_name: process-entry-leader-command-line
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  flat_name: process.entry_leader.command_line
  level: extended
  multi_fields:
  - flat_name: process.entry_leader.command_line.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.entry_leader.command_line.text
    name: text
    norms: false
    type: text
  name: command_line
  normalize: []
  original_fieldset: process
  short: Full command line that started the process.
  type: wildcard
process.entry_leader.entity_id:
  dashed_name: process-entry-leader-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.entry_leader.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.entry_leader.entry_meta.source.ip:
  dashed_name: process-entry-leader-entry-meta-source-ip
  description: IP address of the source (IPv4 or IPv6).
  flat_name: process.entry_leader.entry_meta.source.ip
  level: core
  name: ip
  normalize: []
  original_fieldset: source
  short: IP address of the source.
  type: ip
process.entry_leader.entry_meta.type:
  dashed_name: process-entry-leader-entry-meta-type
  description: 'The entry type for the entry session leader. Values include: init(e.g
    systemd), sshd, ssm, kubelet, teleport, terminal, console'
  flat_name: process.entry_leader.entry_meta.type
  ignore_above: 1024
  level: extended
  name: entry_meta.type
  normalize: []
  original_fieldset: process
  short: The entry type for the entry session leader.
  type: keyword
process.entry_leader.executable:
  dashed_name: process-entry-leader-executable
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  flat_name: process.entry_leader.executable
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.entry_leader.executable.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.entry_leader.executable.text
    name: text
    norms: false
    type: text
  name: executable
  normalize: []
  original_fieldset: process
  short: Absolute path to the process executable.
  type: keyword
process.entry_leader.group.id:
  dashed_name: process-entry-leader-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.entry_leader.group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.entry_leader.group.name:
  dashed_name: process-entry-leader-group-name
  description: Name of the group.
  flat_name: process.entry_leader.group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.entry_leader.interactive:
  dashed_name: process-entry-leader-interactive
  description: 'Whether the process is connected to an interactive shell.

    Process interactivity is infered from the processes file descriptors. If the character
    device for the controlling tty is the same as stdin and stderr for the process,
    the process is considered interactive.

    Note: A non-interactive process can belong to an interactive session and is simply
    one that does not have open file descriptors reading the controlling TTY on FD
    0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process
    is still considered interactive if stdin and stderr are connected to the controlling
    TTY.'
  flat_name: process.entry_leader.interactive
  level: extended
  name: interactive
  normalize: []
  original_fieldset: process
  short: Whether the process is connected to an interactive shell.
  type: boolean
process.entry_leader.name:
  dashed_name: process-entry-leader-name
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  flat_name: process.entry_leader.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.entry_leader.name.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.entry_leader.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: process
  short: Process name.
  type: keyword
process.entry_leader.parent.entity_id:
  dashed_name: process-entry-leader-parent-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.entry_leader.parent.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.entry_leader.parent.pid:
  dashed_name: process-entry-leader-parent-pid
  description: Process id.
  example: 4242
  flat_name: process.entry_leader.parent.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.entry_leader.parent.session_leader.entity_id:
  dashed_name: process-entry-leader-parent-session-leader-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.entry_leader.parent.session_leader.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.entry_leader.parent.session_leader.pid:
  dashed_name: process-entry-leader-parent-session-leader-pid
  description: Process id.
  example: 4242
  flat_name: process.entry_leader.parent.session_leader.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.entry_leader.parent.session_leader.start:
  dashed_name: process-entry-leader-parent-session-leader-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.entry_leader.parent.session_leader.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.entry_leader.parent.start:
  dashed_name: process-entry-leader-parent-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.entry_leader.parent.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.entry_leader.pid:
  dashed_name: process-entry-leader-pid
  description: Process id.
  example: 4242
  flat_name: process.entry_leader.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.entry_leader.real_group.id:
  dashed_name: process-entry-leader-real-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.entry_leader.real_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.entry_leader.real_group.name:
  dashed_name: process-entry-leader-real-group-name
  description: Name of the group.
  flat_name: process.entry_leader.real_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.entry_leader.real_user.id:
  dashed_name: process-entry-leader-real-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.entry_leader.real_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.entry_leader.real_user.name:
  dashed_name: process-entry-leader-real-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.entry_leader.real_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.entry_leader.real_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.entry_leader.same_as_process:
  dashed_name: process-entry-leader-same-as-process
  description: 'This boolean is used to identify if a leader process is the same as
    the top level process.

    For example, if process.group_leader.same_as_process = true, it means the process
    event in question is the leader of its process group. Details under process.*
    like pid would be the same under process.group_leader.*

    The same applies for both process.session_leader and process.entry_leader.

    This field exists to the benefit of EQL and other rule engines since it''s not
    possible to compare equality between two fields in a single document.

    e.g

    process.entity_id = process.group_leader.entity_id (top level process is the process
    group leader)

    OR

    process.entity_id = process.entry_leader.entity_id (top level process is the entry
    session leader)

    Instead these rules could be written like:

    process.group_leader.same_as_process: true

    OR

    process.entry_leader.same_as_process: true

    Note: This field is only set on process.entry_leader, process.session_leader and
    process.group_leader.'
  flat_name: process.entry_leader.same_as_process
  level: extended
  name: same_as_process
  normalize: []
  original_fieldset: process
  short: This boolean is used to identify if a leader process is the same as the top
    level process.
  type: boolean
process.entry_leader.saved_group.id:
  dashed_name: process-entry-leader-saved-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.entry_leader.saved_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.entry_leader.saved_group.name:
  dashed_name: process-entry-leader-saved-group-name
  description: Name of the group.
  flat_name: process.entry_leader.saved_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.entry_leader.saved_user.id:
  dashed_name: process-entry-leader-saved-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.entry_leader.saved_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.entry_leader.saved_user.name:
  dashed_name: process-entry-leader-saved-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.entry_leader.saved_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.entry_leader.saved_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.entry_leader.start:
  dashed_name: process-entry-leader-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.entry_leader.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.entry_leader.supplemental_groups.id:
  dashed_name: process-entry-leader-supplemental-groups-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.entry_leader.supplemental_groups.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.entry_leader.supplemental_groups.name:
  dashed_name: process-entry-leader-supplemental-groups-name
  description: Name of the group.
  flat_name: process.entry_leader.supplemental_groups.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.entry_leader.tty:
  dashed_name: process-entry-leader-tty
  description: Information about the controlling TTY device. If set, the process belongs
    to an interactive session.
  flat_name: process.entry_leader.tty
  level: extended
  name: tty
  normalize: []
  original_fieldset: process
  short: Information about the controlling TTY device.
  type: object
process.entry_leader.tty.char_device.major:
  dashed_name: process-entry-leader-tty-char-device-major
  description: The major number identifies the driver associated with the device.
    The character device's major and minor numbers can be algorithmically combined
    to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0.
    For more details see https://www.kernel.org/doc/html/v4.11/admin-guide/devices.html
  flat_name: process.entry_leader.tty.char_device.major
  level: extended
  name: tty.char_device.major
  normalize: []
  original_fieldset: process
  short: The TTY character device's major number.
  type: long
process.entry_leader.tty.char_device.minor:
  dashed_name: process-entry-leader-tty-char-device-minor
  description: "The minor number is used only by the driver specified by the major\
    \ number; other parts of the kernel don\u2019t use it, and merely pass it along\
    \ to the driver. It is common for a driver to control several devices; the minor\
    \ number provides a way for the driver to differentiate among them."
  flat_name: process.entry_leader.tty.char_device.minor
  level: extended
  name: tty.char_device.minor
  normalize: []
  original_fieldset: process
  short: The TTY character device's minor number.
  type: long
process.entry_leader.user.id:
  dashed_name: process-entry-leader-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.entry_leader.user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.entry_leader.user.name:
  dashed_name: process-entry-leader-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.entry_leader.user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.entry_leader.user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.entry_leader.working_directory:
  dashed_name: process-entry-leader-working-directory
  description: The working directory of the process.
  example: /home/alice
  flat_name: process.entry_leader.working_directory
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.entry_leader.working_directory.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.entry_leader.working_directory.text
    name: text
    norms: false
    type: text
  name: working_directory
  normalize: []
  original_fieldset: process
  short: The working directory of the process.
  type: keyword
process.env_vars:
  dashed_name: process-env-vars
  description: 'Environment variables set at the time of the event.

    May be filtered to protect sensitive information.'
  example: "{\n  \"USER\": \"elastic\",\n  \"LANG\": \"en_US.UTF-8\",\n  \"HOME\"\
    : \"/home/elastic\"\n}"
  flat_name: process.env_vars
  level: extended
  name: env_vars
  normalize: []
  short: Environment variables set at the time of the event.
  type: object
process.executable:
  dashed_name: process-executable
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  flat_name: process.executable
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.executable.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.executable.text
    name: text
    norms: false
    type: text
  name: executable
  normalize: []
  short: Absolute path to the process executable.
  type: keyword
process.exit_code:
  dashed_name: process-exit-code
  description: 'The exit code of the process, if this is a termination event.

    The field should be absent if there is no exit code for the event (e.g. process
    start).'
  example: 137
  flat_name: process.exit_code
  level: extended
  name: exit_code
  normalize: []
  short: The exit code of the process.
  type: long
process.group_leader.args:
  dashed_name: process-group-leader-args
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
  flat_name: process.group_leader.args
  ignore_above: 1024
  level: extended
  name: args
  normalize:
  - array
  original_fieldset: process
  short: Array of process arguments.
  type: keyword
process.group_leader.args_count:
  dashed_name: process-group-leader-args-count
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  flat_name: process.group_leader.args_count
  level: extended
  name: args_count
  normalize: []
  original_fieldset: process
  short: Length of the process.args array.
  type: long
process.group_leader.command_line:
  dashed_name: process-group-leader-command-line
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  flat_name: process.group_leader.command_line
  level: extended
  multi_fields:
  - flat_name: process.group_leader.command_line.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.group_leader.command_line.text
    name: text
    norms: false
    type: text
  name: command_line
  normalize: []
  original_fieldset: process
  short: Full command line that started the process.
  type: wildcard
process.group_leader.entity_id:
  dashed_name: process-group-leader-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.group_leader.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.group_leader.executable:
  dashed_name: process-group-leader-executable
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  flat_name: process.group_leader.executable
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.group_leader.executable.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.group_leader.executable.text
    name: text
    norms: false
    type: text
  name: executable
  normalize: []
  original_fieldset: process
  short: Absolute path to the process executable.
  type: keyword
process.group_leader.group.id:
  dashed_name: process-group-leader-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.group_leader.group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.group_leader.group.name:
  dashed_name: process-group-leader-group-name
  description: Name of the group.
  flat_name: process.group_leader.group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.group_leader.interactive:
  dashed_name: process-group-leader-interactive
  description: 'Whether the process is connected to an interactive shell.

    Process interactivity is infered from the processes file descriptors. If the character
    device for the controlling tty is the same as stdin and stderr for the process,
    the process is considered interactive.

    Note: A non-interactive process can belong to an interactive session and is simply
    one that does not have open file descriptors reading the controlling TTY on FD
    0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process
    is still considered interactive if stdin and stderr are connected to the controlling
    TTY.'
  flat_name: process.group_leader.interactive
  level: extended
  name: interactive
  normalize: []
  original_fieldset: process
  short: Whether the process is connected to an interactive shell.
  type: boolean
process.group_leader.name:
  dashed_name: process-group-leader-name
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  flat_name: process.group_leader.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.group_leader.name.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.group_leader.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: process
  short: Process name.
  type: keyword
process.group_leader.pid:
  dashed_name: process-group-leader-pid
  description: Process id.
  example: 4242
  flat_name: process.group_leader.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.group_leader.real_group.id:
  dashed_name: process-group-leader-real-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.group_leader.real_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.group_leader.real_group.name:
  dashed_name: process-group-leader-real-group-name
  description: Name of the group.
  flat_name: process.group_leader.real_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.group_leader.real_user.id:
  dashed_name: process-group-leader-real-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.group_leader.real_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.group_leader.real_user.name:
  dashed_name: process-group-leader-real-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.group_leader.real_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.group_leader.real_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.group_leader.same_as_process:
  dashed_name: process-group-leader-same-as-process
  description: 'This boolean is used to identify if a leader process is the same as
    the top level process.

    For example, if process.group_leader.same_as_process = true, it means the process
    event in question is the leader of its process group. Details under process.*
    like pid would be the same under process.group_leader.*

    The same applies for both process.session_leader and process.entry_leader.

    This field exists to the benefit of EQL and other rule engines since it''s not
    possible to compare equality between two fields in a single document.

    e.g

    process.entity_id = process.group_leader.entity_id (top level process is the process
    group leader)

    OR

    process.entity_id = process.entry_leader.entity_id (top level process is the entry
    session leader)

    Instead these rules could be written like:

    process.group_leader.same_as_process: true

    OR

    process.entry_leader.same_as_process: true

    Note: This field is only set on process.entry_leader, process.session_leader and
    process.group_leader.'
  flat_name: process.group_leader.same_as_process
  level: extended
  name: same_as_process
  normalize: []
  original_fieldset: process
  short: This boolean is used to identify if a leader process is the same as the top
    level process.
  type: boolean
process.group_leader.saved_group.id:
  dashed_name: process-group-leader-saved-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.group_leader.saved_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.group_leader.saved_group.name:
  dashed_name: process-group-leader-saved-group-name
  description: Name of the group.
  flat_name: process.group_leader.saved_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.group_leader.saved_user.id:
  dashed_name: process-group-leader-saved-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.group_leader.saved_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.group_leader.saved_user.name:
  dashed_name: process-group-leader-saved-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.group_leader.saved_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.group_leader.saved_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.group_leader.start:
  dashed_name: process-group-leader-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.group_leader.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.group_leader.supplemental_groups.id:
  dashed_name: process-group-leader-supplemental-groups-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.group_leader.supplemental_groups.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.group_leader.supplemental_groups.name:
  dashed_name: process-group-leader-supplemental-groups-name
  description: Name of the group.
  flat_name: process.group_leader.supplemental_groups.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.group_leader.tty:
  dashed_name: process-group-leader-tty
  description: Information about the controlling TTY device. If set, the process belongs
    to an interactive session.
  flat_name: process.group_leader.tty
  level: extended
  name: tty
  normalize: []
  original_fieldset: process
  short: Information about the controlling TTY device.
  type: object
process.group_leader.tty.char_device.major:
  dashed_name: process-group-leader-tty-char-device-major
  description: The major number identifies the driver associated with the device.
    The character device's major and minor numbers can be algorithmically combined
    to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0.
    For more details see https://www.kernel.org/doc/html/v4.11/admin-guide/devices.html
  flat_name: process.group_leader.tty.char_device.major
  level: extended
  name: tty.char_device.major
  normalize: []
  original_fieldset: process
  short: The TTY character device's major number.
  type: long
process.group_leader.tty.char_device.minor:
  dashed_name: process-group-leader-tty-char-device-minor
  description: "The minor number is used only by the driver specified by the major\
    \ number; other parts of the kernel don\u2019t use it, and merely pass it along\
    \ to the driver. It is common for a driver to control several devices; the minor\
    \ number provides a way for the driver to differentiate among them."
  flat_name: process.group_leader.tty.char_device.minor
  level: extended
  name: tty.char_device.minor
  normalize: []
  original_fieldset: process
  short: The TTY character device's minor number.
  type: long
process.group_leader.user.id:
  dashed_name: process-group-leader-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.group_leader.user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.group_leader.user.name:
  dashed_name: process-group-leader-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.group_leader.user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.group_leader.user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.group_leader.working_directory:
  dashed_name: process-group-leader-working-directory
  description: The working directory of the process.
  example: /home/alice
  flat_name: process.group_leader.working_directory
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.group_leader.working_directory.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.group_leader.working_directory.text
    name: text
    norms: false
    type: text
  name: working_directory
  normalize: []
  original_fieldset: process
  short: The working directory of the process.
  type: keyword
process.hash.md5:
  dashed_name: process-hash-md5
  description: MD5 hash.
  flat_name: process.hash.md5
  ignore_above: 1024
  level: extended
  name: md5
  normalize: []
  original_fieldset: hash
  short: MD5 hash.
  type: keyword
process.hash.sha1:
  dashed_name: process-hash-sha1
  description: SHA1 hash.
  flat_name: process.hash.sha1
  ignore_above: 1024
  level: extended
  name: sha1
  normalize: []
  original_fieldset: hash
  short: SHA1 hash.
  type: keyword
process.hash.sha256:
  dashed_name: process-hash-sha256
  description: SHA256 hash.
  flat_name: process.hash.sha256
  ignore_above: 1024
  level: extended
  name: sha256
  normalize: []
  original_fieldset: hash
  short: SHA256 hash.
  type: keyword
process.hash.sha512:
  dashed_name: process-hash-sha512
  description: SHA512 hash.
  flat_name: process.hash.sha512
  ignore_above: 1024
  level: extended
  name: sha512
  normalize: []
  original_fieldset: hash
  short: SHA512 hash.
  type: keyword
process.interactive:
  dashed_name: process-interactive
  description: 'Whether the process is connected to an interactive shell.

    Process interactivity is infered from the processes file descriptors. If the character
    device for the controlling tty is the same as stdin and stderr for the process,
    the process is considered interactive.

    Note: A non-interactive process can belong to an interactive session and is simply
    one that does not have open file descriptors reading the controlling TTY on FD
    0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process
    is still considered interactive if stdin and stderr are connected to the controlling
    TTY.'
  flat_name: process.interactive
  level: extended
  name: interactive
  normalize: []
  short: Whether the process is connected to an interactive shell.
  type: boolean
process.name:
  dashed_name: process-name
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  flat_name: process.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.name.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  short: Process name.
  type: keyword
process.parent.Ext:
  dashed_name: process-parent-Ext
  description: Object for all custom defined fields to live in.
  flat_name: process.parent.Ext
  level: custom
  name: Ext
  normalize: []
  original_fieldset: process
  short: Object for all custom defined fields to live in.
  type: object
process.parent.Ext.architecture:
  dashed_name: process-parent-Ext-architecture
  description: Process architecture.  It can differ from host architecture.
  example: x86_64
  flat_name: process.parent.Ext.architecture
  ignore_above: 1024
  level: custom
  name: Ext.architecture
  normalize: []
  original_fieldset: process
  short: Process architecture.  It can differ from host architecture.
  type: keyword
process.parent.Ext.code_signature:
  dashed_name: process-parent-Ext-code-signature
  description: Nested version of ECS code_signature fieldset.
  flat_name: process.parent.Ext.code_signature
  level: custom
  name: Ext.code_signature
  normalize: []
  original_fieldset: process
  short: Nested version of ECS code_signature fieldset.
  type: nested
process.parent.Ext.code_signature.exists:
  dashed_name: process-parent-Ext-code-signature-exists
  description: Boolean to capture if a signature is present.
  example: 'true'
  flat_name: process.parent.Ext.code_signature.exists
  level: custom
  name: Ext.code_signature.exists
  normalize: []
  original_fieldset: process
  short: Boolean to capture if a signature is present.
  type: boolean
process.parent.Ext.code_signature.status:
  dashed_name: process-parent-Ext-code-signature-status
  description: 'Additional information about the certificate status.

    This is useful for logging cryptographic errors with the certificate validity
    or trust status. Leave unpopulated if the validity or trust of the certificate
    was unchecked.'
  example: ERROR_UNTRUSTED_ROOT
  flat_name: process.parent.Ext.code_signature.status
  ignore_above: 1024
  level: custom
  name: Ext.code_signature.status
  normalize: []
  original_fieldset: process
  short: Additional information about the certificate status.
  type: keyword
process.parent.Ext.code_signature.subject_name:
  dashed_name: process-parent-Ext-code-signature-subject-name
  description: Subject name of the code signer
  example: Microsoft Corporation
  flat_name: process.parent.Ext.code_signature.subject_name
  ignore_above: 1024
  level: custom
  name: Ext.code_signature.subject_name
  normalize: []
  original_fieldset: process
  short: Subject name of the code signer
  type: keyword
process.parent.Ext.code_signature.trusted:
  dashed_name: process-parent-Ext-code-signature-trusted
  description: 'Stores the trust status of the certificate chain.

    Validating the trust of the certificate chain may be complicated, and this field
    should only be populated by tools that actively check the status.'
  example: 'true'
  flat_name: process.parent.Ext.code_signature.trusted
  level: custom
  name: Ext.code_signature.trusted
  normalize: []
  original_fieldset: process
  short: Stores the trust status of the certificate chain.
  type: boolean
process.parent.Ext.code_signature.valid:
  dashed_name: process-parent-Ext-code-signature-valid
  description: 'Boolean to capture if the digital signature is verified against the
    binary content.

    Leave unpopulated if a certificate was unchecked.'
  example: 'true'
  flat_name: process.parent.Ext.code_signature.valid
  level: custom
  name: Ext.code_signature.valid
  normalize: []
  original_fieldset: process
  short: Boolean to capture if the digital signature is verified against the binary
    content.
  type: boolean
process.parent.Ext.protection:
  dashed_name: process-parent-Ext-protection
  description: Indicates the protection level of this process.  Uses the same syntax
    as Process Explorer. Examples include PsProtectedSignerWinTcb, PsProtectedSignerWinTcb-Light,
    and PsProtectedSignerWindows-Light.
  flat_name: process.parent.Ext.protection
  ignore_above: 1024
  level: custom
  name: Ext.protection
  normalize: []
  original_fieldset: process
  short: OS-level protections granted to this process
  type: keyword
process.parent.Ext.real:
  dashed_name: process-parent-Ext-real
  description: The field set containing process info in case of any pid spoofing.
    This is mainly useful for process.parent.
  flat_name: process.parent.Ext.real
  level: custom
  name: Ext.real
  normalize: []
  original_fieldset: process
  short: The field set containing process info in case of any pid spoofing. This is
    mainly useful for process.parent.
  type: object
process.parent.Ext.real.pid:
  dashed_name: process-parent-Ext-real-pid
  description: For process.parent this will be the ppid of the process that actually
    spawned the current process.
  flat_name: process.parent.Ext.real.pid
  level: custom
  name: Ext.real.pid
  normalize: []
  original_fieldset: process
  short: The real pid of the process if ppid spoofing is happening.
  type: long
process.parent.Ext.user:
  dashed_name: process-parent-Ext-user
  description: User associated with the running process.
  flat_name: process.parent.Ext.user
  ignore_above: 1024
  level: custom
  name: Ext.user
  normalize: []
  original_fieldset: process
  short: User associated with the running process.
  type: keyword
process.parent.args:
  dashed_name: process-parent-args
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
  flat_name: process.parent.args
  ignore_above: 1024
  level: extended
  name: args
  normalize:
  - array
  original_fieldset: process
  short: Array of process arguments.
  type: keyword
process.parent.args_count:
  dashed_name: process-parent-args-count
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  flat_name: process.parent.args_count
  level: extended
  name: args_count
  normalize: []
  original_fieldset: process
  short: Length of the process.args array.
  type: long
process.parent.code_signature.exists:
  dashed_name: process-parent-code-signature-exists
  description: Boolean to capture if a signature is present.
  example: 'true'
  flat_name: process.parent.code_signature.exists
  level: core
  name: exists
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if a signature is present.
  type: boolean
process.parent.code_signature.signing_id:
  dashed_name: process-parent-code-signature-signing-id
  description: 'The identifier used to sign the process.

    This is used to identify the application manufactured by a software vendor. The
    field is relevant to Apple *OS only.'
  example: com.apple.xpc.proxy
  flat_name: process.parent.code_signature.signing_id
  ignore_above: 1024
  level: extended
  name: signing_id
  normalize: []
  original_fieldset: code_signature
  short: The identifier used to sign the process.
  type: keyword
process.parent.code_signature.status:
  dashed_name: process-parent-code-signature-status
  description: 'Additional information about the certificate status.

    This is useful for logging cryptographic errors with the certificate validity
    or trust status. Leave unpopulated if the validity or trust of the certificate
    was unchecked.'
  example: ERROR_UNTRUSTED_ROOT
  flat_name: process.parent.code_signature.status
  ignore_above: 1024
  level: extended
  name: status
  normalize: []
  original_fieldset: code_signature
  short: Additional information about the certificate status.
  type: keyword
process.parent.code_signature.subject_name:
  dashed_name: process-parent-code-signature-subject-name
  description: Subject name of the code signer
  example: Microsoft Corporation
  flat_name: process.parent.code_signature.subject_name
  ignore_above: 1024
  level: core
  name: subject_name
  normalize: []
  original_fieldset: code_signature
  short: Subject name of the code signer
  type: keyword
process.parent.code_signature.team_id:
  dashed_name: process-parent-code-signature-team-id
  description: 'The team identifier used to sign the process.

    This is used to identify the team or vendor of a software product. The field is
    relevant to Apple *OS only.'
  example: EQHXZ8M8AV
  flat_name: process.parent.code_signature.team_id
  ignore_above: 1024
  level: extended
  name: team_id
  normalize: []
  original_fieldset: code_signature
  short: The team identifier used to sign the process.
  type: keyword
process.parent.code_signature.trusted:
  dashed_name: process-parent-code-signature-trusted
  description: 'Stores the trust status of the certificate chain.

    Validating the trust of the certificate chain may be complicated, and this field
    should only be populated by tools that actively check the status.'
  example: 'true'
  flat_name: process.parent.code_signature.trusted
  level: extended
  name: trusted
  normalize: []
  original_fieldset: code_signature
  short: Stores the trust status of the certificate chain.
  type: boolean
process.parent.code_signature.valid:
  dashed_name: process-parent-code-signature-valid
  description: 'Boolean to capture if the digital signature is verified against the
    binary content.

    Leave unpopulated if a certificate was unchecked.'
  example: 'true'
  flat_name: process.parent.code_signature.valid
  level: extended
  name: valid
  normalize: []
  original_fieldset: code_signature
  short: Boolean to capture if the digital signature is verified against the binary
    content.
  type: boolean
process.parent.command_line:
  dashed_name: process-parent-command-line
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  flat_name: process.parent.command_line
  level: extended
  multi_fields:
  - flat_name: process.parent.command_line.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.parent.command_line.text
    name: text
    norms: false
    type: text
  name: command_line
  normalize: []
  original_fieldset: process
  short: Full command line that started the process.
  type: wildcard
process.parent.entity_id:
  dashed_name: process-parent-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.parent.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.parent.executable:
  dashed_name: process-parent-executable
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  flat_name: process.parent.executable
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.parent.executable.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.parent.executable.text
    name: text
    norms: false
    type: text
  name: executable
  normalize: []
  original_fieldset: process
  short: Absolute path to the process executable.
  type: keyword
process.parent.exit_code:
  dashed_name: process-parent-exit-code
  description: 'The exit code of the process, if this is a termination event.

    The field should be absent if there is no exit code for the event (e.g. process
    start).'
  example: 137
  flat_name: process.parent.exit_code
  level: extended
  name: exit_code
  normalize: []
  original_fieldset: process
  short: The exit code of the process.
  type: long
process.parent.group.id:
  dashed_name: process-parent-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.parent.group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.parent.group.name:
  dashed_name: process-parent-group-name
  description: Name of the group.
  flat_name: process.parent.group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.parent.group_leader.entity_id:
  dashed_name: process-parent-group-leader-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.parent.group_leader.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.parent.group_leader.pid:
  dashed_name: process-parent-group-leader-pid
  description: Process id.
  example: 4242
  flat_name: process.parent.group_leader.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.parent.group_leader.start:
  dashed_name: process-parent-group-leader-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.parent.group_leader.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.parent.hash.md5:
  dashed_name: process-parent-hash-md5
  description: MD5 hash.
  flat_name: process.parent.hash.md5
  ignore_above: 1024
  level: extended
  name: md5
  normalize: []
  original_fieldset: hash
  short: MD5 hash.
  type: keyword
process.parent.hash.sha1:
  dashed_name: process-parent-hash-sha1
  description: SHA1 hash.
  flat_name: process.parent.hash.sha1
  ignore_above: 1024
  level: extended
  name: sha1
  normalize: []
  original_fieldset: hash
  short: SHA1 hash.
  type: keyword
process.parent.hash.sha256:
  dashed_name: process-parent-hash-sha256
  description: SHA256 hash.
  flat_name: process.parent.hash.sha256
  ignore_above: 1024
  level: extended
  name: sha256
  normalize: []
  original_fieldset: hash
  short: SHA256 hash.
  type: keyword
process.parent.hash.sha512:
  dashed_name: process-parent-hash-sha512
  description: SHA512 hash.
  flat_name: process.parent.hash.sha512
  ignore_above: 1024
  level: extended
  name: sha512
  normalize: []
  original_fieldset: hash
  short: SHA512 hash.
  type: keyword
process.parent.interactive:
  dashed_name: process-parent-interactive
  description: 'Whether the process is connected to an interactive shell.

    Process interactivity is infered from the processes file descriptors. If the character
    device for the controlling tty is the same as stdin and stderr for the process,
    the process is considered interactive.

    Note: A non-interactive process can belong to an interactive session and is simply
    one that does not have open file descriptors reading the controlling TTY on FD
    0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process
    is still considered interactive if stdin and stderr are connected to the controlling
    TTY.'
  flat_name: process.parent.interactive
  level: extended
  name: interactive
  normalize: []
  original_fieldset: process
  short: Whether the process is connected to an interactive shell.
  type: boolean
process.parent.name:
  dashed_name: process-parent-name
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  flat_name: process.parent.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.parent.name.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.parent.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: process
  short: Process name.
  type: keyword
process.parent.pe.company:
  dashed_name: process-parent-pe-company
  description: Internal company name of the file, provided at compile-time.
  example: Microsoft Corporation
  flat_name: process.parent.pe.company
  ignore_above: 1024
  level: extended
  name: company
  normalize: []
  original_fieldset: pe
  short: Internal company name of the file, provided at compile-time.
  type: keyword
process.parent.pe.description:
  dashed_name: process-parent-pe-description
  description: Internal description of the file, provided at compile-time.
  example: Paint
  flat_name: process.parent.pe.description
  ignore_above: 1024
  level: extended
  name: description
  normalize: []
  original_fieldset: pe
  short: Internal description of the file, provided at compile-time.
  type: keyword
process.parent.pe.file_version:
  dashed_name: process-parent-pe-file-version
  description: Internal version of the file, provided at compile-time.
  example: 6.3.9600.17415
  flat_name: process.parent.pe.file_version
  ignore_above: 1024
  level: extended
  name: file_version
  normalize: []
  original_fieldset: pe
  short: Process name.
  type: keyword
process.parent.pe.imphash:
  dashed_name: process-parent-pe-imphash
  description: 'A hash of the imports in a PE file. An imphash -- or import hash --
    can be used to fingerprint binaries even after recompilation or other code-level
    transformations have occurred, which would change more traditional hash values.

    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
  example: 0c6803c4e922103c4dca5963aad36ddf
  flat_name: process.parent.pe.imphash
  ignore_above: 1024
  level: extended
  name: imphash
  normalize: []
  original_fieldset: pe
  short: A hash of the imports in a PE file.
  type: keyword
process.parent.pe.original_file_name:
  dashed_name: process-parent-pe-original-file-name
  description: Internal name of the file, provided at compile-time.
  example: MSPAINT.EXE
  flat_name: process.parent.pe.original_file_name
  ignore_above: 1024
  level: extended
  name: original_file_name
  normalize: []
  original_fieldset: pe
  short: Internal name of the file, provided at compile-time.
  type: keyword
process.parent.pe.product:
  dashed_name: process-parent-pe-product
  description: Internal product name of the file, provided at compile-time.
  example: "Microsoft\xAE Windows\xAE Operating System"
  flat_name: process.parent.pe.product
  ignore_above: 1024
  level: extended
  name: product
  normalize: []
  original_fieldset: pe
  short: Internal product name of the file, provided at compile-time.
  type: keyword
process.parent.pgid:
  dashed_name: process-parent-pgid
  description: Identifier of the group of processes the process belongs to.
  flat_name: process.parent.pgid
  format: string
  level: extended
  name: pgid
  normalize: []
  original_fieldset: process
  short: Identifier of the group of processes the process belongs to.
  type: long
process.parent.pid:
  dashed_name: process-parent-pid
  description: Process id.
  example: 4242
  flat_name: process.parent.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.parent.ppid:
  dashed_name: process-parent-ppid
  description: Parent process' pid.
  example: 4241
  flat_name: process.parent.ppid
  format: string
  level: extended
  name: ppid
  normalize: []
  original_fieldset: process
  short: Parent process' pid.
  type: long
process.parent.real_group.id:
  dashed_name: process-parent-real-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.parent.real_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.parent.real_group.name:
  dashed_name: process-parent-real-group-name
  description: Name of the group.
  flat_name: process.parent.real_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.parent.real_user.id:
  dashed_name: process-parent-real-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.parent.real_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.parent.real_user.name:
  dashed_name: process-parent-real-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.parent.real_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.parent.real_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.parent.saved_group.id:
  dashed_name: process-parent-saved-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.parent.saved_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.parent.saved_group.name:
  dashed_name: process-parent-saved-group-name
  description: Name of the group.
  flat_name: process.parent.saved_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.parent.saved_user.id:
  dashed_name: process-parent-saved-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.parent.saved_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.parent.saved_user.name:
  dashed_name: process-parent-saved-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.parent.saved_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.parent.saved_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.parent.start:
  dashed_name: process-parent-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.parent.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.parent.supplemental_groups.id:
  dashed_name: process-parent-supplemental-groups-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.parent.supplemental_groups.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.parent.supplemental_groups.name:
  dashed_name: process-parent-supplemental-groups-name
  description: Name of the group.
  flat_name: process.parent.supplemental_groups.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.parent.thread.id:
  dashed_name: process-parent-thread-id
  description: Thread ID.
  example: 4242
  flat_name: process.parent.thread.id
  format: string
  level: extended
  name: thread.id
  normalize: []
  original_fieldset: process
  short: Thread ID.
  type: long
process.parent.thread.name:
  dashed_name: process-parent-thread-name
  description: Thread name.
  example: thread-0
  flat_name: process.parent.thread.name
  ignore_above: 1024
  level: extended
  name: thread.name
  normalize: []
  original_fieldset: process
  short: Thread name.
  type: keyword
process.parent.title:
  dashed_name: process-parent-title
  description: 'Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened.'
  flat_name: process.parent.title
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.parent.title.text
    name: text
    type: match_only_text
  name: title
  normalize: []
  original_fieldset: process
  short: Process title.
  type: keyword
process.parent.tty:
  dashed_name: process-parent-tty
  description: Information about the controlling TTY device. If set, the process belongs
    to an interactive session.
  flat_name: process.parent.tty
  level: extended
  name: tty
  normalize: []
  original_fieldset: process
  short: Information about the controlling TTY device.
  type: object
process.parent.tty.char_device.major:
  dashed_name: process-parent-tty-char-device-major
  description: The major number identifies the driver associated with the device.
    The character device's major and minor numbers can be algorithmically combined
    to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0.
    For more details see https://www.kernel.org/doc/html/v4.11/admin-guide/devices.html
  flat_name: process.parent.tty.char_device.major
  level: extended
  name: tty.char_device.major
  normalize: []
  original_fieldset: process
  short: The TTY character device's major number.
  type: long
process.parent.tty.char_device.minor:
  dashed_name: process-parent-tty-char-device-minor
  description: "The minor number is used only by the driver specified by the major\
    \ number; other parts of the kernel don\u2019t use it, and merely pass it along\
    \ to the driver. It is common for a driver to control several devices; the minor\
    \ number provides a way for the driver to differentiate among them."
  flat_name: process.parent.tty.char_device.minor
  level: extended
  name: tty.char_device.minor
  normalize: []
  original_fieldset: process
  short: The TTY character device's minor number.
  type: long
process.parent.uptime:
  dashed_name: process-parent-uptime
  description: Seconds the process has been up.
  example: 1325
  flat_name: process.parent.uptime
  level: extended
  name: uptime
  normalize: []
  original_fieldset: process
  short: Seconds the process has been up.
  type: long
process.parent.user.id:
  dashed_name: process-parent-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.parent.user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.parent.user.name:
  dashed_name: process-parent-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.parent.user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.parent.user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.parent.working_directory:
  dashed_name: process-parent-working-directory
  description: The working directory of the process.
  example: /home/alice
  flat_name: process.parent.working_directory
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.parent.working_directory.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.parent.working_directory.text
    name: text
    norms: false
    type: text
  name: working_directory
  normalize: []
  original_fieldset: process
  short: The working directory of the process.
  type: keyword
process.pe.company:
  dashed_name: process-pe-company
  description: Internal company name of the file, provided at compile-time.
  example: Microsoft Corporation
  flat_name: process.pe.company
  ignore_above: 1024
  level: extended
  name: company
  normalize: []
  original_fieldset: pe
  short: Internal company name of the file, provided at compile-time.
  type: keyword
process.pe.description:
  dashed_name: process-pe-description
  description: Internal description of the file, provided at compile-time.
  example: Paint
  flat_name: process.pe.description
  ignore_above: 1024
  level: extended
  name: description
  normalize: []
  original_fieldset: pe
  short: Internal description of the file, provided at compile-time.
  type: keyword
process.pe.file_version:
  dashed_name: process-pe-file-version
  description: Internal version of the file, provided at compile-time.
  example: 6.3.9600.17415
  flat_name: process.pe.file_version
  ignore_above: 1024
  level: extended
  name: file_version
  normalize: []
  original_fieldset: pe
  short: Process name.
  type: keyword
process.pe.imphash:
  dashed_name: process-pe-imphash
  description: 'A hash of the imports in a PE file. An imphash -- or import hash --
    can be used to fingerprint binaries even after recompilation or other code-level
    transformations have occurred, which would change more traditional hash values.

    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
  example: 0c6803c4e922103c4dca5963aad36ddf
  flat_name: process.pe.imphash
  ignore_above: 1024
  level: extended
  name: imphash
  normalize: []
  original_fieldset: pe
  short: A hash of the imports in a PE file.
  type: keyword
process.pe.original_file_name:
  dashed_name: process-pe-original-file-name
  description: Internal name of the file, provided at compile-time.
  example: MSPAINT.EXE
  flat_name: process.pe.original_file_name
  ignore_above: 1024
  level: extended
  name: original_file_name
  normalize: []
  original_fieldset: pe
  short: Internal name of the file, provided at compile-time.
  type: keyword
process.pe.product:
  dashed_name: process-pe-product
  description: Internal product name of the file, provided at compile-time.
  example: "Microsoft\xAE Windows\xAE Operating System"
  flat_name: process.pe.product
  ignore_above: 1024
  level: extended
  name: product
  normalize: []
  original_fieldset: pe
  short: Internal product name of the file, provided at compile-time.
  type: keyword
process.pgid:
  dashed_name: process-pgid
  description: Identifier of the group of processes the process belongs to.
  flat_name: process.pgid
  format: string
  level: extended
  name: pgid
  normalize: []
  short: Identifier of the group of processes the process belongs to.
  type: long
process.pid:
  dashed_name: process-pid
  description: Process id.
  example: 4242
  flat_name: process.pid
  format: string
  level: core
  name: pid
  normalize: []
  short: Process id.
  type: long
process.ppid:
  dashed_name: process-ppid
  description: Parent process' pid.
  example: 4241
  flat_name: process.ppid
  format: string
  level: extended
  name: ppid
  normalize: []
  short: Parent process' pid.
  type: long
process.previous.args:
  dashed_name: process-previous-args
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
  flat_name: process.previous.args
  ignore_above: 1024
  level: extended
  name: args
  normalize:
  - array
  original_fieldset: process
  short: Array of process arguments.
  type: keyword
process.previous.args_count:
  dashed_name: process-previous-args-count
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  flat_name: process.previous.args_count
  level: extended
  name: args_count
  normalize: []
  original_fieldset: process
  short: Length of the process.args array.
  type: long
process.previous.executable:
  dashed_name: process-previous-executable
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  flat_name: process.previous.executable
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.previous.executable.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.previous.executable.text
    name: text
    norms: false
    type: text
  name: executable
  normalize: []
  original_fieldset: process
  short: Absolute path to the process executable.
  type: keyword
process.real_group.id:
  dashed_name: process-real-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.real_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.real_group.name:
  dashed_name: process-real-group-name
  description: Name of the group.
  flat_name: process.real_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.real_user.id:
  dashed_name: process-real-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.real_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.real_user.name:
  dashed_name: process-real-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.real_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.real_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.saved_group.id:
  dashed_name: process-saved-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.saved_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.saved_group.name:
  dashed_name: process-saved-group-name
  description: Name of the group.
  flat_name: process.saved_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.saved_user.id:
  dashed_name: process-saved-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.saved_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.saved_user.name:
  dashed_name: process-saved-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.saved_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.saved_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.session_leader.args:
  dashed_name: process-session-leader-args
  description: 'Array of process arguments, starting with the absolute path to the
    executable.

    May be filtered to protect sensitive information.'
  example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
  flat_name: process.session_leader.args
  ignore_above: 1024
  level: extended
  name: args
  normalize:
  - array
  original_fieldset: process
  short: Array of process arguments.
  type: keyword
process.session_leader.args_count:
  dashed_name: process-session-leader-args-count
  description: 'Length of the process.args array.

    This field can be useful for querying or performing bucket analysis on how many
    arguments were provided to start a process. More arguments may be an indication
    of suspicious activity.'
  example: 4
  flat_name: process.session_leader.args_count
  level: extended
  name: args_count
  normalize: []
  original_fieldset: process
  short: Length of the process.args array.
  type: long
process.session_leader.command_line:
  dashed_name: process-session-leader-command-line
  description: 'Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information.'
  example: /usr/bin/ssh -l user 10.0.0.16
  flat_name: process.session_leader.command_line
  level: extended
  multi_fields:
  - flat_name: process.session_leader.command_line.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.session_leader.command_line.text
    name: text
    norms: false
    type: text
  name: command_line
  normalize: []
  original_fieldset: process
  short: Full command line that started the process.
  type: wildcard
process.session_leader.entity_id:
  dashed_name: process-session-leader-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.session_leader.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.session_leader.executable:
  dashed_name: process-session-leader-executable
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  flat_name: process.session_leader.executable
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.session_leader.executable.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.session_leader.executable.text
    name: text
    norms: false
    type: text
  name: executable
  normalize: []
  original_fieldset: process
  short: Absolute path to the process executable.
  type: keyword
process.session_leader.group.id:
  dashed_name: process-session-leader-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.session_leader.group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.session_leader.group.name:
  dashed_name: process-session-leader-group-name
  description: Name of the group.
  flat_name: process.session_leader.group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.session_leader.interactive:
  dashed_name: process-session-leader-interactive
  description: 'Whether the process is connected to an interactive shell.

    Process interactivity is infered from the processes file descriptors. If the character
    device for the controlling tty is the same as stdin and stderr for the process,
    the process is considered interactive.

    Note: A non-interactive process can belong to an interactive session and is simply
    one that does not have open file descriptors reading the controlling TTY on FD
    0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process
    is still considered interactive if stdin and stderr are connected to the controlling
    TTY.'
  flat_name: process.session_leader.interactive
  level: extended
  name: interactive
  normalize: []
  original_fieldset: process
  short: Whether the process is connected to an interactive shell.
  type: boolean
process.session_leader.name:
  dashed_name: process-session-leader-name
  description: 'Process name.

    Sometimes called program name or similar.'
  example: ssh
  flat_name: process.session_leader.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.session_leader.name.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.session_leader.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: process
  short: Process name.
  type: keyword
process.session_leader.parent.entity_id:
  dashed_name: process-session-leader-parent-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.session_leader.parent.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.session_leader.parent.pid:
  dashed_name: process-session-leader-parent-pid
  description: Process id.
  example: 4242
  flat_name: process.session_leader.parent.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.session_leader.parent.session_leader.entity_id:
  dashed_name: process-session-leader-parent-session-leader-entity-id
  description: 'Unique identifier for the process.

    The implementation of this is specified by the data source, but some examples
    of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
    or a hash of some uniquely identifying components of a process.

    Constructing a globally unique identifier is a common practice to mitigate PID
    reuse as well as to identify a specific process over time, across multiple monitored
    hosts.'
  example: c2c455d9f99375d
  flat_name: process.session_leader.parent.session_leader.entity_id
  ignore_above: 1024
  level: extended
  name: entity_id
  normalize: []
  original_fieldset: process
  short: Unique identifier for the process.
  type: keyword
process.session_leader.parent.session_leader.pid:
  dashed_name: process-session-leader-parent-session-leader-pid
  description: Process id.
  example: 4242
  flat_name: process.session_leader.parent.session_leader.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.session_leader.parent.session_leader.start:
  dashed_name: process-session-leader-parent-session-leader-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.session_leader.parent.session_leader.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.session_leader.parent.start:
  dashed_name: process-session-leader-parent-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.session_leader.parent.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.session_leader.pid:
  dashed_name: process-session-leader-pid
  description: Process id.
  example: 4242
  flat_name: process.session_leader.pid
  format: string
  level: core
  name: pid
  normalize: []
  original_fieldset: process
  short: Process id.
  type: long
process.session_leader.real_group.id:
  dashed_name: process-session-leader-real-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.session_leader.real_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.session_leader.real_group.name:
  dashed_name: process-session-leader-real-group-name
  description: Name of the group.
  flat_name: process.session_leader.real_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.session_leader.real_user.id:
  dashed_name: process-session-leader-real-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.session_leader.real_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.session_leader.real_user.name:
  dashed_name: process-session-leader-real-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.session_leader.real_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.session_leader.real_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.session_leader.same_as_process:
  dashed_name: process-session-leader-same-as-process
  description: 'This boolean is used to identify if a leader process is the same as
    the top level process.

    For example, if process.group_leader.same_as_process = true, it means the process
    event in question is the leader of its process group. Details under process.*
    like pid would be the same under process.group_leader.*

    The same applies for both process.session_leader and process.entry_leader.

    This field exists to the benefit of EQL and other rule engines since it''s not
    possible to compare equality between two fields in a single document.

    e.g

    process.entity_id = process.group_leader.entity_id (top level process is the process
    group leader)

    OR

    process.entity_id = process.entry_leader.entity_id (top level process is the entry
    session leader)

    Instead these rules could be written like:

    process.group_leader.same_as_process: true

    OR

    process.entry_leader.same_as_process: true

    Note: This field is only set on process.entry_leader, process.session_leader and
    process.group_leader.'
  flat_name: process.session_leader.same_as_process
  level: extended
  name: same_as_process
  normalize: []
  original_fieldset: process
  short: This boolean is used to identify if a leader process is the same as the top
    level process.
  type: boolean
process.session_leader.saved_group.id:
  dashed_name: process-session-leader-saved-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.session_leader.saved_group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.session_leader.saved_group.name:
  dashed_name: process-session-leader-saved-group-name
  description: Name of the group.
  flat_name: process.session_leader.saved_group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.session_leader.saved_user.id:
  dashed_name: process-session-leader-saved-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.session_leader.saved_user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.session_leader.saved_user.name:
  dashed_name: process-session-leader-saved-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.session_leader.saved_user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.session_leader.saved_user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.session_leader.start:
  dashed_name: process-session-leader-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.session_leader.start
  level: extended
  name: start
  normalize: []
  original_fieldset: process
  short: The time the process started.
  type: date
process.session_leader.supplemental_groups.id:
  dashed_name: process-session-leader-supplemental-groups-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.session_leader.supplemental_groups.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.session_leader.supplemental_groups.name:
  dashed_name: process-session-leader-supplemental-groups-name
  description: Name of the group.
  flat_name: process.session_leader.supplemental_groups.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.session_leader.tty:
  dashed_name: process-session-leader-tty
  description: Information about the controlling TTY device. If set, the process belongs
    to an interactive session.
  flat_name: process.session_leader.tty
  level: extended
  name: tty
  normalize: []
  original_fieldset: process
  short: Information about the controlling TTY device.
  type: object
process.session_leader.tty.char_device.major:
  dashed_name: process-session-leader-tty-char-device-major
  description: The major number identifies the driver associated with the device.
    The character device's major and minor numbers can be algorithmically combined
    to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0.
    For more details see https://www.kernel.org/doc/html/v4.11/admin-guide/devices.html
  flat_name: process.session_leader.tty.char_device.major
  level: extended
  name: tty.char_device.major
  normalize: []
  original_fieldset: process
  short: The TTY character device's major number.
  type: long
process.session_leader.tty.char_device.minor:
  dashed_name: process-session-leader-tty-char-device-minor
  description: "The minor number is used only by the driver specified by the major\
    \ number; other parts of the kernel don\u2019t use it, and merely pass it along\
    \ to the driver. It is common for a driver to control several devices; the minor\
    \ number provides a way for the driver to differentiate among them."
  flat_name: process.session_leader.tty.char_device.minor
  level: extended
  name: tty.char_device.minor
  normalize: []
  original_fieldset: process
  short: The TTY character device's minor number.
  type: long
process.session_leader.user.id:
  dashed_name: process-session-leader-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.session_leader.user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.session_leader.user.name:
  dashed_name: process-session-leader-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.session_leader.user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.session_leader.user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.session_leader.working_directory:
  dashed_name: process-session-leader-working-directory
  description: The working directory of the process.
  example: /home/alice
  flat_name: process.session_leader.working_directory
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.session_leader.working_directory.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.session_leader.working_directory.text
    name: text
    norms: false
    type: text
  name: working_directory
  normalize: []
  original_fieldset: process
  short: The working directory of the process.
  type: keyword
process.start:
  dashed_name: process-start
  description: The time the process started.
  example: '2016-05-23T08:05:34.853Z'
  flat_name: process.start
  level: extended
  name: start
  normalize: []
  short: The time the process started.
  type: date
process.supplemental_groups.id:
  dashed_name: process-supplemental-groups-id
  description: Unique identifier for the group on the system/platform.
  flat_name: process.supplemental_groups.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
process.supplemental_groups.name:
  dashed_name: process-supplemental-groups-name
  description: Name of the group.
  flat_name: process.supplemental_groups.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
process.thread.id:
  dashed_name: process-thread-id
  description: Thread ID.
  example: 4242
  flat_name: process.thread.id
  format: string
  level: extended
  name: thread.id
  normalize: []
  short: Thread ID.
  type: long
process.thread.name:
  dashed_name: process-thread-name
  description: Thread name.
  example: thread-0
  flat_name: process.thread.name
  ignore_above: 1024
  level: extended
  name: thread.name
  normalize: []
  short: Thread name.
  type: keyword
process.title:
  dashed_name: process-title
  description: 'Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened.'
  flat_name: process.title
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.title.text
    name: text
    type: match_only_text
  name: title
  normalize: []
  short: Process title.
  type: keyword
process.tty:
  dashed_name: process-tty
  description: Information about the controlling TTY device. If set, the process belongs
    to an interactive session.
  flat_name: process.tty
  level: extended
  name: tty
  normalize: []
  short: Information about the controlling TTY device.
  type: object
process.tty.char_device.major:
  dashed_name: process-tty-char-device-major
  description: The major number identifies the driver associated with the device.
    The character device's major and minor numbers can be algorithmically combined
    to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0.
    For more details see https://www.kernel.org/doc/html/v4.11/admin-guide/devices.html
  flat_name: process.tty.char_device.major
  level: extended
  name: tty.char_device.major
  normalize: []
  short: The TTY character device's major number.
  type: long
process.tty.char_device.minor:
  dashed_name: process-tty-char-device-minor
  description: "The minor number is used only by the driver specified by the major\
    \ number; other parts of the kernel don\u2019t use it, and merely pass it along\
    \ to the driver. It is common for a driver to control several devices; the minor\
    \ number provides a way for the driver to differentiate among them."
  flat_name: process.tty.char_device.minor
  level: extended
  name: tty.char_device.minor
  normalize: []
  short: The TTY character device's minor number.
  type: long
process.uptime:
  dashed_name: process-uptime
  description: Seconds the process has been up.
  example: 1325
  flat_name: process.uptime
  level: extended
  name: uptime
  normalize: []
  short: Seconds the process has been up.
  type: long
process.user.id:
  dashed_name: process-user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: process.user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: user
  short: Unique identifier of the user.
  type: keyword
process.user.name:
  dashed_name: process-user-name
  description: Short name or login of the user.
  example: albert
  flat_name: process.user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: process.user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  original_fieldset: user
  short: Short name or login of the user.
  type: keyword
process.working_directory:
  dashed_name: process-working-directory
  description: The working directory of the process.
  example: /home/alice
  flat_name: process.working_directory
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: process.working_directory.caseless
    ignore_above: 1024
    name: caseless
    normalizer: lowercase
    type: keyword
  - flat_name: process.working_directory.text
    name: text
    norms: false
    type: text
  name: working_directory
  normalize: []
  short: The working directory of the process.
  type: keyword
source.geo.city_name:
  dashed_name: source-geo-city-name
  description: City name.
  example: Montreal
  flat_name: source.geo.city_name
  ignore_above: 1024
  level: core
  name: city_name
  normalize: []
  original_fieldset: geo
  short: City name.
  type: keyword
source.geo.continent_code:
  dashed_name: source-geo-continent-code
  description: Two-letter code representing continent's name.
  example: NA
  flat_name: source.geo.continent_code
  ignore_above: 1024
  level: core
  name: continent_code
  normalize: []
  original_fieldset: geo
  short: Continent code.
  type: keyword
source.geo.continent_name:
  dashed_name: source-geo-continent-name
  description: Name of the continent.
  example: North America
  flat_name: source.geo.continent_name
  ignore_above: 1024
  level: core
  name: continent_name
  normalize: []
  original_fieldset: geo
  short: Name of the continent.
  type: keyword
source.geo.country_iso_code:
  dashed_name: source-geo-country-iso-code
  description: Country ISO code.
  example: CA
  flat_name: source.geo.country_iso_code
  ignore_above: 1024
  level: core
  name: country_iso_code
  normalize: []
  original_fieldset: geo
  short: Country ISO code.
  type: keyword
source.geo.country_name:
  dashed_name: source-geo-country-name
  description: Country name.
  example: Canada
  flat_name: source.geo.country_name
  ignore_above: 1024
  level: core
  name: country_name
  normalize: []
  original_fieldset: geo
  short: Country name.
  type: keyword
source.geo.location:
  dashed_name: source-geo-location
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  flat_name: source.geo.location
  level: core
  name: location
  normalize: []
  original_fieldset: geo
  short: Longitude and latitude.
  type: geo_point
source.geo.name:
  dashed_name: source-geo-name
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  flat_name: source.geo.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: geo
  short: User-defined description of a location.
  type: keyword
source.geo.postal_code:
  dashed_name: source-geo-postal-code
  description: 'Postal code associated with the location.

    Values appropriate for this field may also be known as a postcode or ZIP code
    and will vary widely from country to country.'
  example: 94040
  flat_name: source.geo.postal_code
  ignore_above: 1024
  level: core
  name: postal_code
  normalize: []
  original_fieldset: geo
  short: Postal code.
  type: keyword
source.geo.region_iso_code:
  dashed_name: source-geo-region-iso-code
  description: Region ISO code.
  example: CA-QC
  flat_name: source.geo.region_iso_code
  ignore_above: 1024
  level: core
  name: region_iso_code
  normalize: []
  original_fieldset: geo
  short: Region ISO code.
  type: keyword
source.geo.region_name:
  dashed_name: source-geo-region-name
  description: Region name.
  example: Quebec
  flat_name: source.geo.region_name
  ignore_above: 1024
  level: core
  name: region_name
  normalize: []
  original_fieldset: geo
  short: Region name.
  type: keyword
source.geo.timezone:
  dashed_name: source-geo-timezone
  description: The time zone of the location, such as IANA time zone name.
  example: America/Argentina/Buenos_Aires
  flat_name: source.geo.timezone
  ignore_above: 1024
  level: core
  name: timezone
  normalize: []
  original_fieldset: geo
  short: Time zone.
  type: keyword
user.Ext:
  dashed_name: user-Ext
  description: Object for all custom defined fields to live in.
  flat_name: user.Ext
  level: custom
  name: Ext
  normalize: []
  short: Object for all custom defined fields to live in.
  type: object
user.Ext.real:
  dashed_name: user-Ext-real
  description: User info prior to any setuid operations.
  flat_name: user.Ext.real
  level: custom
  name: Ext.real
  normalize: []
  short: User info prior to any setuid operations.
  type: object
user.Ext.real.id:
  dashed_name: user-Ext-real-id
  description: One or multiple unique identifiers of the user.
  flat_name: user.Ext.real.id
  ignore_above: 1024
  level: custom
  name: Ext.real.id
  normalize: []
  short: One or multiple unique identifiers of the user.
  type: keyword
user.Ext.real.name:
  dashed_name: user-Ext-real-name
  description: Short name or login of the user.
  flat_name: user.Ext.real.name
  ignore_above: 1024
  level: custom
  name: Ext.real.name
  normalize: []
  short: Short name or login of the user.
  type: keyword
user.domain:
  dashed_name: user-domain
  description: Name of the directory the user is a member of. For example, an LDAP
    or Active Directory domain name.
  flat_name: user.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  short: Name of the directory the user is a member of.
  type: keyword
user.email:
  dashed_name: user-email
  description: User email address.
  flat_name: user.email
  ignore_above: 1024
  level: extended
  name: email
  normalize: []
  short: User email address.
  type: keyword
user.full_name:
  dashed_name: user-full-name
  description: User's full name, if available.
  example: Albert Einstein
  flat_name: user.full_name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: user.full_name.text
    name: text
    norms: false
    type: text
  name: full_name
  normalize: []
  short: User's full name, if available.
  type: keyword
user.group.Ext:
  dashed_name: user-group-Ext
  description: Object for all custom defined fields to live in.
  flat_name: user.group.Ext
  level: custom
  name: Ext
  normalize: []
  original_fieldset: group
  short: Object for all custom defined fields to live in.
  type: object
user.group.Ext.real:
  dashed_name: user-group-Ext-real
  description: Group info prior to any setgid operations.
  flat_name: user.group.Ext.real
  level: custom
  name: Ext.real
  normalize: []
  original_fieldset: group
  short: Group info prior to any setgid operations.
  type: object
user.group.Ext.real.id:
  dashed_name: user-group-Ext-real-id
  description: Unique identifier for the group on the system/platform.
  flat_name: user.group.Ext.real.id
  ignore_above: 1024
  level: custom
  name: Ext.real.id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
user.group.Ext.real.name:
  dashed_name: user-group-Ext-real-name
  description: Name of the group.
  flat_name: user.group.Ext.real.name
  ignore_above: 1024
  level: custom
  name: Ext.real.name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
user.group.domain:
  dashed_name: user-group-domain
  description: Name of the directory the group is a member of. For example, an LDAP
    or Active Directory domain name.
  flat_name: user.group.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  original_fieldset: group
  short: Name of the directory the group is a member of.
  type: keyword
user.group.id:
  dashed_name: user-group-id
  description: Unique identifier for the group on the system/platform.
  flat_name: user.group.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  original_fieldset: group
  short: Unique identifier for the group on the system/platform.
  type: keyword
user.group.name:
  dashed_name: user-group-name
  description: Name of the group.
  flat_name: user.group.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: group
  short: Name of the group.
  type: keyword
user.hash:
  dashed_name: user-hash
  description: Unique user hash to correlate information for a user in anonymized
    form. Useful if `user.id` or `user.name` contain confidential information and
    cannot be used.
  flat_name: user.hash
  ignore_above: 1024
  level: extended
  name: hash
  normalize: []
  short: Unique user hash to correlate information for a user in anonymized form.
  type: keyword
user.id:
  dashed_name: user-id
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  flat_name: user.id
  ignore_above: 1024
  level: extended
  name: id
  normalize: []
  short: Unique identifier of the user.
  type: keyword
user.name:
  dashed_name: user-name
  description: Short name or login of the user.
  example: albert
  flat_name: user.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - default_field: false
    flat_name: user.name.text
    name: text
    norms: false
    type: text
  name: name
  normalize: []
  short: Short name or login of the user.
  type: keyword
