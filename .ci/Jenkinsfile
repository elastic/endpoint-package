#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "endpoint-package"
    REPO_BUILD_TAG = "${env.REPO}/${env.BUILD_TAG}"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
    STACK_VERSION = "${params.stackVersion}"

    // Signing
    JOB_SIGNING_CREDENTIALS = 'sign-artifacts-with-gpg-job'
    INFRA_SIGNING_BUCKET_NAME = 'internal-ci-artifacts'
    INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_SUBFOLDER = "${env.REPO_BUILD_TAG}/signed-artifacts"
    INFRA_SIGNING_BUCKET_ARTIFACTS_PATH = "gs://${env.INFRA_SIGNING_BUCKET_NAME}/${env.REPO_BUILD_TAG}"
    INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_PATH = "gs://${env.INFRA_SIGNING_BUCKET_NAME}/${env.INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_SUBFOLDER}"

    // Publishing
    INTERNAL_CI_JOB_GCS_CREDENTIALS = 'internal-ci-gcs-plugin'
    PACKAGE_STORAGE_UPLOADER_CREDENTIALS = 'upload-package-to-package-storage'
    PACKAGE_STORAGE_UPLOADER_GCP_SERVICE_ACCOUNT = 'secret/gce/elastic-bekitzur/service-account/package-storage-uploader'
    PACKAGE_STORAGE_INTERNAL_BUCKET_QUEUE_PUBLISHING_PATH = "gs://elastic-bekitzur-package-storage-internal/queue-publishing/${env.REPO_BUILD_TAG}"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  parameters {
    string(name: 'stackVersion', defaultValue: '', description: 'Version of the stack to use for testing.')
  }
  stages {
    stage('Checkout') {
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Build'){
      steps {
        withGithubNotify(context: "Build") {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withGoEnv(){
              // "go" is used during doc generation
              // and make should also perform installation of elastic-package
              cmd(label: 'Make', script: 'make')
              archiveArtifacts(allowEmptyArchive: false, artifacts: 'build/packages/*.zip')
            }
          }
        }
      }
    }
    stage('Check') {
      steps {
        withGithubNotify(context: "Check") {
          dir("${BASE_DIR}"){
            withGoEnv(){
              checkGitDiff()
              // disable until backlog addressed:
              // - changelog matchup
              // - update versioning to use -previewN instead of -dev.N
              // - 1024 field limit workaround
              // - transform & index_templates added to spec
              //lint()
              cmd(label: "static tests", script: "make static-test")
              prepareStack()
              cmd(label: "pipeline tests", script: '''
                  eval "$(./scripts/go-tools/bin/elastic-package stack shellinit)"
                  make pipeline-test
              ''')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
        }
      }
    }
    stage('Publish') {
      when {
        anyOf {
          branch 'master';
          branch pattern: '[78]\\.\\d+',
                 comparator: 'REGEXP'
        }
      }
      steps {
        withGithubNotify(context: "Publish") {
          dir("${BASE_DIR}"){
            packageStoragePublish('build/packages')
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

// Check if there are non-versioned local changes.
// For reference: https://stackoverflow.com/questions/34807971/why-does-git-diff-index-head-result-change-for-touched-files-after-git-diff-or-g
def checkGitDiff() {
  dir("${BASE_DIR}") {
    sh(label: "update git index", script: 'git update-index -q --really-refresh', returnStatus: true)
    sh(label: "check for uncommitted build artifacts", script: 'git diff-index --exit-code HEAD --')
  }
}

def lint() {
  dir("${BASE_DIR}") {
    sh(label: 'lint', script: "make lint")
  }
}

def prepareStack() {
  def stackArgs = '-v'

  if ( env.STACK_VERSION?.trim() ) {
    stackArgs += " --version ${env.STACK_VERSION}"
  } else {
    def manifest = readYaml(file: "package/endpoint/manifest.yml")

    if (manifest != null && manifest["conditions"] != null) {
      def kibanaVersionCondition = manifest["conditions"]["kibana.version"]
      if (kibanaVersionCondition != null) {
        def version = findOldestSupportedVersion(versionCondition: kibanaVersionCondition)
        stackArgs += " --version ${version}"
      }
    }
  }

  sh(label: "Update the Elastic stack", script: "./scripts/go-tools/bin/elastic-package stack update ${stackArgs}")
  sh(label: "Boot up the Elastic stack", script: "./scripts/go-tools/bin/elastic-package stack up --services elasticsearch -d ${stackArgs}")
}

def packageStoragePublish(builtPackagesPath) {
  def unpublished = signUnpublishedArtifactsWithElastic(builtPackagesPath)
  if (!unpublished) {
    echo 'Package has been already published'
    return
  }
  uploadUnpublishedToPackageStorage(builtPackagesPath)
}

def signUnpublishedArtifactsWithElastic(builtPackagesPath) {
  def unpublished = false
  dir(builtPackagesPath) {
    findFiles()?.findAll{ it.name.endsWith('.zip') }?.collect{ it.name }?.sort()?.each {
      def packageZip = it
      if (isAlreadyPublished(packageZip)) {
        return
      }

      unpublished = true
      googleStorageUpload(bucket: env.INFRA_SIGNING_BUCKET_ARTIFACTS_PATH,
        credentialsId: env.INTERNAL_CI_JOB_GCS_CREDENTIALS,
        pattern: '*.zip',
        sharedPublicly: false,
        showInline: true)
    }
  }

  if (!unpublished) {
    return unpublished
  }

  withCredentials([string(credentialsId: env.JOB_SIGNING_CREDENTIALS, variable: 'TOKEN')]) {
    triggerRemoteJob(auth: CredentialsAuth(credentials: 'local-readonly-api-token'),
      job: 'https://internal-ci.elastic.co/job/elastic+unified-release+master+sign-artifacts-with-gpg',
      token: TOKEN,
      parameters: [
        gcs_input_path: env.INFRA_SIGNING_BUCKET_ARTIFACTS_PATH,
      ],
      useCrumbCache: false,
      useJobInfoCache: false)
  }
  googleStorageDownload(bucketUri: "${env.INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_PATH}/*",
    credentialsId: env.INTERNAL_CI_JOB_GCS_CREDENTIALS,
    localDirectory: builtPackagesPath + '/',
    pathPrefix: "${env.INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_SUBFOLDER}")
    sh(label: 'Rename .asc to .sig', script: 'for f in ' + builtPackagesPath + '/*.asc; do mv "$f" "${f%.asc}.sig"; done')
  archiveArtifacts(allowEmptyArchive: false, artifacts: "${builtPackagesPath}/*.sig")
  return unpublished
}

def uploadUnpublishedToPackageStorage(builtPackagesPath) {
  def dryRun = env.BRANCH_NAME != 'master'
  if (dryRun) {
    echo "Dry run: endpoint-package won't be published"
  }

  dir(builtPackagesPath) {
    withGCPEnv(secret: env.PACKAGE_STORAGE_UPLOADER_GCP_SERVICE_ACCOUNT) {
      withCredentials([string(credentialsId: env.PACKAGE_STORAGE_UPLOADER_CREDENTIALS, variable: 'TOKEN')]) {
        findFiles()?.findAll{ it.name.endsWith('.zip') }?.collect{ it.name }?.sort()?.each {
          def packageZip = it
          if (isAlreadyPublished(packageZip)) {
            return
          }

          sh(label: 'Upload package .zip file', script: "gsutil cp ${packageZip} ${env.PACKAGE_STORAGE_INTERNAL_BUCKET_QUEUE_PUBLISHING_PATH}/")
          sh(label: 'Upload package .sig file', script: "gsutil cp ${packageZip}.sig ${env.PACKAGE_STORAGE_INTERNAL_BUCKET_QUEUE_PUBLISHING_PATH}/")

          // FIXME legacy_package=false
          // endpoint-package must be aligned with spec first, this option disables validation on the job side
          triggerRemoteJob(auth: CredentialsAuth(credentials: 'local-readonly-api-token'),
            job: 'https://internal-ci.elastic.co/job/package_storage/job/publishing-job-remote',
            token: TOKEN,
            parameters: [
              dry_run: dryRun,
              gs_package_build_zip_path: "${env.PACKAGE_STORAGE_INTERNAL_BUCKET_QUEUE_PUBLISHING_PATH}/${packageZip}",
              gs_package_signature_path: "${env.PACKAGE_STORAGE_INTERNAL_BUCKET_QUEUE_PUBLISHING_PATH}/${packageZip}.sig",
              legacy_package: true,
            ],
            useCrumbCache: true,
            useJobInfoCache: true)
        }
      }
    }
  }
}

def isAlreadyPublished(packageZip) {
  def responseCode = httpRequest(method: "HEAD",
    url: "https://package-storage.elastic.co/artifacts/packages/${packageZip}",
    response_code_only: true)
  return responseCode == 200
}
