- name: '@timestamp'
  level: core
  required: true
  type: date
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the event was generated by the source.

    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  default_field: true
- name: action_id
  level: custom
  type: alias
  description: The action id
  path: EndpointActions.action_id
- name: agent_id
  level: custom
  type: alias
  description: 'Alias field that maps to {agent: {id}}'
  path: agent.id
- name: completed_at
  level: custom
  type: alias
  description: Request completion timestamp when the response is done executing. Usually matches with @timestamp.
  path: EndpointActions.completed_at
- name: data.command
  level: custom
  type: alias
  description: The action that is requested
  path: EndpointActions.data.command
- name: data.comment
  level: custom
  type: alias
  description: A comment that describes the action that is requested
  path: EndpointActions.data.comment
- name: started_at
  level: custom
  type: alias
  description: Timestamp of start of request
  path: EndpointActions.started_at
- name: status
  level: custom
  type: alias
  description: The status of the request that distinguishes if the request is queued, running or completed.
  path: EndpointActions.status
- name: EndpointActions
  title: Endpoint Actions
  group: 2
  description: Fields to describe the endpoint  action requests and responses.
  type: group
  default_field: true
  fields:
    - name: action_id
      level: custom
      type: keyword
      ignore_above: 1024
      description: The action id
      default_field: false
    - name: completed_at
      level: custom
      type: date
      description: Request completion timestamp when the response is done executing. Usually matches with @timestamp.
      default_field: false
    - name: data
      level: custom
      type: object
      description: The action request information
      default_field: false
    - name: data.command
      level: custom
      type: keyword
      ignore_above: 1024
      description: The action that is requested
      example: isolate
      default_field: false
    - name: data.comment
      level: custom
      type: text
      description: A comment that describes the action that is requested
      default_field: false
    - name: started_at
      level: custom
      type: date
      description: Timestamp of start of request
      default_field: false
    - name: status
      level: custom
      type: keyword
      ignore_above: 1024
      description: The status of the request that distinguishes if the request is queued, running or completed.
      default_field: false
- name: agent
  title: Agent
  group: 2
  description: 'The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.'
  footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat. For APM, it is the agent running in the app/service. The agent information does not change if data is sent through queuing systems like Kafka, Redis, or processing systems such as Logstash or APM Server.'
  type: group
  default_field: true
  fields:
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier of this agent (if one exists).

        Example: For Beats this would be beat.id.'
      example: 8a4f500d
- name: data_stream
  title: data_stream
  group: 2
  description: Fields describing the new indexing strategy <type>-<dataset>-<namespace>
  type: group
  default_field: true
  fields:
    - name: dataset
      level: custom
      type: constant_keyword
      description: Data stream dataset name.
      example: nginx.access
      default_field: false
    - name: namespace
      level: custom
      type: constant_keyword
      description: Data stream namespace.
      example: production
      default_field: false
    - name: type
      level: custom
      type: constant_keyword
      description: Data stream type.
      example: logs
      default_field: false
- name: ecs
  title: ECS
  group: 2
  description: Meta-information specific to ECS.
  type: group
  default_field: true
  fields:
    - name: version
      level: core
      required: true
      type: keyword
      ignore_above: 1024
      description: 'ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.'
      example: 1.0.0
- name: error
  title: Error
  group: 2
  description: 'These fields can represent errors of any kind.

    Use them for errors that happen while fetching events or in cases where the event itself contains an error.'
  type: group
  default_field: true
  fields:
    - name: code
      level: core
      type: keyword
      ignore_above: 1024
      description: Error code describing the error.
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the error.
    - name: message
      level: core
      type: match_only_text
      description: Error message.
    - name: stack_trace
      level: extended
      type: wildcard
      multi_fields:
        - name: text
          type: match_only_text
          default_field: false
      description: The stack trace of this error in plain text.
    - name: type
      level: extended
      type: keyword
      ignore_above: 1024
      description: The type of the error, for example the class name of the exception.
      example: java.lang.NullPointerException
- name: event
  title: Event
  group: 2
  description: 'The event fields are used for context information about the log or metric event itself.

    A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host and device temperature. See the `event.kind` definition in this section for additional details about metric and state events.'
  type: group
  default_field: true
  fields:
    - name: action
      level: core
      type: keyword
      ignore_above: 1024
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.'
      example: user-password-change
    - name: category
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.

        This field is an array. This will allow proper categorization of some events that fall in multiple categories.'
      example: authentication
    - name: created
      level: core
      type: date
      description: 'event.created contains the date/time when the event was first read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      example: '2016-05-23T08:05:34.857Z'
    - name: end
      level: extended
      type: date
      description: event.end contains the date when the event ended or when the activity was last observed.
    - name: hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.
      example: 123456789012345678901234567890ABCD
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique ID to describe the event.
      example: 8a4f500d
    - name: ingested
      level: core
      type: date
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s also different from `event.created`, which is meant to capture the first time an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.'
      example: '2016-05-23T08:05:35.101Z'
      default_field: false
    - name: outcome
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.

        Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.

        Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.

        Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.'
      example: success
    - name: start
      level: extended
      type: date
      description: event.start contains the date when the event started or when the activity was first observed.
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events that fall in multiple event types.'
