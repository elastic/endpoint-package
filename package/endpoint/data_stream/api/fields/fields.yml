- name: '@timestamp'
  level: core
  required: true
  type: date
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the event was generated by the source.

    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  default_field: true
- name: message
  level: core
  type: match_only_text
  description: 'For log events the message field contains the log message, optimized for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World
  default_field: true
- name: Target
  title: Target
  group: 2
  description: 'These fields contain information about a target.

    These fields provide more context about the target process and thread that are related to the data in the document. Useful in a security context where a target process or thread may be acted on by another process or thread.'
  type: group
  default_field: true
  fields:
    - name: process.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: caseless
          type: keyword
          normalizer: lowercase
          ignore_above: 1024
        - name: text
          type: text
          norms: false
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      default_field: false
    - name: process.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
- name: data_stream
  title: data_stream
  group: 2
  description: Fields describing the new indexing strategy <type>-<dataset>-<namespace>
  type: group
  default_field: true
  fields:
    - name: dataset
      level: custom
      type: constant_keyword
      description: Data stream dataset name.
      example: nginx.access
      default_field: false
    - name: namespace
      level: custom
      type: constant_keyword
      description: Data stream namespace.
      example: production
      default_field: false
    - name: type
      level: custom
      type: constant_keyword
      description: Data stream type.
      example: logs
      default_field: false
- name: ecs
  title: ECS
  group: 2
  description: Meta-information specific to ECS.
  type: group
  default_field: true
  fields:
    - name: version
      level: core
      required: true
      type: keyword
      ignore_above: 1024
      description: 'ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.'
      example: 1.0.0
- name: event
  title: Event
  group: 2
  description: 'The event fields are used for context information about the log or metric event itself.

    A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host and device temperature. See the `event.kind` definition in this section for additional details about metric and state events.'
  type: group
  default_field: true
  fields:
    - name: action
      level: core
      type: keyword
      ignore_above: 1024
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.'
      example: user-password-change
    - name: category
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.

        This field is an array. This will allow proper categorization of some events that fall in multiple categories.'
      example: authentication
    - name: created
      level: core
      type: date
      description: 'event.created contains the date/time when the event was first read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      example: '2016-05-23T08:05:34.857Z'
    - name: end
      level: extended
      type: date
      description: event.end contains the date when the event ended or when the activity was last observed.
    - name: hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.
      example: 123456789012345678901234567890ABCD
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique ID to describe the event.
      example: 8a4f500d
    - name: ingested
      level: core
      type: date
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s also different from `event.created`, which is meant to capture the first time an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.'
      example: '2016-05-23T08:05:35.101Z'
      default_field: false
    - name: outcome
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.

        Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.

        Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.

        Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.'
      example: success
    - name: start
      level: extended
      type: date
      description: event.start contains the date when the event started or when the activity was first observed.
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events that fall in multiple event types.'
- name: host
  title: Host
  group: 2
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.'
  type: group
  default_field: true
  fields:
    - name: architecture
      level: core
      type: keyword
      ignore_above: 1024
      description: Operating system architecture.
      example: x86_64
    - name: domain
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Name of the domain of which the host is a member.

        For example, on Windows this could be the host''s Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host''s LDAP provider.'
      example: CONTOSO
      default_field: false
    - name: hostname
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
    - name: ip
      level: core
      type: ip
      description: Host ip addresses.
    - name: mac
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Host MAC addresses.

        The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.'
      example: '["00-00-5E-00-53-23", "00-00-5E-00-53-24"]'
      pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
    - name: name
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the host.

        It can contain what hostname returns on Unix systems, the fully qualified domain name (FQDN), or a name specified by the user. The recommended value is the lowercase FQDN of the host.'
    - name: os.Ext
      level: custom
      type: object
      description: Object for all custom defined fields to live in.
      default_field: false
    - name: os.Ext.variant
      level: custom
      type: keyword
      ignore_above: 1024
      description: A string value or phrase that further aid to classify or qualify the operating system (OS).  For example the distribution for a Linux OS will be entered in this field.
      example: Ubuntu
      default_field: false
    - name: os.family
      level: extended
      type: keyword
      ignore_above: 1024
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
    - name: os.full
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: caseless
          type: keyword
          normalizer: lowercase
          ignore_above: 1024
          default_field: false
        - name: text
          type: text
          norms: false
          default_field: false
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
    - name: os.kernel
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
    - name: os.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: caseless
          type: keyword
          normalizer: lowercase
          ignore_above: 1024
          default_field: false
        - name: text
          type: text
          norms: false
          default_field: false
      description: Operating system name, without the version.
      example: Mac OS X
    - name: os.platform
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
    - name: os.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Use the `os.type` field to categorize the operating system into one of the broad commercial families.

        If the OS you''re dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.'
      example: macos
      default_field: false
    - name: os.version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system version as a raw string.
      example: 10.14.1
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Type of host.

        For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.'
    - name: uptime
      level: extended
      type: long
      description: Seconds the host has been up.
      example: 1325
- name: process
  title: Process
  group: 2
  description: 'These fields contain information about a process.

    These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.'
  type: group
  default_field: true
  fields:
    - name: Ext
      level: custom
      type: object
      description: Object for all custom defined fields to live in.
      default_field: false
    - name: Ext.ancestry
      level: custom
      type: keyword
      ignore_above: 1024
      description: An array of entity_ids indicating the ancestors for this event
      default_field: false
    - name: Ext.api.name
      level: custom
      type: keyword
      ignore_above: 1024
      description: The name of the API, usually the name of the function or system call.
      default_field: false
    - name: Ext.api.parameters.desired_access
      level: custom
      type: keyword
      ignore_above: 1024
      description: This parameter indicates the string value of the `DesiredAccess` field  to `OpenProcess` or `OpenThread`.
      default_field: false
    - name: Ext.api.parameters.desired_access_numeric
      level: custom
      type: long
      description: This parameter indicates the numeric value of the `DesiredAccess` field passed to `OpenProcess` or `OpenThread`.
      default_field: false
    - name: Ext.api.parameters.handle_type
      level: custom
      type: keyword
      ignore_above: 1024
      description: This parameter indicates whether the detected access was attempt against a process or a thread.
      example: process
      default_field: false
    - name: entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: executable
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: caseless
          type: keyword
          normalizer: lowercase
          ignore_above: 1024
          default_field: false
        - name: text
          type: text
          norms: false
          default_field: false
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
    - name: name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: caseless
          type: keyword
          normalizer: lowercase
          ignore_above: 1024
          default_field: false
        - name: text
          type: text
          norms: false
          default_field: false
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
    - name: pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
    - name: thread.Ext
      level: custom
      type: object
      description: Object for all custom defined fields to live in.
      default_field: false
    - name: thread.Ext.call_stack
      level: custom
      type: object
      description: Fields describing a stack frame.  call_stack is expected to be an array where each array element represents a stack frame.
      enabled: false
      default_field: false
    - name: thread.Ext.call_stack.instruction_pointer
      level: custom
      type: keyword
      ignore_above: 1024
      description: The return address of this stack frame.
      default_field: false
    - name: thread.Ext.call_stack.module_path
      level: custom
      type: keyword
      ignore_above: 1024
      description: The path to the DLL/module containing `instruction_pointer`.
      default_field: false
    - name: thread.Ext.call_stack_contains_unbacked
      level: custom
      type: boolean
      description: Indicates whether the creating thread's stack contains frames pointing outside any known executable image.
      default_field: false
    - name: thread.Ext.call_stack_final_user_module
      level: custom
      type: nested
      description: The final non-win32 module in the call stack.
      default_field: false
    - name: thread.Ext.call_stack_final_user_module.path
      level: custom
      type: keyword
      ignore_above: 1024
      description: The file path of the call_stack_final_user_module.
      example: C:\Program Files\Example\example.dll
      default_field: false
    - name: thread.id
      level: extended
      type: long
      format: string
      description: Thread ID.
      example: 4242
- name: user
  title: User
  group: 2
  description: 'The user fields describe information about the user that is relevant to the event.

    Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.'
  type: group
  default_field: true
  fields:
    - name: domain
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
    - name: email
      level: extended
      type: keyword
      ignore_above: 1024
      description: User email address.
    - name: full_name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: text
          type: match_only_text
          default_field: false
      description: User's full name, if available.
      example: Albert Einstein
    - name: hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique user hash to correlate information for a user in anonymized form.

        Useful if `user.id` or `user.name` contain confidential information and cannot be used.'
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
    - name: name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: text
          type: match_only_text
          default_field: false
      description: Short name or login of the user.
      example: a.einstein
